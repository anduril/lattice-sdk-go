// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: anduril/communicationsmanager/v1/communications_manager_api.pub.proto

package communicationsmanagerv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RuleType int32

const (
	RuleType_RULE_TYPE_INVALID     RuleType = 0
	RuleType_RULE_TYPE_ENTITY      RuleType = 1
	RuleType_RULE_TYPE_BLOB        RuleType = 2
	RuleType_RULE_TYPE_INTEGRATION RuleType = 3
)

// Enum value maps for RuleType.
var (
	RuleType_name = map[int32]string{
		0: "RULE_TYPE_INVALID",
		1: "RULE_TYPE_ENTITY",
		2: "RULE_TYPE_BLOB",
		3: "RULE_TYPE_INTEGRATION",
	}
	RuleType_value = map[string]int32{
		"RULE_TYPE_INVALID":     0,
		"RULE_TYPE_ENTITY":      1,
		"RULE_TYPE_BLOB":        2,
		"RULE_TYPE_INTEGRATION": 3,
	}
)

func (x RuleType) Enum() *RuleType {
	p := new(RuleType)
	*p = x
	return p
}

func (x RuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_enumTypes[0].Descriptor()
}

func (RuleType) Type() protoreflect.EnumType {
	return &file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_enumTypes[0]
}

func (x RuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleType.Descriptor instead.
func (RuleType) EnumDescriptor() ([]byte, []int) {
	return file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_rawDescGZIP(), []int{0}
}

// A request to put a rule on this distribution manager.
type PutRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule *Rule `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule,omitempty"`
	// To be DEPRECATED. Use `Rule`
	DistributionRule *DistributionRule `protobuf:"bytes,1,opt,name=distribution_rule,json=distributionRule,proto3" json:"distribution_rule,omitempty"`
}

func (x *PutRuleRequest) Reset() {
	*x = PutRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRuleRequest) ProtoMessage() {}

func (x *PutRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRuleRequest.ProtoReflect.Descriptor instead.
func (*PutRuleRequest) Descriptor() ([]byte, []int) {
	return file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_rawDescGZIP(), []int{0}
}

func (x *PutRuleRequest) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *PutRuleRequest) GetDistributionRule() *DistributionRule {
	if x != nil {
		return x.DistributionRule
	}
	return nil
}

// A response indicating success or failure of the PutRuleRequest.
type PutRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current version of the rule after attempting to Put a rule. On success, version_num is incremented by 1.
	// On conflict the current, nonupdated version is returned and containing the current version_num.
	Rule *Rule `protobuf:"bytes,3,opt,name=rule,proto3" json:"rule,omitempty"`
	// Error message returned in the event of an error such as a Proto-KV conflict.
	Error *CommunicationsManagerError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// To be DEPRECATED. Use `Rule`
	DistributionRule *DistributionRule `protobuf:"bytes,1,opt,name=distribution_rule,json=distributionRule,proto3" json:"distribution_rule,omitempty"`
}

func (x *PutRuleResponse) Reset() {
	*x = PutRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRuleResponse) ProtoMessage() {}

func (x *PutRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRuleResponse.ProtoReflect.Descriptor instead.
func (*PutRuleResponse) Descriptor() ([]byte, []int) {
	return file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_rawDescGZIP(), []int{1}
}

func (x *PutRuleResponse) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *PutRuleResponse) GetError() *CommunicationsManagerError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PutRuleResponse) GetDistributionRule() *DistributionRule {
	if x != nil {
		return x.DistributionRule
	}
	return nil
}

// A request to stream rules from this node's distribution manager.
type StreamRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleType []RuleType `protobuf:"varint,1,rep,packed,name=rule_type,json=ruleType,proto3,enum=anduril.communicationsmanager.v1.RuleType" json:"rule_type,omitempty"`
	// Stream preexisting rules only and close the stream once all preexisting rules have been provided.
	PreexistingOnly bool `protobuf:"varint,2,opt,name=preexisting_only,json=preexistingOnly,proto3" json:"preexisting_only,omitempty"`
}

func (x *StreamRulesRequest) Reset() {
	*x = StreamRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRulesRequest) ProtoMessage() {}

func (x *StreamRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRulesRequest.ProtoReflect.Descriptor instead.
func (*StreamRulesRequest) Descriptor() ([]byte, []int) {
	return file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_rawDescGZIP(), []int{2}
}

func (x *StreamRulesRequest) GetRuleType() []RuleType {
	if x != nil {
		return x.RuleType
	}
	return nil
}

func (x *StreamRulesRequest) GetPreexistingOnly() bool {
	if x != nil {
		return x.PreexistingOnly
	}
	return false
}

// A response stream will be fed all matching pre-existing rules first, then
// receive any ongoing events.
type StreamRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleEvent *RuleEvent `protobuf:"bytes,2,opt,name=rule_event,json=ruleEvent,proto3" json:"rule_event,omitempty"`
	// To be DEPRECATED. Use `RuleEvent`
	DistributionRuleEvent *DistributionRuleEvent `protobuf:"bytes,1,opt,name=distribution_rule_event,json=distributionRuleEvent,proto3" json:"distribution_rule_event,omitempty"`
}

func (x *StreamRulesResponse) Reset() {
	*x = StreamRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRulesResponse) ProtoMessage() {}

func (x *StreamRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRulesResponse.ProtoReflect.Descriptor instead.
func (*StreamRulesResponse) Descriptor() ([]byte, []int) {
	return file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_rawDescGZIP(), []int{3}
}

func (x *StreamRulesResponse) GetRuleEvent() *RuleEvent {
	if x != nil {
		return x.RuleEvent
	}
	return nil
}

func (x *StreamRulesResponse) GetDistributionRuleEvent() *DistributionRuleEvent {
	if x != nil {
		return x.DistributionRuleEvent
	}
	return nil
}

// A request to delete a rule on this distribution manager.
type DeleteRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule *Rule `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule,omitempty"`
	// To be DEPRECATED. Use `Rule`
	DistributionRule *DistributionRule `protobuf:"bytes,1,opt,name=distribution_rule,json=distributionRule,proto3" json:"distribution_rule,omitempty"`
}

func (x *DeleteRuleRequest) Reset() {
	*x = DeleteRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRuleRequest) ProtoMessage() {}

func (x *DeleteRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteRuleRequest) Descriptor() ([]byte, []int) {
	return file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteRuleRequest) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *DeleteRuleRequest) GetDistributionRule() *DistributionRule {
	if x != nil {
		return x.DistributionRule
	}
	return nil
}

// A response indicating success or failure of the DeleteRuleRequest.
type DeleteRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current version of the rule after attempting to delete a rule. On success, distribution_rule is null.
	// On failure, the rule returned is the conflicted version.
	Rule *Rule `protobuf:"bytes,3,opt,name=rule,proto3" json:"rule,omitempty"`
	// Error message returned in the event of an error such as a Proto-KV conflict.
	Error *CommunicationsManagerError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// To be DEPRECATED. Use `Rule`
	DistributionRule *DistributionRule `protobuf:"bytes,1,opt,name=distribution_rule,json=distributionRule,proto3" json:"distribution_rule,omitempty"`
}

func (x *DeleteRuleResponse) Reset() {
	*x = DeleteRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRuleResponse) ProtoMessage() {}

func (x *DeleteRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRuleResponse.ProtoReflect.Descriptor instead.
func (*DeleteRuleResponse) Descriptor() ([]byte, []int) {
	return file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteRuleResponse) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *DeleteRuleResponse) GetError() *CommunicationsManagerError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DeleteRuleResponse) GetDistributionRule() *DistributionRule {
	if x != nil {
		return x.DistributionRule
	}
	return nil
}

var File_anduril_communicationsmanager_v1_communications_manager_api_pub_proto protoreflect.FileDescriptor

var file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_rawDesc = []byte{
	0x0a, 0x45, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x31, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x01, 0x0a, 0x0e, 0x50, 0x75, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72,
	0x75, 0x6c, 0x65, 0x12, 0x5f, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x0f, 0x50, 0x75, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04,
	0x72, 0x75, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5f, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x12, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x47, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xd2, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0a,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x72,
	0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6f, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x15, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x5f, 0x0a, 0x11, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x10, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x04, 0x22, 0x85, 0x02, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x72, 0x75, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5f, 0x0a, 0x11, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x2a, 0x66, 0x0a, 0x08, 0x52, 0x75,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x4c, 0x4f, 0x42, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x55, 0x4c, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x03, 0x32, 0xbf, 0x06, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x50, 0x49, 0x12,
	0x6e, 0x0a, 0x07, 0x50, 0x75, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x30, 0x2e, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x75, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x7c, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x34,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x77, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x33, 0x2e, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x2e,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x40, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x41, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0xc6, 0x02, 0x0a, 0x24, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x20, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x41, 0x70, 0x69, 0x50, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x5a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2d, 0x67, 0x6f,
	0x2f, 0x73, 0x72, 0x63, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x41, 0x43, 0x58, 0xaa, 0x02, 0x20, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x20, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x2c, 0x41, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x22, 0x41, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_rawDescOnce sync.Once
	file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_rawDescData = file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_rawDesc
)

func file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_rawDescGZIP() []byte {
	file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_rawDescOnce.Do(func() {
		file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_rawDescData = protoimpl.X.CompressGZIP(file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_rawDescData)
	})
	return file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_rawDescData
}

var file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_goTypes = []any{
	(RuleType)(0),                           // 0: anduril.communicationsmanager.v1.RuleType
	(*PutRuleRequest)(nil),                  // 1: anduril.communicationsmanager.v1.PutRuleRequest
	(*PutRuleResponse)(nil),                 // 2: anduril.communicationsmanager.v1.PutRuleResponse
	(*StreamRulesRequest)(nil),              // 3: anduril.communicationsmanager.v1.StreamRulesRequest
	(*StreamRulesResponse)(nil),             // 4: anduril.communicationsmanager.v1.StreamRulesResponse
	(*DeleteRuleRequest)(nil),               // 5: anduril.communicationsmanager.v1.DeleteRuleRequest
	(*DeleteRuleResponse)(nil),              // 6: anduril.communicationsmanager.v1.DeleteRuleResponse
	(*Rule)(nil),                            // 7: anduril.communicationsmanager.v1.Rule
	(*DistributionRule)(nil),                // 8: anduril.communicationsmanager.v1.DistributionRule
	(*CommunicationsManagerError)(nil),      // 9: anduril.communicationsmanager.v1.CommunicationsManagerError
	(*RuleEvent)(nil),                       // 10: anduril.communicationsmanager.v1.RuleEvent
	(*DistributionRuleEvent)(nil),           // 11: anduril.communicationsmanager.v1.DistributionRuleEvent
	(*StreamIntegrationsRequest)(nil),       // 12: anduril.communicationsmanager.v1.StreamIntegrationsRequest
	(*GetIntegrationsRequest)(nil),          // 13: anduril.communicationsmanager.v1.GetIntegrationsRequest
	(*IntegrationHealthUpdateRequest)(nil),  // 14: anduril.communicationsmanager.v1.IntegrationHealthUpdateRequest
	(*StreamIntegrationsResponse)(nil),      // 15: anduril.communicationsmanager.v1.StreamIntegrationsResponse
	(*GetIntegrationsResponse)(nil),         // 16: anduril.communicationsmanager.v1.GetIntegrationsResponse
	(*IntegrationHealthUpdateResponse)(nil), // 17: anduril.communicationsmanager.v1.IntegrationHealthUpdateResponse
}
var file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_depIdxs = []int32{
	7,  // 0: anduril.communicationsmanager.v1.PutRuleRequest.rule:type_name -> anduril.communicationsmanager.v1.Rule
	8,  // 1: anduril.communicationsmanager.v1.PutRuleRequest.distribution_rule:type_name -> anduril.communicationsmanager.v1.DistributionRule
	7,  // 2: anduril.communicationsmanager.v1.PutRuleResponse.rule:type_name -> anduril.communicationsmanager.v1.Rule
	9,  // 3: anduril.communicationsmanager.v1.PutRuleResponse.error:type_name -> anduril.communicationsmanager.v1.CommunicationsManagerError
	8,  // 4: anduril.communicationsmanager.v1.PutRuleResponse.distribution_rule:type_name -> anduril.communicationsmanager.v1.DistributionRule
	0,  // 5: anduril.communicationsmanager.v1.StreamRulesRequest.rule_type:type_name -> anduril.communicationsmanager.v1.RuleType
	10, // 6: anduril.communicationsmanager.v1.StreamRulesResponse.rule_event:type_name -> anduril.communicationsmanager.v1.RuleEvent
	11, // 7: anduril.communicationsmanager.v1.StreamRulesResponse.distribution_rule_event:type_name -> anduril.communicationsmanager.v1.DistributionRuleEvent
	7,  // 8: anduril.communicationsmanager.v1.DeleteRuleRequest.rule:type_name -> anduril.communicationsmanager.v1.Rule
	8,  // 9: anduril.communicationsmanager.v1.DeleteRuleRequest.distribution_rule:type_name -> anduril.communicationsmanager.v1.DistributionRule
	7,  // 10: anduril.communicationsmanager.v1.DeleteRuleResponse.rule:type_name -> anduril.communicationsmanager.v1.Rule
	9,  // 11: anduril.communicationsmanager.v1.DeleteRuleResponse.error:type_name -> anduril.communicationsmanager.v1.CommunicationsManagerError
	8,  // 12: anduril.communicationsmanager.v1.DeleteRuleResponse.distribution_rule:type_name -> anduril.communicationsmanager.v1.DistributionRule
	1,  // 13: anduril.communicationsmanager.v1.CommunicationsManagerAPI.PutRule:input_type -> anduril.communicationsmanager.v1.PutRuleRequest
	3,  // 14: anduril.communicationsmanager.v1.CommunicationsManagerAPI.StreamRules:input_type -> anduril.communicationsmanager.v1.StreamRulesRequest
	5,  // 15: anduril.communicationsmanager.v1.CommunicationsManagerAPI.DeleteRule:input_type -> anduril.communicationsmanager.v1.DeleteRuleRequest
	12, // 16: anduril.communicationsmanager.v1.CommunicationsManagerAPI.StreamIntegrations:input_type -> anduril.communicationsmanager.v1.StreamIntegrationsRequest
	13, // 17: anduril.communicationsmanager.v1.CommunicationsManagerAPI.GetIntegrations:input_type -> anduril.communicationsmanager.v1.GetIntegrationsRequest
	14, // 18: anduril.communicationsmanager.v1.CommunicationsManagerAPI.IntegrationHealthUpdate:input_type -> anduril.communicationsmanager.v1.IntegrationHealthUpdateRequest
	2,  // 19: anduril.communicationsmanager.v1.CommunicationsManagerAPI.PutRule:output_type -> anduril.communicationsmanager.v1.PutRuleResponse
	4,  // 20: anduril.communicationsmanager.v1.CommunicationsManagerAPI.StreamRules:output_type -> anduril.communicationsmanager.v1.StreamRulesResponse
	6,  // 21: anduril.communicationsmanager.v1.CommunicationsManagerAPI.DeleteRule:output_type -> anduril.communicationsmanager.v1.DeleteRuleResponse
	15, // 22: anduril.communicationsmanager.v1.CommunicationsManagerAPI.StreamIntegrations:output_type -> anduril.communicationsmanager.v1.StreamIntegrationsResponse
	16, // 23: anduril.communicationsmanager.v1.CommunicationsManagerAPI.GetIntegrations:output_type -> anduril.communicationsmanager.v1.GetIntegrationsResponse
	17, // 24: anduril.communicationsmanager.v1.CommunicationsManagerAPI.IntegrationHealthUpdate:output_type -> anduril.communicationsmanager.v1.IntegrationHealthUpdateResponse
	19, // [19:25] is the sub-list for method output_type
	13, // [13:19] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_init() }
func file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_init() {
	if File_anduril_communicationsmanager_v1_communications_manager_api_pub_proto != nil {
		return
	}
	file_anduril_communicationsmanager_v1_common_pub_proto_init()
	file_anduril_communicationsmanager_v1_integration_pub_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PutRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PutRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*StreamRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*StreamRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_goTypes,
		DependencyIndexes: file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_depIdxs,
		EnumInfos:         file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_enumTypes,
		MessageInfos:      file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_msgTypes,
	}.Build()
	File_anduril_communicationsmanager_v1_communications_manager_api_pub_proto = out.File
	file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_rawDesc = nil
	file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_goTypes = nil
	file_anduril_communicationsmanager_v1_communications_manager_api_pub_proto_depIdxs = nil
}
