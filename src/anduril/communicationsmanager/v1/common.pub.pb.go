// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: anduril/communicationsmanager/v1/common.pub.proto

package communicationsmanagerv1

import (
	v11 "github.com/anduril/anduril-go/src/anduril/blobs/v1"
	v1 "github.com/anduril/anduril-go/src/anduril/entitymanager/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of distribution rule event.
type EventType int32

const (
	EventType_EVENT_TYPE_INVALID EventType = 0
	// Rule was created.
	EventType_EVENT_TYPE_CREATED EventType = 1
	// Rule was updated.
	EventType_EVENT_TYPE_UPDATE EventType = 2
	// Rule was deleted.
	EventType_EVENT_TYPE_DELETED EventType = 3
	// Rule already existed, but sent on a new stream connection.
	EventType_EVENT_TYPE_PREEXISTING EventType = 4
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EVENT_TYPE_INVALID",
		1: "EVENT_TYPE_CREATED",
		2: "EVENT_TYPE_UPDATE",
		3: "EVENT_TYPE_DELETED",
		4: "EVENT_TYPE_PREEXISTING",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_INVALID":     0,
		"EVENT_TYPE_CREATED":     1,
		"EVENT_TYPE_UPDATE":      2,
		"EVENT_TYPE_DELETED":     3,
		"EVENT_TYPE_PREEXISTING": 4,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_communicationsmanager_v1_common_pub_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_anduril_communicationsmanager_v1_common_pub_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_anduril_communicationsmanager_v1_common_pub_proto_rawDescGZIP(), []int{0}
}

// Event representing a type of distribution rule change.
type DistributionRuleEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of distribution rule event.
	EventType        EventType              `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=anduril.communicationsmanager.v1.EventType" json:"event_type,omitempty"`
	Time             *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	DistributionRule *DistributionRule      `protobuf:"bytes,3,opt,name=distribution_rule,json=distributionRule,proto3" json:"distribution_rule,omitempty"`
}

func (x *DistributionRuleEvent) Reset() {
	*x = DistributionRuleEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributionRuleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributionRuleEvent) ProtoMessage() {}

func (x *DistributionRuleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributionRuleEvent.ProtoReflect.Descriptor instead.
func (*DistributionRuleEvent) Descriptor() ([]byte, []int) {
	return file_anduril_communicationsmanager_v1_common_pub_proto_rawDescGZIP(), []int{0}
}

func (x *DistributionRuleEvent) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EVENT_TYPE_INVALID
}

func (x *DistributionRuleEvent) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DistributionRuleEvent) GetDistributionRule() *DistributionRule {
	if x != nil {
		return x.DistributionRule
	}
	return nil
}

type RuleEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType EventType              `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=anduril.communicationsmanager.v1.EventType" json:"event_type,omitempty"`
	Time      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Rule      *Rule                  `protobuf:"bytes,3,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *RuleEvent) Reset() {
	*x = RuleEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleEvent) ProtoMessage() {}

func (x *RuleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleEvent.ProtoReflect.Descriptor instead.
func (*RuleEvent) Descriptor() ([]byte, []int) {
	return file_anduril_communicationsmanager_v1_common_pub_proto_rawDescGZIP(), []int{1}
}

func (x *RuleEvent) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EVENT_TYPE_INVALID
}

func (x *RuleEvent) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *RuleEvent) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uniquely identifies a rule across hosts. If unset, the operation is
	// treated as a creation operation by the implementing service.
	RuleId string `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	// The version of this rule.
	VersionNum int64 `protobuf:"varint,2,opt,name=version_num,json=versionNum,proto3" json:"version_num,omitempty"`
	// Whether or not this rule is enabled.
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Human readable name associated with the rule.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Type of rule and details regarding that rule.
	//
	// Types that are assignable to Type:
	//
	//	*Rule_DistributionRule
	//	*Rule_IntegrationRule
	//	*Rule_CrossDomainRule
	Type isRule_Type `protobuf_oneof:"type"`
	// Email of the user who last modified the rule.
	LastModifiedByUser string `protobuf:"bytes,7,opt,name=last_modified_by_user,json=lastModifiedByUser,proto3" json:"last_modified_by_user,omitempty"`
	// Unix epoch timestamp in milliseconds of when the rule was last modified.
	LastModifiedTimeUnixEpochMs int64 `protobuf:"varint,8,opt,name=last_modified_time_unix_epoch_ms,json=lastModifiedTimeUnixEpochMs,proto3" json:"last_modified_time_unix_epoch_ms,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_anduril_communicationsmanager_v1_common_pub_proto_rawDescGZIP(), []int{2}
}

func (x *Rule) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *Rule) GetVersionNum() int64 {
	if x != nil {
		return x.VersionNum
	}
	return 0
}

func (x *Rule) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Rule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Rule) GetType() isRule_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Rule) GetDistributionRule() *DistributionRule {
	if x, ok := x.GetType().(*Rule_DistributionRule); ok {
		return x.DistributionRule
	}
	return nil
}

func (x *Rule) GetIntegrationRule() *IntegrationRule {
	if x, ok := x.GetType().(*Rule_IntegrationRule); ok {
		return x.IntegrationRule
	}
	return nil
}

func (x *Rule) GetCrossDomainRule() *CrossDomainRule {
	if x, ok := x.GetType().(*Rule_CrossDomainRule); ok {
		return x.CrossDomainRule
	}
	return nil
}

func (x *Rule) GetLastModifiedByUser() string {
	if x != nil {
		return x.LastModifiedByUser
	}
	return ""
}

func (x *Rule) GetLastModifiedTimeUnixEpochMs() int64 {
	if x != nil {
		return x.LastModifiedTimeUnixEpochMs
	}
	return 0
}

type isRule_Type interface {
	isRule_Type()
}

type Rule_DistributionRule struct {
	DistributionRule *DistributionRule `protobuf:"bytes,5,opt,name=distribution_rule,json=distributionRule,proto3,oneof"`
}

type Rule_IntegrationRule struct {
	IntegrationRule *IntegrationRule `protobuf:"bytes,6,opt,name=integration_rule,json=integrationRule,proto3,oneof"`
}

type Rule_CrossDomainRule struct {
	CrossDomainRule *CrossDomainRule `protobuf:"bytes,9,opt,name=cross_domain_rule,json=crossDomainRule,proto3,oneof"`
}

func (*Rule_DistributionRule) isRule_Type() {}

func (*Rule_IntegrationRule) isRule_Type() {}

func (*Rule_CrossDomainRule) isRule_Type() {}

type IntegrationRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uniquely identifies an integration on a node.
	IntegrationName string `protobuf:"bytes,1,opt,name=integration_name,json=integrationName,proto3" json:"integration_name,omitempty"`
	// Producer hostId, equivalent to the rule's source.
	HostId string `protobuf:"bytes,2,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	// Types that are assignable to Details:
	//
	//	*IntegrationRule_EntityIntegrationRuleDetails
	//	*IntegrationRule_BlobIntegrationRuleDetails
	Details isIntegrationRule_Details `protobuf_oneof:"details"`
}

func (x *IntegrationRule) Reset() {
	*x = IntegrationRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrationRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationRule) ProtoMessage() {}

func (x *IntegrationRule) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationRule.ProtoReflect.Descriptor instead.
func (*IntegrationRule) Descriptor() ([]byte, []int) {
	return file_anduril_communicationsmanager_v1_common_pub_proto_rawDescGZIP(), []int{3}
}

func (x *IntegrationRule) GetIntegrationName() string {
	if x != nil {
		return x.IntegrationName
	}
	return ""
}

func (x *IntegrationRule) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (m *IntegrationRule) GetDetails() isIntegrationRule_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (x *IntegrationRule) GetEntityIntegrationRuleDetails() *EntityIntegrationRuleDetails {
	if x, ok := x.GetDetails().(*IntegrationRule_EntityIntegrationRuleDetails); ok {
		return x.EntityIntegrationRuleDetails
	}
	return nil
}

func (x *IntegrationRule) GetBlobIntegrationRuleDetails() *BlobDistributionRuleDetails {
	if x, ok := x.GetDetails().(*IntegrationRule_BlobIntegrationRuleDetails); ok {
		return x.BlobIntegrationRuleDetails
	}
	return nil
}

type isIntegrationRule_Details interface {
	isIntegrationRule_Details()
}

type IntegrationRule_EntityIntegrationRuleDetails struct {
	EntityIntegrationRuleDetails *EntityIntegrationRuleDetails `protobuf:"bytes,3,opt,name=entity_integration_rule_details,json=entityIntegrationRuleDetails,proto3,oneof"`
}

type IntegrationRule_BlobIntegrationRuleDetails struct {
	BlobIntegrationRuleDetails *BlobDistributionRuleDetails `protobuf:"bytes,4,opt,name=blob_integration_rule_details,json=blobIntegrationRuleDetails,proto3,oneof"`
}

func (*IntegrationRule_EntityIntegrationRuleDetails) isIntegrationRule_Details() {}

func (*IntegrationRule_BlobIntegrationRuleDetails) isIntegrationRule_Details() {}

// Distribution rules are conjunctive (AND) when applied at the producer.
// This implies that given a primitive datum, if the datum satisfies a
// producer rule AND a consumer rule, it will be broadcast to the network.
type DistributionRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uniquely identifies a rule across hosts. If unset, the operation is
	// treated as a creation operation by the implementing service.
	RuleId string `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"` // TO BE DEPRECATED
	// Deprecated: use version_num instead.
	//
	// Deprecated: Marked as deprecated in anduril/communicationsmanager/v1/common.pub.proto.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Whether or not this rule is enabled.
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"` // TO BE DEPRECATED
	// Deprecated: use sources instead.
	//
	// Deprecated: Marked as deprecated in anduril/communicationsmanager/v1/common.pub.proto.
	Source *Source `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	// Used by consumer nodes to identify the source of the data to which they
	// are subscribing. In the case of an 'all' source, only a single entry should be present.
	//
	// Deprecated: Marked as deprecated in anduril/communicationsmanager/v1/common.pub.proto.
	Sources []*Source `protobuf:"bytes,8,rep,name=sources,proto3" json:"sources,omitempty"`
	// Used by producers to direct publish traffic. If unset, publish for this
	// rule may be directed to all consumers.
	//
	// Deprecated: Marked as deprecated in anduril/communicationsmanager/v1/common.pub.proto.
	Destination *Destination `protobuf:"bytes,5,opt,name=destination,proto3" json:"destination,omitempty"`
	// The details which inform how this primitive data is distributed.
	//
	// Types that are assignable to Details:
	//
	//	*DistributionRule_EntityDetails
	//	*DistributionRule_BlobDetails
	Details isDistributionRule_Details `protobuf_oneof:"details"`
	// Determines the priority with which messages passing this rule are sent. Valid values are in the range of [0, 7].
	// 0 is the lowest and 7 is the highest priority.
	Priority uint32 `protobuf:"varint,7,opt,name=priority,proto3" json:"priority,omitempty"`
	// Human readable description describing the DistributionRule.
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"` // TO BE DEPRECATED
	// Human readable name associated with the rule.
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"` // TO BE DEPRECATED
	// The version of this distribution rule.
	VersionNum int64 `protobuf:"varint,11,opt,name=version_num,json=versionNum,proto3" json:"version_num,omitempty"` // TO BE DEPRECATED
	// Contains the definition for either an inbound rule []source -> destination relationship or an outbound rule
	// source -> []destinations relationship. This will define the rule mechanism, where outbound rules are a deny-list
	// and inbound rules are an allow-list.
	SourceDestinationDirectionalControl *SourceDestinationDirectionalControl `protobuf:"bytes,12,opt,name=source_destination_directional_control,json=sourceDestinationDirectionalControl,proto3" json:"source_destination_directional_control,omitempty"`
}

func (x *DistributionRule) Reset() {
	*x = DistributionRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributionRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributionRule) ProtoMessage() {}

func (x *DistributionRule) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributionRule.ProtoReflect.Descriptor instead.
func (*DistributionRule) Descriptor() ([]byte, []int) {
	return file_anduril_communicationsmanager_v1_common_pub_proto_rawDescGZIP(), []int{4}
}

func (x *DistributionRule) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

// Deprecated: Marked as deprecated in anduril/communicationsmanager/v1/common.pub.proto.
func (x *DistributionRule) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DistributionRule) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// Deprecated: Marked as deprecated in anduril/communicationsmanager/v1/common.pub.proto.
func (x *DistributionRule) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

// Deprecated: Marked as deprecated in anduril/communicationsmanager/v1/common.pub.proto.
func (x *DistributionRule) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

// Deprecated: Marked as deprecated in anduril/communicationsmanager/v1/common.pub.proto.
func (x *DistributionRule) GetDestination() *Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (m *DistributionRule) GetDetails() isDistributionRule_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (x *DistributionRule) GetEntityDetails() *EntityDistributionRuleDetails {
	if x, ok := x.GetDetails().(*DistributionRule_EntityDetails); ok {
		return x.EntityDetails
	}
	return nil
}

func (x *DistributionRule) GetBlobDetails() *BlobDistributionRuleDetails {
	if x, ok := x.GetDetails().(*DistributionRule_BlobDetails); ok {
		return x.BlobDetails
	}
	return nil
}

func (x *DistributionRule) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *DistributionRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DistributionRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DistributionRule) GetVersionNum() int64 {
	if x != nil {
		return x.VersionNum
	}
	return 0
}

func (x *DistributionRule) GetSourceDestinationDirectionalControl() *SourceDestinationDirectionalControl {
	if x != nil {
		return x.SourceDestinationDirectionalControl
	}
	return nil
}

type isDistributionRule_Details interface {
	isDistributionRule_Details()
}

type DistributionRule_EntityDetails struct {
	// Provides the fine-grained details controlling how entities are distributed.
	EntityDetails *EntityDistributionRuleDetails `protobuf:"bytes,6,opt,name=entity_details,json=entityDetails,proto3,oneof"`
}

type DistributionRule_BlobDetails struct {
	// Provides the fine-grained detials controlling how blobs are distributed.
	BlobDetails *BlobDistributionRuleDetails `protobuf:"bytes,13,opt,name=blob_details,json=blobDetails,proto3,oneof"`
}

func (*DistributionRule_EntityDetails) isDistributionRule_Details() {}

func (*DistributionRule_BlobDetails) isDistributionRule_Details() {}

type SourceDestinationDirectionalControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SourceDestination:
	//
	//	*SourceDestinationDirectionalControl_InboundRuleSourceDestination
	//	*SourceDestinationDirectionalControl_OutboundRuleSourceDestination
	SourceDestination isSourceDestinationDirectionalControl_SourceDestination `protobuf_oneof:"source_destination"`
}

func (x *SourceDestinationDirectionalControl) Reset() {
	*x = SourceDestinationDirectionalControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceDestinationDirectionalControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceDestinationDirectionalControl) ProtoMessage() {}

func (x *SourceDestinationDirectionalControl) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceDestinationDirectionalControl.ProtoReflect.Descriptor instead.
func (*SourceDestinationDirectionalControl) Descriptor() ([]byte, []int) {
	return file_anduril_communicationsmanager_v1_common_pub_proto_rawDescGZIP(), []int{5}
}

func (m *SourceDestinationDirectionalControl) GetSourceDestination() isSourceDestinationDirectionalControl_SourceDestination {
	if m != nil {
		return m.SourceDestination
	}
	return nil
}

func (x *SourceDestinationDirectionalControl) GetInboundRuleSourceDestination() *InboundRuleSourceDestination {
	if x, ok := x.GetSourceDestination().(*SourceDestinationDirectionalControl_InboundRuleSourceDestination); ok {
		return x.InboundRuleSourceDestination
	}
	return nil
}

func (x *SourceDestinationDirectionalControl) GetOutboundRuleSourceDestination() *OutboundRuleSourceDestination {
	if x, ok := x.GetSourceDestination().(*SourceDestinationDirectionalControl_OutboundRuleSourceDestination); ok {
		return x.OutboundRuleSourceDestination
	}
	return nil
}

type isSourceDestinationDirectionalControl_SourceDestination interface {
	isSourceDestinationDirectionalControl_SourceDestination()
}

type SourceDestinationDirectionalControl_InboundRuleSourceDestination struct {
	InboundRuleSourceDestination *InboundRuleSourceDestination `protobuf:"bytes,1,opt,name=inbound_rule_source_destination,json=inboundRuleSourceDestination,proto3,oneof"`
}

type SourceDestinationDirectionalControl_OutboundRuleSourceDestination struct {
	OutboundRuleSourceDestination *OutboundRuleSourceDestination `protobuf:"bytes,2,opt,name=outbound_rule_source_destination,json=outboundRuleSourceDestination,proto3,oneof"`
}

func (*SourceDestinationDirectionalControl_InboundRuleSourceDestination) isSourceDestinationDirectionalControl_SourceDestination() {
}

func (*SourceDestinationDirectionalControl_OutboundRuleSourceDestination) isSourceDestinationDirectionalControl_SourceDestination() {
}

// Many destinations to one source. The source will block data from being sent to the destinations when matched by
// a filter statement. Rule is owned by the source.
type OutboundRuleSourceDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source       *Source        `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destinations []*Destination `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
}

func (x *OutboundRuleSourceDestination) Reset() {
	*x = OutboundRuleSourceDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutboundRuleSourceDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboundRuleSourceDestination) ProtoMessage() {}

func (x *OutboundRuleSourceDestination) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboundRuleSourceDestination.ProtoReflect.Descriptor instead.
func (*OutboundRuleSourceDestination) Descriptor() ([]byte, []int) {
	return file_anduril_communicationsmanager_v1_common_pub_proto_rawDescGZIP(), []int{6}
}

func (x *OutboundRuleSourceDestination) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *OutboundRuleSourceDestination) GetDestinations() []*Destination {
	if x != nil {
		return x.Destinations
	}
	return nil
}

// Many sources to one Destination. The destination will request data from the sources
// when matched by a filter statement. Rule is owned by the destination.
type InboundRuleSourceDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources     []*Source    `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	Destination *Destination `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *InboundRuleSourceDestination) Reset() {
	*x = InboundRuleSourceDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InboundRuleSourceDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundRuleSourceDestination) ProtoMessage() {}

func (x *InboundRuleSourceDestination) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundRuleSourceDestination.ProtoReflect.Descriptor instead.
func (*InboundRuleSourceDestination) Descriptor() ([]byte, []int) {
	return file_anduril_communicationsmanager_v1_common_pub_proto_rawDescGZIP(), []int{7}
}

func (x *InboundRuleSourceDestination) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *InboundRuleSourceDestination) GetDestination() *Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

// A source from which primitive data are routed.
type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of source.
	//
	// Types that are assignable to Source:
	//
	//	*Source_AssetId
	//	*Source_All
	//	*Source_HostId
	Source isSource_Source `protobuf_oneof:"source"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_anduril_communicationsmanager_v1_common_pub_proto_rawDescGZIP(), []int{8}
}

func (m *Source) GetSource() isSource_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

// Deprecated: Marked as deprecated in anduril/communicationsmanager/v1/common.pub.proto.
func (x *Source) GetAssetId() string {
	if x, ok := x.GetSource().(*Source_AssetId); ok {
		return x.AssetId
	}
	return ""
}

func (x *Source) GetAll() bool {
	if x, ok := x.GetSource().(*Source_All); ok {
		return x.All
	}
	return false
}

func (x *Source) GetHostId() string {
	if x, ok := x.GetSource().(*Source_HostId); ok {
		return x.HostId
	}
	return ""
}

type isSource_Source interface {
	isSource_Source()
}

type Source_AssetId struct {
	// The source is a particular asset ID.
	//
	// Deprecated: Marked as deprecated in anduril/communicationsmanager/v1/common.pub.proto.
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof"`
}

type Source_All struct {
	// The source is all sources. This selection is only used for inbound rules.
	All bool `protobuf:"varint,2,opt,name=all,proto3,oneof"`
}

type Source_HostId struct {
	// The source is a particular host ID.
	HostId string `protobuf:"bytes,3,opt,name=host_id,json=hostId,proto3,oneof"`
}

func (*Source_AssetId) isSource_Source() {}

func (*Source_All) isSource_Source() {}

func (*Source_HostId) isSource_Source() {}

// A destination to which data are routed.
type Destination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of destination.
	//
	// Types that are assignable to Destination:
	//
	//	*Destination_AssetId
	//	*Destination_HostId
	//	*Destination_All
	Destination isDestination_Destination `protobuf_oneof:"destination"`
}

func (x *Destination) Reset() {
	*x = Destination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Destination) ProtoMessage() {}

func (x *Destination) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Destination.ProtoReflect.Descriptor instead.
func (*Destination) Descriptor() ([]byte, []int) {
	return file_anduril_communicationsmanager_v1_common_pub_proto_rawDescGZIP(), []int{9}
}

func (m *Destination) GetDestination() isDestination_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

// Deprecated: Marked as deprecated in anduril/communicationsmanager/v1/common.pub.proto.
func (x *Destination) GetAssetId() string {
	if x, ok := x.GetDestination().(*Destination_AssetId); ok {
		return x.AssetId
	}
	return ""
}

func (x *Destination) GetHostId() string {
	if x, ok := x.GetDestination().(*Destination_HostId); ok {
		return x.HostId
	}
	return ""
}

func (x *Destination) GetAll() bool {
	if x, ok := x.GetDestination().(*Destination_All); ok {
		return x.All
	}
	return false
}

type isDestination_Destination interface {
	isDestination_Destination()
}

type Destination_AssetId struct {
	// The destination is a particular asset ID.
	//
	// Deprecated: Marked as deprecated in anduril/communicationsmanager/v1/common.pub.proto.
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof"`
}

type Destination_HostId struct {
	// The destination is a particular host ID.
	HostId string `protobuf:"bytes,2,opt,name=host_id,json=hostId,proto3,oneof"`
}

type Destination_All struct {
	// The destination is all destinations. This selection is only used for outbound rules.
	All bool `protobuf:"varint,3,opt,name=all,proto3,oneof"`
}

func (*Destination_AssetId) isDestination_Destination() {}

func (*Destination_HostId) isDestination_Destination() {}

func (*Destination_All) isDestination_Destination() {}

// Message to contain additional business logic for entities. Entity_Filter and Dynamic Statement are ANDed together
// when both are present.
type EntityDistributionRuleDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Controls the filtering which should be applied in the compliant service.
	// TO BE DEPRECATED, use entity_filter_selection
	EntityFilter *v1.Statement `protobuf:"bytes,1,opt,name=entity_filter,json=entityFilter,proto3" json:"entity_filter,omitempty"`
	// Types that are assignable to EntityFilterSelection:
	//
	//	*EntityDistributionRuleDetails_StaticStatement
	//	*EntityDistributionRuleDetails_DynamicStatement
	EntityFilterSelection isEntityDistributionRuleDetails_EntityFilterSelection `protobuf_oneof:"entity_filter_selection"`
}

func (x *EntityDistributionRuleDetails) Reset() {
	*x = EntityDistributionRuleDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityDistributionRuleDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDistributionRuleDetails) ProtoMessage() {}

func (x *EntityDistributionRuleDetails) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDistributionRuleDetails.ProtoReflect.Descriptor instead.
func (*EntityDistributionRuleDetails) Descriptor() ([]byte, []int) {
	return file_anduril_communicationsmanager_v1_common_pub_proto_rawDescGZIP(), []int{10}
}

func (x *EntityDistributionRuleDetails) GetEntityFilter() *v1.Statement {
	if x != nil {
		return x.EntityFilter
	}
	return nil
}

func (m *EntityDistributionRuleDetails) GetEntityFilterSelection() isEntityDistributionRuleDetails_EntityFilterSelection {
	if m != nil {
		return m.EntityFilterSelection
	}
	return nil
}

func (x *EntityDistributionRuleDetails) GetStaticStatement() *v1.Statement {
	if x, ok := x.GetEntityFilterSelection().(*EntityDistributionRuleDetails_StaticStatement); ok {
		return x.StaticStatement
	}
	return nil
}

func (x *EntityDistributionRuleDetails) GetDynamicStatement() *v1.DynamicStatement {
	if x, ok := x.GetEntityFilterSelection().(*EntityDistributionRuleDetails_DynamicStatement); ok {
		return x.DynamicStatement
	}
	return nil
}

type isEntityDistributionRuleDetails_EntityFilterSelection interface {
	isEntityDistributionRuleDetails_EntityFilterSelection()
}

type EntityDistributionRuleDetails_StaticStatement struct {
	// Controls the filtering which should be applied in the compliant service.
	StaticStatement *v1.Statement `protobuf:"bytes,2,opt,name=static_statement,json=staticStatement,proto3,oneof"`
}

type EntityDistributionRuleDetails_DynamicStatement struct {
	// Used for matching location details.
	DynamicStatement *v1.DynamicStatement `protobuf:"bytes,3,opt,name=dynamic_statement,json=dynamicStatement,proto3,oneof"`
}

func (*EntityDistributionRuleDetails_StaticStatement) isEntityDistributionRuleDetails_EntityFilterSelection() {
}

func (*EntityDistributionRuleDetails_DynamicStatement) isEntityDistributionRuleDetails_EntityFilterSelection() {
}

type BlobDistributionRuleDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in anduril/communicationsmanager/v1/common.pub.proto.
	BlobFilter *v11.Statement `protobuf:"bytes,1,opt,name=blob_filter,json=blobFilter,proto3" json:"blob_filter,omitempty"`
	// Controls blob filtering using disjoint matching, meaning only 1 statement needs to match.
	BlobFilters []*v11.Statement `protobuf:"bytes,2,rep,name=blob_filters,json=blobFilters,proto3" json:"blob_filters,omitempty"`
}

func (x *BlobDistributionRuleDetails) Reset() {
	*x = BlobDistributionRuleDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobDistributionRuleDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobDistributionRuleDetails) ProtoMessage() {}

func (x *BlobDistributionRuleDetails) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobDistributionRuleDetails.ProtoReflect.Descriptor instead.
func (*BlobDistributionRuleDetails) Descriptor() ([]byte, []int) {
	return file_anduril_communicationsmanager_v1_common_pub_proto_rawDescGZIP(), []int{11}
}

// Deprecated: Marked as deprecated in anduril/communicationsmanager/v1/common.pub.proto.
func (x *BlobDistributionRuleDetails) GetBlobFilter() *v11.Statement {
	if x != nil {
		return x.BlobFilter
	}
	return nil
}

func (x *BlobDistributionRuleDetails) GetBlobFilters() []*v11.Statement {
	if x != nil {
		return x.BlobFilters
	}
	return nil
}

// CommunicationsManagerError message contents.
type CommunicationsManagerError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CommunicationsManagerError) Reset() {
	*x = CommunicationsManagerError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationsManagerError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationsManagerError) ProtoMessage() {}

func (x *CommunicationsManagerError) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationsManagerError.ProtoReflect.Descriptor instead.
func (*CommunicationsManagerError) Descriptor() ([]byte, []int) {
	return file_anduril_communicationsmanager_v1_common_pub_proto_rawDescGZIP(), []int{12}
}

func (x *CommunicationsManagerError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Rule to apply to Cross Domain, will function as an inbound filter which allows matching entities to pass through.
type CrossDomainRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Details:
	//
	//	*CrossDomainRule_EntityDetails
	Details isCrossDomainRule_Details `protobuf_oneof:"details"`
	// Destination CDS to apply the rule to.
	CdsDestination *CdsDestination `protobuf:"bytes,2,opt,name=cds_destination,json=cdsDestination,proto3" json:"cds_destination,omitempty"`
}

func (x *CrossDomainRule) Reset() {
	*x = CrossDomainRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossDomainRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossDomainRule) ProtoMessage() {}

func (x *CrossDomainRule) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossDomainRule.ProtoReflect.Descriptor instead.
func (*CrossDomainRule) Descriptor() ([]byte, []int) {
	return file_anduril_communicationsmanager_v1_common_pub_proto_rawDescGZIP(), []int{13}
}

func (m *CrossDomainRule) GetDetails() isCrossDomainRule_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (x *CrossDomainRule) GetEntityDetails() *EntityDistributionRuleDetails {
	if x, ok := x.GetDetails().(*CrossDomainRule_EntityDetails); ok {
		return x.EntityDetails
	}
	return nil
}

func (x *CrossDomainRule) GetCdsDestination() *CdsDestination {
	if x != nil {
		return x.CdsDestination
	}
	return nil
}

type isCrossDomainRule_Details interface {
	isCrossDomainRule_Details()
}

type CrossDomainRule_EntityDetails struct {
	EntityDetails *EntityDistributionRuleDetails `protobuf:"bytes,1,opt,name=entity_details,json=entityDetails,proto3,oneof"`
}

func (*CrossDomainRule_EntityDetails) isCrossDomainRule_Details() {}

var File_anduril_communicationsmanager_v1_common_pub_proto protoreflect.FileDescriptor

var file_anduril_communicationsmanager_v1_common_pub_proto_rawDesc = []byte{
	0x0a, 0x31, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x20, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x21, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x62,
	0x6c, 0x6f, 0x62, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70,
	0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x31, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x31, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x01, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x11, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x09, 0x52,
	0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x22, 0x94, 0x04, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x61, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x5e, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x5f, 0x0a, 0x11, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x20, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x78, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4d, 0x73, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xef, 0x02, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x87, 0x01, 0x0a, 0x1f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x1c, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x1d, 0x62, 0x6c,
	0x6f, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x48, 0x00, 0x52, 0x1a, 0x62, 0x6c, 0x6f, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xaf, 0x06, 0x0a, 0x10, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x44, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x53, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x62, 0x0a, 0x0c,
	0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x12, 0x9a, 0x01, 0x0a, 0x26, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x23, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x42, 0x09, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xd2, 0x02, 0x0a, 0x23,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x12, 0x87, 0x01, 0x0a, 0x1f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x1c, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8a, 0x01,
	0x0a, 0x20, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1d, 0x6f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xb4, 0x01, 0x0a, 0x1d, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x75, 0x6c,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x1c, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52,
	0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x07,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0x6c, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x03,
	0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c,
	0x42, 0x0d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xb1, 0x02, 0x0a, 0x1d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x48, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x10, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a,
	0x11, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x1b, 0x42, 0x6c, 0x6f, 0x62, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x62, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x36, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe1, 0x01,
	0x0a, 0x0f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x68, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x75, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x59, 0x0a, 0x0f, 0x63,
	0x64, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x64, 0x73, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x64, 0x73, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2a, 0x86, 0x01, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x42, 0xb4, 0x02, 0x0a, 0x24, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x42, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x41, 0x43, 0x58, 0xaa, 0x02, 0x20, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x20, 0x41, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x2c,
	0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x22, 0x41,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_anduril_communicationsmanager_v1_common_pub_proto_rawDescOnce sync.Once
	file_anduril_communicationsmanager_v1_common_pub_proto_rawDescData = file_anduril_communicationsmanager_v1_common_pub_proto_rawDesc
)

func file_anduril_communicationsmanager_v1_common_pub_proto_rawDescGZIP() []byte {
	file_anduril_communicationsmanager_v1_common_pub_proto_rawDescOnce.Do(func() {
		file_anduril_communicationsmanager_v1_common_pub_proto_rawDescData = protoimpl.X.CompressGZIP(file_anduril_communicationsmanager_v1_common_pub_proto_rawDescData)
	})
	return file_anduril_communicationsmanager_v1_common_pub_proto_rawDescData
}

var file_anduril_communicationsmanager_v1_common_pub_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_anduril_communicationsmanager_v1_common_pub_proto_goTypes = []any{
	(EventType)(0),                              // 0: anduril.communicationsmanager.v1.EventType
	(*DistributionRuleEvent)(nil),               // 1: anduril.communicationsmanager.v1.DistributionRuleEvent
	(*RuleEvent)(nil),                           // 2: anduril.communicationsmanager.v1.RuleEvent
	(*Rule)(nil),                                // 3: anduril.communicationsmanager.v1.Rule
	(*IntegrationRule)(nil),                     // 4: anduril.communicationsmanager.v1.IntegrationRule
	(*DistributionRule)(nil),                    // 5: anduril.communicationsmanager.v1.DistributionRule
	(*SourceDestinationDirectionalControl)(nil), // 6: anduril.communicationsmanager.v1.SourceDestinationDirectionalControl
	(*OutboundRuleSourceDestination)(nil),       // 7: anduril.communicationsmanager.v1.OutboundRuleSourceDestination
	(*InboundRuleSourceDestination)(nil),        // 8: anduril.communicationsmanager.v1.InboundRuleSourceDestination
	(*Source)(nil),                              // 9: anduril.communicationsmanager.v1.Source
	(*Destination)(nil),                         // 10: anduril.communicationsmanager.v1.Destination
	(*EntityDistributionRuleDetails)(nil),       // 11: anduril.communicationsmanager.v1.EntityDistributionRuleDetails
	(*BlobDistributionRuleDetails)(nil),         // 12: anduril.communicationsmanager.v1.BlobDistributionRuleDetails
	(*CommunicationsManagerError)(nil),          // 13: anduril.communicationsmanager.v1.CommunicationsManagerError
	(*CrossDomainRule)(nil),                     // 14: anduril.communicationsmanager.v1.CrossDomainRule
	(*timestamppb.Timestamp)(nil),               // 15: google.protobuf.Timestamp
	(*EntityIntegrationRuleDetails)(nil),        // 16: anduril.communicationsmanager.v1.EntityIntegrationRuleDetails
	(*v1.Statement)(nil),                        // 17: anduril.entitymanager.v1.Statement
	(*v1.DynamicStatement)(nil),                 // 18: anduril.entitymanager.v1.DynamicStatement
	(*v11.Statement)(nil),                       // 19: anduril.blobs.v1.Statement
	(*CdsDestination)(nil),                      // 20: anduril.communicationsmanager.v1.CdsDestination
}
var file_anduril_communicationsmanager_v1_common_pub_proto_depIdxs = []int32{
	0,  // 0: anduril.communicationsmanager.v1.DistributionRuleEvent.event_type:type_name -> anduril.communicationsmanager.v1.EventType
	15, // 1: anduril.communicationsmanager.v1.DistributionRuleEvent.time:type_name -> google.protobuf.Timestamp
	5,  // 2: anduril.communicationsmanager.v1.DistributionRuleEvent.distribution_rule:type_name -> anduril.communicationsmanager.v1.DistributionRule
	0,  // 3: anduril.communicationsmanager.v1.RuleEvent.event_type:type_name -> anduril.communicationsmanager.v1.EventType
	15, // 4: anduril.communicationsmanager.v1.RuleEvent.time:type_name -> google.protobuf.Timestamp
	3,  // 5: anduril.communicationsmanager.v1.RuleEvent.rule:type_name -> anduril.communicationsmanager.v1.Rule
	5,  // 6: anduril.communicationsmanager.v1.Rule.distribution_rule:type_name -> anduril.communicationsmanager.v1.DistributionRule
	4,  // 7: anduril.communicationsmanager.v1.Rule.integration_rule:type_name -> anduril.communicationsmanager.v1.IntegrationRule
	14, // 8: anduril.communicationsmanager.v1.Rule.cross_domain_rule:type_name -> anduril.communicationsmanager.v1.CrossDomainRule
	16, // 9: anduril.communicationsmanager.v1.IntegrationRule.entity_integration_rule_details:type_name -> anduril.communicationsmanager.v1.EntityIntegrationRuleDetails
	12, // 10: anduril.communicationsmanager.v1.IntegrationRule.blob_integration_rule_details:type_name -> anduril.communicationsmanager.v1.BlobDistributionRuleDetails
	9,  // 11: anduril.communicationsmanager.v1.DistributionRule.source:type_name -> anduril.communicationsmanager.v1.Source
	9,  // 12: anduril.communicationsmanager.v1.DistributionRule.sources:type_name -> anduril.communicationsmanager.v1.Source
	10, // 13: anduril.communicationsmanager.v1.DistributionRule.destination:type_name -> anduril.communicationsmanager.v1.Destination
	11, // 14: anduril.communicationsmanager.v1.DistributionRule.entity_details:type_name -> anduril.communicationsmanager.v1.EntityDistributionRuleDetails
	12, // 15: anduril.communicationsmanager.v1.DistributionRule.blob_details:type_name -> anduril.communicationsmanager.v1.BlobDistributionRuleDetails
	6,  // 16: anduril.communicationsmanager.v1.DistributionRule.source_destination_directional_control:type_name -> anduril.communicationsmanager.v1.SourceDestinationDirectionalControl
	8,  // 17: anduril.communicationsmanager.v1.SourceDestinationDirectionalControl.inbound_rule_source_destination:type_name -> anduril.communicationsmanager.v1.InboundRuleSourceDestination
	7,  // 18: anduril.communicationsmanager.v1.SourceDestinationDirectionalControl.outbound_rule_source_destination:type_name -> anduril.communicationsmanager.v1.OutboundRuleSourceDestination
	9,  // 19: anduril.communicationsmanager.v1.OutboundRuleSourceDestination.source:type_name -> anduril.communicationsmanager.v1.Source
	10, // 20: anduril.communicationsmanager.v1.OutboundRuleSourceDestination.destinations:type_name -> anduril.communicationsmanager.v1.Destination
	9,  // 21: anduril.communicationsmanager.v1.InboundRuleSourceDestination.sources:type_name -> anduril.communicationsmanager.v1.Source
	10, // 22: anduril.communicationsmanager.v1.InboundRuleSourceDestination.destination:type_name -> anduril.communicationsmanager.v1.Destination
	17, // 23: anduril.communicationsmanager.v1.EntityDistributionRuleDetails.entity_filter:type_name -> anduril.entitymanager.v1.Statement
	17, // 24: anduril.communicationsmanager.v1.EntityDistributionRuleDetails.static_statement:type_name -> anduril.entitymanager.v1.Statement
	18, // 25: anduril.communicationsmanager.v1.EntityDistributionRuleDetails.dynamic_statement:type_name -> anduril.entitymanager.v1.DynamicStatement
	19, // 26: anduril.communicationsmanager.v1.BlobDistributionRuleDetails.blob_filter:type_name -> anduril.blobs.v1.Statement
	19, // 27: anduril.communicationsmanager.v1.BlobDistributionRuleDetails.blob_filters:type_name -> anduril.blobs.v1.Statement
	11, // 28: anduril.communicationsmanager.v1.CrossDomainRule.entity_details:type_name -> anduril.communicationsmanager.v1.EntityDistributionRuleDetails
	20, // 29: anduril.communicationsmanager.v1.CrossDomainRule.cds_destination:type_name -> anduril.communicationsmanager.v1.CdsDestination
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_anduril_communicationsmanager_v1_common_pub_proto_init() }
func file_anduril_communicationsmanager_v1_common_pub_proto_init() {
	if File_anduril_communicationsmanager_v1_common_pub_proto != nil {
		return
	}
	file_anduril_communicationsmanager_v1_cross_domain_pub_proto_init()
	file_anduril_communicationsmanager_v1_entity_pub_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*DistributionRuleEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RuleEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*IntegrationRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DistributionRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SourceDestinationDirectionalControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*OutboundRuleSourceDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*InboundRuleSourceDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Destination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*EntityDistributionRuleDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*BlobDistributionRuleDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CommunicationsManagerError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CrossDomainRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[2].OneofWrappers = []any{
		(*Rule_DistributionRule)(nil),
		(*Rule_IntegrationRule)(nil),
		(*Rule_CrossDomainRule)(nil),
	}
	file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[3].OneofWrappers = []any{
		(*IntegrationRule_EntityIntegrationRuleDetails)(nil),
		(*IntegrationRule_BlobIntegrationRuleDetails)(nil),
	}
	file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[4].OneofWrappers = []any{
		(*DistributionRule_EntityDetails)(nil),
		(*DistributionRule_BlobDetails)(nil),
	}
	file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[5].OneofWrappers = []any{
		(*SourceDestinationDirectionalControl_InboundRuleSourceDestination)(nil),
		(*SourceDestinationDirectionalControl_OutboundRuleSourceDestination)(nil),
	}
	file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[8].OneofWrappers = []any{
		(*Source_AssetId)(nil),
		(*Source_All)(nil),
		(*Source_HostId)(nil),
	}
	file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[9].OneofWrappers = []any{
		(*Destination_AssetId)(nil),
		(*Destination_HostId)(nil),
		(*Destination_All)(nil),
	}
	file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[10].OneofWrappers = []any{
		(*EntityDistributionRuleDetails_StaticStatement)(nil),
		(*EntityDistributionRuleDetails_DynamicStatement)(nil),
	}
	file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes[13].OneofWrappers = []any{
		(*CrossDomainRule_EntityDetails)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_anduril_communicationsmanager_v1_common_pub_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_anduril_communicationsmanager_v1_common_pub_proto_goTypes,
		DependencyIndexes: file_anduril_communicationsmanager_v1_common_pub_proto_depIdxs,
		EnumInfos:         file_anduril_communicationsmanager_v1_common_pub_proto_enumTypes,
		MessageInfos:      file_anduril_communicationsmanager_v1_common_pub_proto_msgTypes,
	}.Build()
	File_anduril_communicationsmanager_v1_common_pub_proto = out.File
	file_anduril_communicationsmanager_v1_common_pub_proto_rawDesc = nil
	file_anduril_communicationsmanager_v1_common_pub_proto_goTypes = nil
	file_anduril_communicationsmanager_v1_common_pub_proto_depIdxs = nil
}
