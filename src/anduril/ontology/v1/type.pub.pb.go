// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: anduril/ontology/v1/type.pub.proto

package ontologyv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Class int32

const (
	Class_CLASS_UNKNOWN             Class = 0
	Class_CLASS_PERSON              Class = 1
	Class_CLASS_CAR                 Class = 2
	Class_CLASS_ANIMAL              Class = 3
	Class_CLASS_AIR_VEHICLE         Class = 4
	Class_CLASS_BICYCLE             Class = 5
	Class_CLASS_WATER_VEHICLE       Class = 6
	Class_CLASS_UNKNOWN_VEHICLE     Class = 7
	Class_CLASS_MISSILE             Class = 8
	Class_CLASS_UNKNOWN_AIR_VEHICLE Class = 9
	Class_CLASS_BIRD                Class = 10
	Class_CLASS_BACKGROUND          Class = 11
)

// Enum value maps for Class.
var (
	Class_name = map[int32]string{
		0:  "CLASS_UNKNOWN",
		1:  "CLASS_PERSON",
		2:  "CLASS_CAR",
		3:  "CLASS_ANIMAL",
		4:  "CLASS_AIR_VEHICLE",
		5:  "CLASS_BICYCLE",
		6:  "CLASS_WATER_VEHICLE",
		7:  "CLASS_UNKNOWN_VEHICLE",
		8:  "CLASS_MISSILE",
		9:  "CLASS_UNKNOWN_AIR_VEHICLE",
		10: "CLASS_BIRD",
		11: "CLASS_BACKGROUND",
	}
	Class_value = map[string]int32{
		"CLASS_UNKNOWN":             0,
		"CLASS_PERSON":              1,
		"CLASS_CAR":                 2,
		"CLASS_ANIMAL":              3,
		"CLASS_AIR_VEHICLE":         4,
		"CLASS_BICYCLE":             5,
		"CLASS_WATER_VEHICLE":       6,
		"CLASS_UNKNOWN_VEHICLE":     7,
		"CLASS_MISSILE":             8,
		"CLASS_UNKNOWN_AIR_VEHICLE": 9,
		"CLASS_BIRD":                10,
		"CLASS_BACKGROUND":          11,
	}
)

func (x Class) Enum() *Class {
	p := new(Class)
	*p = x
	return p
}

func (x Class) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Class) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_ontology_v1_type_pub_proto_enumTypes[0].Descriptor()
}

func (Class) Type() protoreflect.EnumType {
	return &file_anduril_ontology_v1_type_pub_proto_enumTypes[0]
}

func (x Class) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Class.Descriptor instead.
func (Class) EnumDescriptor() ([]byte, []int) {
	return file_anduril_ontology_v1_type_pub_proto_rawDescGZIP(), []int{0}
}

// Refers to the relationship of the tracker to the operational object being represented.
// Maps 1 to 1 with mil-std affiliation. Pending is a default, yet to be classified object.
// Ranking from most friendly to most hostile:
// FRIENDLY
// ASSUMED FRIENDLY
// NEUTRAL
// PENDING
// UNKNOWN
// SUSPICIOUS
// HOSTILE
type Disposition int32

const (
	Disposition_DISPOSITION_UNKNOWN          Disposition = 0
	Disposition_DISPOSITION_FRIENDLY         Disposition = 1
	Disposition_DISPOSITION_HOSTILE          Disposition = 2
	Disposition_DISPOSITION_SUSPICIOUS       Disposition = 3
	Disposition_DISPOSITION_ASSUMED_FRIENDLY Disposition = 4
	Disposition_DISPOSITION_NEUTRAL          Disposition = 5
	Disposition_DISPOSITION_PENDING          Disposition = 6
)

// Enum value maps for Disposition.
var (
	Disposition_name = map[int32]string{
		0: "DISPOSITION_UNKNOWN",
		1: "DISPOSITION_FRIENDLY",
		2: "DISPOSITION_HOSTILE",
		3: "DISPOSITION_SUSPICIOUS",
		4: "DISPOSITION_ASSUMED_FRIENDLY",
		5: "DISPOSITION_NEUTRAL",
		6: "DISPOSITION_PENDING",
	}
	Disposition_value = map[string]int32{
		"DISPOSITION_UNKNOWN":          0,
		"DISPOSITION_FRIENDLY":         1,
		"DISPOSITION_HOSTILE":          2,
		"DISPOSITION_SUSPICIOUS":       3,
		"DISPOSITION_ASSUMED_FRIENDLY": 4,
		"DISPOSITION_NEUTRAL":          5,
		"DISPOSITION_PENDING":          6,
	}
)

func (x Disposition) Enum() *Disposition {
	p := new(Disposition)
	*p = x
	return p
}

func (x Disposition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Disposition) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_ontology_v1_type_pub_proto_enumTypes[1].Descriptor()
}

func (Disposition) Type() protoreflect.EnumType {
	return &file_anduril_ontology_v1_type_pub_proto_enumTypes[1]
}

func (x Disposition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Disposition.Descriptor instead.
func (Disposition) EnumDescriptor() ([]byte, []int) {
	return file_anduril_ontology_v1_type_pub_proto_rawDescGZIP(), []int{1}
}

// Describes the operating environment of an object. For more information refer to MIl-STD 2525d or MIL-STD 6016f.
// Surface is used to describe objects on-top the water such as boats, while Sub-Surface is used to describe under the
// water.
type Environment int32

const (
	Environment_ENVIRONMENT_UNKNOWN     Environment = 0
	Environment_ENVIRONMENT_AIR         Environment = 1
	Environment_ENVIRONMENT_SURFACE     Environment = 2
	Environment_ENVIRONMENT_SUB_SURFACE Environment = 3
	Environment_ENVIRONMENT_LAND        Environment = 4
	Environment_ENVIRONMENT_SPACE       Environment = 5
)

// Enum value maps for Environment.
var (
	Environment_name = map[int32]string{
		0: "ENVIRONMENT_UNKNOWN",
		1: "ENVIRONMENT_AIR",
		2: "ENVIRONMENT_SURFACE",
		3: "ENVIRONMENT_SUB_SURFACE",
		4: "ENVIRONMENT_LAND",
		5: "ENVIRONMENT_SPACE",
	}
	Environment_value = map[string]int32{
		"ENVIRONMENT_UNKNOWN":     0,
		"ENVIRONMENT_AIR":         1,
		"ENVIRONMENT_SURFACE":     2,
		"ENVIRONMENT_SUB_SURFACE": 3,
		"ENVIRONMENT_LAND":        4,
		"ENVIRONMENT_SPACE":       5,
	}
)

func (x Environment) Enum() *Environment {
	p := new(Environment)
	*p = x
	return p
}

func (x Environment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Environment) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_ontology_v1_type_pub_proto_enumTypes[2].Descriptor()
}

func (Environment) Type() protoreflect.EnumType {
	return &file_anduril_ontology_v1_type_pub_proto_enumTypes[2]
}

func (x Environment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Environment.Descriptor instead.
func (Environment) EnumDescriptor() ([]byte, []int) {
	return file_anduril_ontology_v1_type_pub_proto_rawDescGZIP(), []int{2}
}

// Describes Nationality or Alliance information.
type Nationality int32

const (
	Nationality_NATIONALITY_INVALID                                   Nationality = 0
	Nationality_NATIONALITY_ALBANIA                                   Nationality = 1
	Nationality_NATIONALITY_ALGERIA                                   Nationality = 62
	Nationality_NATIONALITY_ARGENTINA                                 Nationality = 79
	Nationality_NATIONALITY_ARMENIA                                   Nationality = 2
	Nationality_NATIONALITY_AUSTRALIA                                 Nationality = 3
	Nationality_NATIONALITY_AUSTRIA                                   Nationality = 4
	Nationality_NATIONALITY_AZERBAIJAN                                Nationality = 5
	Nationality_NATIONALITY_BELARUS                                   Nationality = 6
	Nationality_NATIONALITY_BELGIUM                                   Nationality = 7
	Nationality_NATIONALITY_BOLIVIA                                   Nationality = 106
	Nationality_NATIONALITY_BOSNIA_AND_HERZEGOVINA                    Nationality = 8
	Nationality_NATIONALITY_BRAZIL                                    Nationality = 80
	Nationality_NATIONALITY_BULGARIA                                  Nationality = 9
	Nationality_NATIONALITY_CAMBODIA                                  Nationality = 68
	Nationality_NATIONALITY_CANADA                                    Nationality = 10
	Nationality_NATIONALITY_CHILE                                     Nationality = 81
	Nationality_NATIONALITY_CHINA                                     Nationality = 72
	Nationality_NATIONALITY_COLOMBIA                                  Nationality = 82
	Nationality_NATIONALITY_CROATIA                                   Nationality = 11
	Nationality_NATIONALITY_CUBA                                      Nationality = 87
	Nationality_NATIONALITY_CYPRUS                                    Nationality = 53
	Nationality_NATIONALITY_CZECH_REPUBLIC                            Nationality = 12
	Nationality_NATIONALITY_DEMOCRATIC_PEOPLES_REPUBLIC_OF_KOREA      Nationality = 74
	Nationality_NATIONALITY_DENMARK                                   Nationality = 13
	Nationality_NATIONALITY_DOMINICAN_REPUBLIC                        Nationality = 88
	Nationality_NATIONALITY_ECUADOR                                   Nationality = 107
	Nationality_NATIONALITY_EGYPT                                     Nationality = 54
	Nationality_NATIONALITY_ESTONIA                                   Nationality = 14
	Nationality_NATIONALITY_ETHIOPIA                                  Nationality = 63
	Nationality_NATIONALITY_FINLAND                                   Nationality = 15
	Nationality_NATIONALITY_FRANCE                                    Nationality = 16
	Nationality_NATIONALITY_GEORGIA                                   Nationality = 17
	Nationality_NATIONALITY_GERMANY                                   Nationality = 18
	Nationality_NATIONALITY_GREECE                                    Nationality = 19
	Nationality_NATIONALITY_GUATEMALA                                 Nationality = 108
	Nationality_NATIONALITY_GUINEA                                    Nationality = 92
	Nationality_NATIONALITY_HUNGARY                                   Nationality = 20
	Nationality_NATIONALITY_ICELAND                                   Nationality = 21
	Nationality_NATIONALITY_INDIA                                     Nationality = 66
	Nationality_NATIONALITY_INDONESIA                                 Nationality = 103
	Nationality_NATIONALITY_INTERNATIONAL_RED_CROSS                   Nationality = 113
	Nationality_NATIONALITY_IRAQ                                      Nationality = 56
	Nationality_NATIONALITY_IRELAND                                   Nationality = 22
	Nationality_NATIONALITY_ISLAMIC_REPUBLIC_OF_IRAN                  Nationality = 55
	Nationality_NATIONALITY_ISRAEL                                    Nationality = 57
	Nationality_NATIONALITY_ITALY                                     Nationality = 23
	Nationality_NATIONALITY_JAMAICA                                   Nationality = 112
	Nationality_NATIONALITY_JAPAN                                     Nationality = 76
	Nationality_NATIONALITY_JORDAN                                    Nationality = 58
	Nationality_NATIONALITY_KAZAKHSTAN                                Nationality = 24
	Nationality_NATIONALITY_KUWAIT                                    Nationality = 90
	Nationality_NATIONALITY_KYRGHYZ_REPUBLIC                          Nationality = 25
	Nationality_NATIONALITY_LAO_PEOPLES_DEMOCRATIC_REPUBLIC           Nationality = 69
	Nationality_NATIONALITY_LATVIA                                    Nationality = 26
	Nationality_NATIONALITY_LEBANON                                   Nationality = 59
	Nationality_NATIONALITY_LIBERIA                                   Nationality = 64
	Nationality_NATIONALITY_LITHUANIA                                 Nationality = 27
	Nationality_NATIONALITY_LUXEMBOURG                                Nationality = 28
	Nationality_NATIONALITY_MADAGASCAR                                Nationality = 93
	Nationality_NATIONALITY_MALAYSIA                                  Nationality = 104
	Nationality_NATIONALITY_MALTA                                     Nationality = 29
	Nationality_NATIONALITY_MEXICO                                    Nationality = 83
	Nationality_NATIONALITY_MOLDOVA                                   Nationality = 30
	Nationality_NATIONALITY_MONTENEGRO                                Nationality = 31
	Nationality_NATIONALITY_MOROCCO                                   Nationality = 94
	Nationality_NATIONALITY_MYANMAR                                   Nationality = 102
	Nationality_NATIONALITY_NATO                                      Nationality = 32
	Nationality_NATIONALITY_NETHERLANDS                               Nationality = 33
	Nationality_NATIONALITY_NEW_ZEALAND                               Nationality = 78
	Nationality_NATIONALITY_NICARAGUA                                 Nationality = 109
	Nationality_NATIONALITY_NIGERIA                                   Nationality = 95
	Nationality_NATIONALITY_NORWAY                                    Nationality = 34
	Nationality_NATIONALITY_PAKISTAN                                  Nationality = 67
	Nationality_NATIONALITY_PANAMA                                    Nationality = 84
	Nationality_NATIONALITY_PARAGUAY                                  Nationality = 110
	Nationality_NATIONALITY_PERU                                      Nationality = 85
	Nationality_NATIONALITY_PHILIPPINES                               Nationality = 77
	Nationality_NATIONALITY_POLAND                                    Nationality = 35
	Nationality_NATIONALITY_PORTUGAL                                  Nationality = 36
	Nationality_NATIONALITY_REPUBLIC_OF_KOREA                         Nationality = 75
	Nationality_NATIONALITY_ROMANIA                                   Nationality = 37
	Nationality_NATIONALITY_RUSSIA                                    Nationality = 38
	Nationality_NATIONALITY_SAUDI_ARABIA                              Nationality = 60
	Nationality_NATIONALITY_SENEGAL                                   Nationality = 96
	Nationality_NATIONALITY_SERBIA                                    Nationality = 39
	Nationality_NATIONALITY_SINGAPORE                                 Nationality = 105
	Nationality_NATIONALITY_SLOVAKIA                                  Nationality = 40
	Nationality_NATIONALITY_SLOVENIA                                  Nationality = 41
	Nationality_NATIONALITY_SOUTH_AFRICA                              Nationality = 65
	Nationality_NATIONALITY_SPAIN                                     Nationality = 42
	Nationality_NATIONALITY_SUDAN                                     Nationality = 98
	Nationality_NATIONALITY_SWEDEN                                    Nationality = 43
	Nationality_NATIONALITY_SWITZERLAND                               Nationality = 44
	Nationality_NATIONALITY_SYRIAN_ARAB_REPUBLIC                      Nationality = 61
	Nationality_NATIONALITY_TAIWAN_PROVINCE_OF_CHINA                  Nationality = 73
	Nationality_NATIONALITY_TAJIKISTAN                                Nationality = 45
	Nationality_NATIONALITY_THAILAND                                  Nationality = 70
	Nationality_NATIONALITY_THE_FORMER_YUGOSLAV_REPUBLIC_OF_MACEDONIA Nationality = 46
	Nationality_NATIONALITY_TUNISIA                                   Nationality = 100
	Nationality_NATIONALITY_TURKEY                                    Nationality = 47
	Nationality_NATIONALITY_TURKMENISTAN                              Nationality = 48
	Nationality_NATIONALITY_UGANDA                                    Nationality = 101
	Nationality_NATIONALITY_UKRAINE                                   Nationality = 49
	Nationality_NATIONALITY_UNITED_KINGDOM                            Nationality = 50
	Nationality_NATIONALITY_UNITED_NATIONS                            Nationality = 89
	Nationality_NATIONALITY_UNITED_REPUBLIC_OF_TANZANIA               Nationality = 99
	Nationality_NATIONALITY_UNITED_STATES_OF_AMERICA                  Nationality = 51
	Nationality_NATIONALITY_URUGUAY                                   Nationality = 111
	Nationality_NATIONALITY_UZBEKISTAN                                Nationality = 52
	Nationality_NATIONALITY_VENEZUELA                                 Nationality = 86
	Nationality_NATIONALITY_VIETNAM                                   Nationality = 71
	Nationality_NATIONALITY_YEMEN                                     Nationality = 91
	Nationality_NATIONALITY_ZIMBABWE                                  Nationality = 97
)

// Enum value maps for Nationality.
var (
	Nationality_name = map[int32]string{
		0:   "NATIONALITY_INVALID",
		1:   "NATIONALITY_ALBANIA",
		62:  "NATIONALITY_ALGERIA",
		79:  "NATIONALITY_ARGENTINA",
		2:   "NATIONALITY_ARMENIA",
		3:   "NATIONALITY_AUSTRALIA",
		4:   "NATIONALITY_AUSTRIA",
		5:   "NATIONALITY_AZERBAIJAN",
		6:   "NATIONALITY_BELARUS",
		7:   "NATIONALITY_BELGIUM",
		106: "NATIONALITY_BOLIVIA",
		8:   "NATIONALITY_BOSNIA_AND_HERZEGOVINA",
		80:  "NATIONALITY_BRAZIL",
		9:   "NATIONALITY_BULGARIA",
		68:  "NATIONALITY_CAMBODIA",
		10:  "NATIONALITY_CANADA",
		81:  "NATIONALITY_CHILE",
		72:  "NATIONALITY_CHINA",
		82:  "NATIONALITY_COLOMBIA",
		11:  "NATIONALITY_CROATIA",
		87:  "NATIONALITY_CUBA",
		53:  "NATIONALITY_CYPRUS",
		12:  "NATIONALITY_CZECH_REPUBLIC",
		74:  "NATIONALITY_DEMOCRATIC_PEOPLES_REPUBLIC_OF_KOREA",
		13:  "NATIONALITY_DENMARK",
		88:  "NATIONALITY_DOMINICAN_REPUBLIC",
		107: "NATIONALITY_ECUADOR",
		54:  "NATIONALITY_EGYPT",
		14:  "NATIONALITY_ESTONIA",
		63:  "NATIONALITY_ETHIOPIA",
		15:  "NATIONALITY_FINLAND",
		16:  "NATIONALITY_FRANCE",
		17:  "NATIONALITY_GEORGIA",
		18:  "NATIONALITY_GERMANY",
		19:  "NATIONALITY_GREECE",
		108: "NATIONALITY_GUATEMALA",
		92:  "NATIONALITY_GUINEA",
		20:  "NATIONALITY_HUNGARY",
		21:  "NATIONALITY_ICELAND",
		66:  "NATIONALITY_INDIA",
		103: "NATIONALITY_INDONESIA",
		113: "NATIONALITY_INTERNATIONAL_RED_CROSS",
		56:  "NATIONALITY_IRAQ",
		22:  "NATIONALITY_IRELAND",
		55:  "NATIONALITY_ISLAMIC_REPUBLIC_OF_IRAN",
		57:  "NATIONALITY_ISRAEL",
		23:  "NATIONALITY_ITALY",
		112: "NATIONALITY_JAMAICA",
		76:  "NATIONALITY_JAPAN",
		58:  "NATIONALITY_JORDAN",
		24:  "NATIONALITY_KAZAKHSTAN",
		90:  "NATIONALITY_KUWAIT",
		25:  "NATIONALITY_KYRGHYZ_REPUBLIC",
		69:  "NATIONALITY_LAO_PEOPLES_DEMOCRATIC_REPUBLIC",
		26:  "NATIONALITY_LATVIA",
		59:  "NATIONALITY_LEBANON",
		64:  "NATIONALITY_LIBERIA",
		27:  "NATIONALITY_LITHUANIA",
		28:  "NATIONALITY_LUXEMBOURG",
		93:  "NATIONALITY_MADAGASCAR",
		104: "NATIONALITY_MALAYSIA",
		29:  "NATIONALITY_MALTA",
		83:  "NATIONALITY_MEXICO",
		30:  "NATIONALITY_MOLDOVA",
		31:  "NATIONALITY_MONTENEGRO",
		94:  "NATIONALITY_MOROCCO",
		102: "NATIONALITY_MYANMAR",
		32:  "NATIONALITY_NATO",
		33:  "NATIONALITY_NETHERLANDS",
		78:  "NATIONALITY_NEW_ZEALAND",
		109: "NATIONALITY_NICARAGUA",
		95:  "NATIONALITY_NIGERIA",
		34:  "NATIONALITY_NORWAY",
		67:  "NATIONALITY_PAKISTAN",
		84:  "NATIONALITY_PANAMA",
		110: "NATIONALITY_PARAGUAY",
		85:  "NATIONALITY_PERU",
		77:  "NATIONALITY_PHILIPPINES",
		35:  "NATIONALITY_POLAND",
		36:  "NATIONALITY_PORTUGAL",
		75:  "NATIONALITY_REPUBLIC_OF_KOREA",
		37:  "NATIONALITY_ROMANIA",
		38:  "NATIONALITY_RUSSIA",
		60:  "NATIONALITY_SAUDI_ARABIA",
		96:  "NATIONALITY_SENEGAL",
		39:  "NATIONALITY_SERBIA",
		105: "NATIONALITY_SINGAPORE",
		40:  "NATIONALITY_SLOVAKIA",
		41:  "NATIONALITY_SLOVENIA",
		65:  "NATIONALITY_SOUTH_AFRICA",
		42:  "NATIONALITY_SPAIN",
		98:  "NATIONALITY_SUDAN",
		43:  "NATIONALITY_SWEDEN",
		44:  "NATIONALITY_SWITZERLAND",
		61:  "NATIONALITY_SYRIAN_ARAB_REPUBLIC",
		73:  "NATIONALITY_TAIWAN_PROVINCE_OF_CHINA",
		45:  "NATIONALITY_TAJIKISTAN",
		70:  "NATIONALITY_THAILAND",
		46:  "NATIONALITY_THE_FORMER_YUGOSLAV_REPUBLIC_OF_MACEDONIA",
		100: "NATIONALITY_TUNISIA",
		47:  "NATIONALITY_TURKEY",
		48:  "NATIONALITY_TURKMENISTAN",
		101: "NATIONALITY_UGANDA",
		49:  "NATIONALITY_UKRAINE",
		50:  "NATIONALITY_UNITED_KINGDOM",
		89:  "NATIONALITY_UNITED_NATIONS",
		99:  "NATIONALITY_UNITED_REPUBLIC_OF_TANZANIA",
		51:  "NATIONALITY_UNITED_STATES_OF_AMERICA",
		111: "NATIONALITY_URUGUAY",
		52:  "NATIONALITY_UZBEKISTAN",
		86:  "NATIONALITY_VENEZUELA",
		71:  "NATIONALITY_VIETNAM",
		91:  "NATIONALITY_YEMEN",
		97:  "NATIONALITY_ZIMBABWE",
	}
	Nationality_value = map[string]int32{
		"NATIONALITY_INVALID":                                   0,
		"NATIONALITY_ALBANIA":                                   1,
		"NATIONALITY_ALGERIA":                                   62,
		"NATIONALITY_ARGENTINA":                                 79,
		"NATIONALITY_ARMENIA":                                   2,
		"NATIONALITY_AUSTRALIA":                                 3,
		"NATIONALITY_AUSTRIA":                                   4,
		"NATIONALITY_AZERBAIJAN":                                5,
		"NATIONALITY_BELARUS":                                   6,
		"NATIONALITY_BELGIUM":                                   7,
		"NATIONALITY_BOLIVIA":                                   106,
		"NATIONALITY_BOSNIA_AND_HERZEGOVINA":                    8,
		"NATIONALITY_BRAZIL":                                    80,
		"NATIONALITY_BULGARIA":                                  9,
		"NATIONALITY_CAMBODIA":                                  68,
		"NATIONALITY_CANADA":                                    10,
		"NATIONALITY_CHILE":                                     81,
		"NATIONALITY_CHINA":                                     72,
		"NATIONALITY_COLOMBIA":                                  82,
		"NATIONALITY_CROATIA":                                   11,
		"NATIONALITY_CUBA":                                      87,
		"NATIONALITY_CYPRUS":                                    53,
		"NATIONALITY_CZECH_REPUBLIC":                            12,
		"NATIONALITY_DEMOCRATIC_PEOPLES_REPUBLIC_OF_KOREA":      74,
		"NATIONALITY_DENMARK":                                   13,
		"NATIONALITY_DOMINICAN_REPUBLIC":                        88,
		"NATIONALITY_ECUADOR":                                   107,
		"NATIONALITY_EGYPT":                                     54,
		"NATIONALITY_ESTONIA":                                   14,
		"NATIONALITY_ETHIOPIA":                                  63,
		"NATIONALITY_FINLAND":                                   15,
		"NATIONALITY_FRANCE":                                    16,
		"NATIONALITY_GEORGIA":                                   17,
		"NATIONALITY_GERMANY":                                   18,
		"NATIONALITY_GREECE":                                    19,
		"NATIONALITY_GUATEMALA":                                 108,
		"NATIONALITY_GUINEA":                                    92,
		"NATIONALITY_HUNGARY":                                   20,
		"NATIONALITY_ICELAND":                                   21,
		"NATIONALITY_INDIA":                                     66,
		"NATIONALITY_INDONESIA":                                 103,
		"NATIONALITY_INTERNATIONAL_RED_CROSS":                   113,
		"NATIONALITY_IRAQ":                                      56,
		"NATIONALITY_IRELAND":                                   22,
		"NATIONALITY_ISLAMIC_REPUBLIC_OF_IRAN":                  55,
		"NATIONALITY_ISRAEL":                                    57,
		"NATIONALITY_ITALY":                                     23,
		"NATIONALITY_JAMAICA":                                   112,
		"NATIONALITY_JAPAN":                                     76,
		"NATIONALITY_JORDAN":                                    58,
		"NATIONALITY_KAZAKHSTAN":                                24,
		"NATIONALITY_KUWAIT":                                    90,
		"NATIONALITY_KYRGHYZ_REPUBLIC":                          25,
		"NATIONALITY_LAO_PEOPLES_DEMOCRATIC_REPUBLIC":           69,
		"NATIONALITY_LATVIA":                                    26,
		"NATIONALITY_LEBANON":                                   59,
		"NATIONALITY_LIBERIA":                                   64,
		"NATIONALITY_LITHUANIA":                                 27,
		"NATIONALITY_LUXEMBOURG":                                28,
		"NATIONALITY_MADAGASCAR":                                93,
		"NATIONALITY_MALAYSIA":                                  104,
		"NATIONALITY_MALTA":                                     29,
		"NATIONALITY_MEXICO":                                    83,
		"NATIONALITY_MOLDOVA":                                   30,
		"NATIONALITY_MONTENEGRO":                                31,
		"NATIONALITY_MOROCCO":                                   94,
		"NATIONALITY_MYANMAR":                                   102,
		"NATIONALITY_NATO":                                      32,
		"NATIONALITY_NETHERLANDS":                               33,
		"NATIONALITY_NEW_ZEALAND":                               78,
		"NATIONALITY_NICARAGUA":                                 109,
		"NATIONALITY_NIGERIA":                                   95,
		"NATIONALITY_NORWAY":                                    34,
		"NATIONALITY_PAKISTAN":                                  67,
		"NATIONALITY_PANAMA":                                    84,
		"NATIONALITY_PARAGUAY":                                  110,
		"NATIONALITY_PERU":                                      85,
		"NATIONALITY_PHILIPPINES":                               77,
		"NATIONALITY_POLAND":                                    35,
		"NATIONALITY_PORTUGAL":                                  36,
		"NATIONALITY_REPUBLIC_OF_KOREA":                         75,
		"NATIONALITY_ROMANIA":                                   37,
		"NATIONALITY_RUSSIA":                                    38,
		"NATIONALITY_SAUDI_ARABIA":                              60,
		"NATIONALITY_SENEGAL":                                   96,
		"NATIONALITY_SERBIA":                                    39,
		"NATIONALITY_SINGAPORE":                                 105,
		"NATIONALITY_SLOVAKIA":                                  40,
		"NATIONALITY_SLOVENIA":                                  41,
		"NATIONALITY_SOUTH_AFRICA":                              65,
		"NATIONALITY_SPAIN":                                     42,
		"NATIONALITY_SUDAN":                                     98,
		"NATIONALITY_SWEDEN":                                    43,
		"NATIONALITY_SWITZERLAND":                               44,
		"NATIONALITY_SYRIAN_ARAB_REPUBLIC":                      61,
		"NATIONALITY_TAIWAN_PROVINCE_OF_CHINA":                  73,
		"NATIONALITY_TAJIKISTAN":                                45,
		"NATIONALITY_THAILAND":                                  70,
		"NATIONALITY_THE_FORMER_YUGOSLAV_REPUBLIC_OF_MACEDONIA": 46,
		"NATIONALITY_TUNISIA":                                   100,
		"NATIONALITY_TURKEY":                                    47,
		"NATIONALITY_TURKMENISTAN":                              48,
		"NATIONALITY_UGANDA":                                    101,
		"NATIONALITY_UKRAINE":                                   49,
		"NATIONALITY_UNITED_KINGDOM":                            50,
		"NATIONALITY_UNITED_NATIONS":                            89,
		"NATIONALITY_UNITED_REPUBLIC_OF_TANZANIA":               99,
		"NATIONALITY_UNITED_STATES_OF_AMERICA":                  51,
		"NATIONALITY_URUGUAY":                                   111,
		"NATIONALITY_UZBEKISTAN":                                52,
		"NATIONALITY_VENEZUELA":                                 86,
		"NATIONALITY_VIETNAM":                                   71,
		"NATIONALITY_YEMEN":                                     91,
		"NATIONALITY_ZIMBABWE":                                  97,
	}
)

func (x Nationality) Enum() *Nationality {
	p := new(Nationality)
	*p = x
	return p
}

func (x Nationality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Nationality) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_ontology_v1_type_pub_proto_enumTypes[3].Descriptor()
}

func (Nationality) Type() protoreflect.EnumType {
	return &file_anduril_ontology_v1_type_pub_proto_enumTypes[3]
}

func (x Nationality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Nationality.Descriptor instead.
func (Nationality) EnumDescriptor() ([]byte, []int) {
	return file_anduril_ontology_v1_type_pub_proto_rawDescGZIP(), []int{3}
}

// An ObjectType describes the type of object within the ontology and its disposition.
type ObjectType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Class       Class       `protobuf:"varint,1,opt,name=class,proto3,enum=anduril.ontology.v1.Class" json:"class,omitempty"`
	Disposition Disposition `protobuf:"varint,2,opt,name=disposition,proto3,enum=anduril.ontology.v1.Disposition" json:"disposition,omitempty"`
	Environment Environment `protobuf:"varint,3,opt,name=environment,proto3,enum=anduril.ontology.v1.Environment" json:"environment,omitempty"`
}

func (x *ObjectType) Reset() {
	*x = ObjectType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_ontology_v1_type_pub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectType) ProtoMessage() {}

func (x *ObjectType) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_ontology_v1_type_pub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectType.ProtoReflect.Descriptor instead.
func (*ObjectType) Descriptor() ([]byte, []int) {
	return file_anduril_ontology_v1_type_pub_proto_rawDescGZIP(), []int{0}
}

func (x *ObjectType) GetClass() Class {
	if x != nil {
		return x.Class
	}
	return Class_CLASS_UNKNOWN
}

func (x *ObjectType) GetDisposition() Disposition {
	if x != nil {
		return x.Disposition
	}
	return Disposition_DISPOSITION_UNKNOWN
}

func (x *ObjectType) GetEnvironment() Environment {
	if x != nil {
		return x.Environment
	}
	return Environment_ENVIRONMENT_UNKNOWN
}

var File_anduril_ontology_v1_type_pub_proto protoreflect.FileDescriptor

var file_anduril_ontology_v1_type_pub_proto_rawDesc = []byte{
	0x0a, 0x22, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x22, 0xc6, 0x01, 0x0a, 0x0a, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x2a, 0x83, 0x02, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x43, 0x41, 0x52, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x41, 0x4e, 0x49, 0x4d, 0x41, 0x4c,
	0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x41, 0x49, 0x52, 0x5f,
	0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x42, 0x49, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x48, 0x49,
	0x43, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x07,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4c,
	0x45, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x49, 0x52, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45,
	0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x42, 0x49, 0x52, 0x44,
	0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x42, 0x41, 0x43, 0x4b,
	0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0b, 0x2a, 0xc9, 0x01, 0x0a, 0x0b, 0x44, 0x69, 0x73,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49,
	0x4c, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x49, 0x43, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x03,
	0x12, 0x20, 0x0a, 0x1c, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x53, 0x53, 0x55, 0x4d, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x4c, 0x59,
	0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x45, 0x55, 0x54, 0x52, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x06, 0x2a, 0x9e, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x49, 0x52,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x55, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45,
	0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53,
	0x55, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x56, 0x49,
	0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x41, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x10, 0x05, 0x2a, 0xc9, 0x18, 0x0a, 0x0b, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x4c,
	0x42, 0x41, 0x4e, 0x49, 0x41, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x4c, 0x47, 0x45, 0x52, 0x49, 0x41, 0x10, 0x3e,
	0x12, 0x19, 0x0a, 0x15, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x52, 0x47, 0x45, 0x4e, 0x54, 0x49, 0x4e, 0x41, 0x10, 0x4f, 0x12, 0x17, 0x0a, 0x13, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x52, 0x4d, 0x45, 0x4e,
	0x49, 0x41, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x55, 0x53, 0x54, 0x52, 0x41, 0x4c, 0x49, 0x41, 0x10, 0x03, 0x12,
	0x17, 0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x55, 0x53, 0x54, 0x52, 0x49, 0x41, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x5a, 0x45, 0x52, 0x42, 0x41, 0x49, 0x4a,
	0x41, 0x4e, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x42, 0x45, 0x4c, 0x41, 0x52, 0x55, 0x53, 0x10, 0x06, 0x12, 0x17, 0x0a,
	0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x45, 0x4c,
	0x47, 0x49, 0x55, 0x4d, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x4f, 0x4c, 0x49, 0x56, 0x49, 0x41, 0x10, 0x6a, 0x12,
	0x26, 0x0a, 0x22, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x42,
	0x4f, 0x53, 0x4e, 0x49, 0x41, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x48, 0x45, 0x52, 0x5a, 0x45, 0x47,
	0x4f, 0x56, 0x49, 0x4e, 0x41, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x52, 0x41, 0x5a, 0x49, 0x4c, 0x10, 0x50, 0x12,
	0x18, 0x0a, 0x14, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x42,
	0x55, 0x4c, 0x47, 0x41, 0x52, 0x49, 0x41, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x4d, 0x42, 0x4f, 0x44, 0x49,
	0x41, 0x10, 0x44, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x41, 0x4e, 0x41, 0x44, 0x41, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x45,
	0x10, 0x51, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x48, 0x49, 0x4e, 0x41, 0x10, 0x48, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x4d, 0x42, 0x49,
	0x41, 0x10, 0x52, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x52, 0x4f, 0x41, 0x54, 0x49, 0x41, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x55, 0x42, 0x41,
	0x10, 0x57, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x59, 0x50, 0x52, 0x55, 0x53, 0x10, 0x35, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x5a, 0x45, 0x43, 0x48, 0x5f,
	0x52, 0x45, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x0c, 0x12, 0x34, 0x0a, 0x30, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x4d, 0x4f, 0x43, 0x52,
	0x41, 0x54, 0x49, 0x43, 0x5f, 0x50, 0x45, 0x4f, 0x50, 0x4c, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4f, 0x46, 0x5f, 0x4b, 0x4f, 0x52, 0x45, 0x41, 0x10, 0x4a,
	0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x45, 0x4e, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x0d, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x4f, 0x4d, 0x49, 0x4e, 0x49, 0x43,
	0x41, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x58, 0x12, 0x17, 0x0a,
	0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x43, 0x55,
	0x41, 0x44, 0x4f, 0x52, 0x10, 0x6b, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x47, 0x59, 0x50, 0x54, 0x10, 0x36, 0x12, 0x17, 0x0a,
	0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x53, 0x54,
	0x4f, 0x4e, 0x49, 0x41, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x54, 0x48, 0x49, 0x4f, 0x50, 0x49, 0x41, 0x10, 0x3f,
	0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x4e, 0x4c, 0x41, 0x4e, 0x44, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10,
	0x10, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x47, 0x45, 0x4f, 0x52, 0x47, 0x49, 0x41, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x45, 0x52, 0x4d, 0x41, 0x4e,
	0x59, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x43, 0x45, 0x10, 0x13, 0x12, 0x19, 0x0a, 0x15, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x55, 0x41, 0x54, 0x45,
	0x4d, 0x41, 0x4c, 0x41, 0x10, 0x6c, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x55, 0x49, 0x4e, 0x45, 0x41, 0x10, 0x5c, 0x12, 0x17,
	0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x55,
	0x4e, 0x47, 0x41, 0x52, 0x59, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x43, 0x45, 0x4c, 0x41, 0x4e, 0x44, 0x10, 0x15,
	0x12, 0x15, 0x0a, 0x11, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x4e, 0x44, 0x49, 0x41, 0x10, 0x42, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x44, 0x4f, 0x4e, 0x45, 0x53, 0x49, 0x41,
	0x10, 0x67, 0x12, 0x27, 0x0a, 0x23, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f,
	0x52, 0x45, 0x44, 0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x10, 0x71, 0x12, 0x14, 0x0a, 0x10, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x52, 0x41, 0x51, 0x10,
	0x38, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x52, 0x45, 0x4c, 0x41, 0x4e, 0x44, 0x10, 0x16, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x53, 0x4c, 0x41, 0x4d, 0x49,
	0x43, 0x5f, 0x52, 0x45, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4f, 0x46, 0x5f, 0x49, 0x52,
	0x41, 0x4e, 0x10, 0x37, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x53, 0x52, 0x41, 0x45, 0x4c, 0x10, 0x39, 0x12, 0x15, 0x0a, 0x11,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x54, 0x41, 0x4c,
	0x59, 0x10, 0x17, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x4a, 0x41, 0x4d, 0x41, 0x49, 0x43, 0x41, 0x10, 0x70, 0x12, 0x15, 0x0a, 0x11,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4a, 0x41, 0x50, 0x41,
	0x4e, 0x10, 0x4c, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x4a, 0x4f, 0x52, 0x44, 0x41, 0x4e, 0x10, 0x3a, 0x12, 0x1a, 0x0a, 0x16, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4b, 0x41, 0x5a, 0x41, 0x4b,
	0x48, 0x53, 0x54, 0x41, 0x4e, 0x10, 0x18, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4b, 0x55, 0x57, 0x41, 0x49, 0x54, 0x10, 0x5a, 0x12,
	0x20, 0x0a, 0x1c, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4b,
	0x59, 0x52, 0x47, 0x48, 0x59, 0x5a, 0x5f, 0x52, 0x45, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10,
	0x19, 0x12, 0x2f, 0x0a, 0x2b, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x4c, 0x41, 0x4f, 0x5f, 0x50, 0x45, 0x4f, 0x50, 0x4c, 0x45, 0x53, 0x5f, 0x44, 0x45, 0x4d,
	0x4f, 0x43, 0x52, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x10, 0x45, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x4c, 0x41, 0x54, 0x56, 0x49, 0x41, 0x10, 0x1a, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x42, 0x41, 0x4e, 0x4f,
	0x4e, 0x10, 0x3b, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x4c, 0x49, 0x42, 0x45, 0x52, 0x49, 0x41, 0x10, 0x40, 0x12, 0x19, 0x0a, 0x15,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x54, 0x48,
	0x55, 0x41, 0x4e, 0x49, 0x41, 0x10, 0x1b, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x55, 0x58, 0x45, 0x4d, 0x42, 0x4f, 0x55, 0x52,
	0x47, 0x10, 0x1c, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x4d, 0x41, 0x44, 0x41, 0x47, 0x41, 0x53, 0x43, 0x41, 0x52, 0x10, 0x5d, 0x12,
	0x18, 0x0a, 0x14, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d,
	0x41, 0x4c, 0x41, 0x59, 0x53, 0x49, 0x41, 0x10, 0x68, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x4c, 0x54, 0x41, 0x10, 0x1d,
	0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x4d, 0x45, 0x58, 0x49, 0x43, 0x4f, 0x10, 0x53, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x4f, 0x4c, 0x44, 0x4f, 0x56, 0x41, 0x10,
	0x1e, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x45, 0x47, 0x52, 0x4f, 0x10, 0x1f, 0x12, 0x17, 0x0a,
	0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x4f, 0x52,
	0x4f, 0x43, 0x43, 0x4f, 0x10, 0x5e, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x59, 0x41, 0x4e, 0x4d, 0x41, 0x52, 0x10, 0x66, 0x12,
	0x14, 0x0a, 0x10, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4e,
	0x41, 0x54, 0x4f, 0x10, 0x20, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4c, 0x41, 0x4e, 0x44, 0x53,
	0x10, 0x21, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x5a, 0x45, 0x41, 0x4c, 0x41, 0x4e, 0x44, 0x10, 0x4e, 0x12,
	0x19, 0x0a, 0x15, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4e,
	0x49, 0x43, 0x41, 0x52, 0x41, 0x47, 0x55, 0x41, 0x10, 0x6d, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x49, 0x47, 0x45, 0x52, 0x49,
	0x41, 0x10, 0x5f, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x52, 0x57, 0x41, 0x59, 0x10, 0x22, 0x12, 0x18, 0x0a, 0x14, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x41, 0x4b, 0x49, 0x53,
	0x54, 0x41, 0x4e, 0x10, 0x43, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x41, 0x4e, 0x41, 0x4d, 0x41, 0x10, 0x54, 0x12, 0x18, 0x0a,
	0x14, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x41, 0x52,
	0x41, 0x47, 0x55, 0x41, 0x59, 0x10, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x45, 0x52, 0x55, 0x10, 0x55, 0x12, 0x1b, 0x0a,
	0x17, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x48, 0x49,
	0x4c, 0x49, 0x50, 0x50, 0x49, 0x4e, 0x45, 0x53, 0x10, 0x4d, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x4f, 0x4c, 0x41, 0x4e, 0x44,
	0x10, 0x23, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x55, 0x47, 0x41, 0x4c, 0x10, 0x24, 0x12, 0x21, 0x0a, 0x1d,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4f, 0x46, 0x5f, 0x4b, 0x4f, 0x52, 0x45, 0x41, 0x10, 0x4b, 0x12,
	0x17, 0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52,
	0x4f, 0x4d, 0x41, 0x4e, 0x49, 0x41, 0x10, 0x25, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x55, 0x53, 0x53, 0x49, 0x41, 0x10, 0x26,
	0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x41, 0x55, 0x44, 0x49, 0x5f, 0x41, 0x52, 0x41, 0x42, 0x49, 0x41, 0x10, 0x3c, 0x12, 0x17,
	0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x4e, 0x45, 0x47, 0x41, 0x4c, 0x10, 0x60, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x42, 0x49, 0x41, 0x10, 0x27, 0x12,
	0x19, 0x0a, 0x15, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x49, 0x4e, 0x47, 0x41, 0x50, 0x4f, 0x52, 0x45, 0x10, 0x69, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x4c, 0x4f, 0x56, 0x41, 0x4b,
	0x49, 0x41, 0x10, 0x28, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x4c, 0x4f, 0x56, 0x45, 0x4e, 0x49, 0x41, 0x10, 0x29, 0x12, 0x1c,
	0x0a, 0x18, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x4f,
	0x55, 0x54, 0x48, 0x5f, 0x41, 0x46, 0x52, 0x49, 0x43, 0x41, 0x10, 0x41, 0x12, 0x15, 0x0a, 0x11,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x50, 0x41, 0x49,
	0x4e, 0x10, 0x2a, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x55, 0x44, 0x41, 0x4e, 0x10, 0x62, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x57, 0x45, 0x44, 0x45, 0x4e,
	0x10, 0x2b, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x5a, 0x45, 0x52, 0x4c, 0x41, 0x4e, 0x44, 0x10, 0x2c, 0x12,
	0x24, 0x0a, 0x20, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x59, 0x52, 0x49, 0x41, 0x4e, 0x5f, 0x41, 0x52, 0x41, 0x42, 0x5f, 0x52, 0x45, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x43, 0x10, 0x3d, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x41, 0x49, 0x57, 0x41, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x4e, 0x43, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x48, 0x49, 0x4e, 0x41, 0x10, 0x49, 0x12,
	0x1a, 0x0a, 0x16, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x41, 0x4a, 0x49, 0x4b, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x10, 0x2d, 0x12, 0x18, 0x0a, 0x14, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x48, 0x41, 0x49, 0x4c,
	0x41, 0x4e, 0x44, 0x10, 0x46, 0x12, 0x39, 0x0a, 0x35, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x52, 0x5f,
	0x59, 0x55, 0x47, 0x4f, 0x53, 0x4c, 0x41, 0x56, 0x5f, 0x52, 0x45, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x5f, 0x4f, 0x46, 0x5f, 0x4d, 0x41, 0x43, 0x45, 0x44, 0x4f, 0x4e, 0x49, 0x41, 0x10, 0x2e,
	0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x55, 0x4e, 0x49, 0x53, 0x49, 0x41, 0x10, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x55, 0x52, 0x4b, 0x45, 0x59, 0x10,
	0x2f, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x55, 0x52, 0x4b, 0x4d, 0x45, 0x4e, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x10, 0x30, 0x12,
	0x16, 0x0a, 0x12, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55,
	0x47, 0x41, 0x4e, 0x44, 0x41, 0x10, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4b, 0x52, 0x41, 0x49, 0x4e, 0x45, 0x10, 0x31,
	0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x47, 0x44, 0x4f, 0x4d, 0x10, 0x32,
	0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x59,
	0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f,
	0x4f, 0x46, 0x5f, 0x54, 0x41, 0x4e, 0x5a, 0x41, 0x4e, 0x49, 0x41, 0x10, 0x63, 0x12, 0x28, 0x0a,
	0x24, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x53, 0x5f, 0x4f, 0x46, 0x5f, 0x41, 0x4d,
	0x45, 0x52, 0x49, 0x43, 0x41, 0x10, 0x33, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x52, 0x55, 0x47, 0x55, 0x41, 0x59, 0x10, 0x6f,
	0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x55, 0x5a, 0x42, 0x45, 0x4b, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x10, 0x34, 0x12, 0x19, 0x0a, 0x15,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x56, 0x45, 0x4e, 0x45,
	0x5a, 0x55, 0x45, 0x4c, 0x41, 0x10, 0x56, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x56, 0x49, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x10, 0x47,
	0x12, 0x15, 0x0a, 0x11, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x59, 0x45, 0x4d, 0x45, 0x4e, 0x10, 0x5b, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x5a, 0x49, 0x4d, 0x42, 0x41, 0x42, 0x57, 0x45, 0x10,
	0x61, 0x42, 0xe1, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x67, 0x75, 0x6e, 0x2d,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2d,
	0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2f, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x4f, 0x58, 0xaa,
	0x02, 0x13, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x4f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x13, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x5c,
	0x4f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1f, 0x41, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x5c, 0x4f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15,
	0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x3a, 0x3a, 0x4f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_anduril_ontology_v1_type_pub_proto_rawDescOnce sync.Once
	file_anduril_ontology_v1_type_pub_proto_rawDescData = file_anduril_ontology_v1_type_pub_proto_rawDesc
)

func file_anduril_ontology_v1_type_pub_proto_rawDescGZIP() []byte {
	file_anduril_ontology_v1_type_pub_proto_rawDescOnce.Do(func() {
		file_anduril_ontology_v1_type_pub_proto_rawDescData = protoimpl.X.CompressGZIP(file_anduril_ontology_v1_type_pub_proto_rawDescData)
	})
	return file_anduril_ontology_v1_type_pub_proto_rawDescData
}

var file_anduril_ontology_v1_type_pub_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_anduril_ontology_v1_type_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_anduril_ontology_v1_type_pub_proto_goTypes = []any{
	(Class)(0),         // 0: anduril.ontology.v1.Class
	(Disposition)(0),   // 1: anduril.ontology.v1.Disposition
	(Environment)(0),   // 2: anduril.ontology.v1.Environment
	(Nationality)(0),   // 3: anduril.ontology.v1.Nationality
	(*ObjectType)(nil), // 4: anduril.ontology.v1.ObjectType
}
var file_anduril_ontology_v1_type_pub_proto_depIdxs = []int32{
	0, // 0: anduril.ontology.v1.ObjectType.class:type_name -> anduril.ontology.v1.Class
	1, // 1: anduril.ontology.v1.ObjectType.disposition:type_name -> anduril.ontology.v1.Disposition
	2, // 2: anduril.ontology.v1.ObjectType.environment:type_name -> anduril.ontology.v1.Environment
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_anduril_ontology_v1_type_pub_proto_init() }
func file_anduril_ontology_v1_type_pub_proto_init() {
	if File_anduril_ontology_v1_type_pub_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_anduril_ontology_v1_type_pub_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ObjectType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_anduril_ontology_v1_type_pub_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_anduril_ontology_v1_type_pub_proto_goTypes,
		DependencyIndexes: file_anduril_ontology_v1_type_pub_proto_depIdxs,
		EnumInfos:         file_anduril_ontology_v1_type_pub_proto_enumTypes,
		MessageInfos:      file_anduril_ontology_v1_type_pub_proto_msgTypes,
	}.Build()
	File_anduril_ontology_v1_type_pub_proto = out.File
	file_anduril_ontology_v1_type_pub_proto_rawDesc = nil
	file_anduril_ontology_v1_type_pub_proto_goTypes = nil
	file_anduril_ontology_v1_type_pub_proto_depIdxs = nil
}
