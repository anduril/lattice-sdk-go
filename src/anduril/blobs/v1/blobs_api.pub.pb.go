// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: anduril/blobs/v1/blobs_api.pub.proto

package blobsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Create and store a new blob (<=2MB).
type CreateBlobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// blobs created will be namespaced by client_id
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// unique (per client) key for the blob
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// timestamp after which should no longer retain this blob. required and cannot be > 90 days in the future.
	RetentionTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=retention_time,json=retentionTime,proto3" json:"retention_time,omitempty"`
	// optional md5 sum/hash of contents. if provided, will be validated against md5 of contents
	Md5 []byte `protobuf:"bytes,4,opt,name=md5,proto3" json:"md5,omitempty"`
	// contents of the entire blob, maximum size is 2MB (2 * 1024 * 1024 bytes)
	Contents []byte `protobuf:"bytes,5,opt,name=contents,proto3" json:"contents,omitempty"`
	// details regarding the blob's origin - aka source and type
	Provenance *BlobProvenance `protobuf:"bytes,6,opt,name=provenance,proto3" json:"provenance,omitempty"`
}

func (x *CreateBlobRequest) Reset() {
	*x = CreateBlobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlobRequest) ProtoMessage() {}

func (x *CreateBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlobRequest.ProtoReflect.Descriptor instead.
func (*CreateBlobRequest) Descriptor() ([]byte, []int) {
	return file_anduril_blobs_v1_blobs_api_pub_proto_rawDescGZIP(), []int{0}
}

func (x *CreateBlobRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CreateBlobRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CreateBlobRequest) GetRetentionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RetentionTime
	}
	return nil
}

func (x *CreateBlobRequest) GetMd5() []byte {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *CreateBlobRequest) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

func (x *CreateBlobRequest) GetProvenance() *BlobProvenance {
	if x != nil {
		return x.Provenance
	}
	return nil
}

type CreateBlobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *BlobMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// URL at which the blob can be fetched
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *CreateBlobResponse) Reset() {
	*x = CreateBlobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBlobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlobResponse) ProtoMessage() {}

func (x *CreateBlobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlobResponse.ProtoReflect.Descriptor instead.
func (*CreateBlobResponse) Descriptor() ([]byte, []int) {
	return file_anduril_blobs_v1_blobs_api_pub_proto_rawDescGZIP(), []int{1}
}

func (x *CreateBlobResponse) GetMetadata() *BlobMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateBlobResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Create and store a new blob. Only the first 'CreateBlobChunkedRequest' message in the client stream needs
// to contain metadata specific fields (IE: client_id, key, md5 etc.). Metadata fields set on all requests
// ensuing the first request will be ignored.
type CreateBlobChunkedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// blobs created will be namespaced by client_id
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// unique (per client) key for the blob
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// timestamp after which should no longer retain this blob. required and cannot be > 90 days in the future.
	RetentionTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=retention_time,json=retentionTime,proto3" json:"retention_time,omitempty"`
	// optional md5 sum/hash of contents. if provided, will be validated against the md5 of all contents in aggregate
	Md5 []byte `protobuf:"bytes,4,opt,name=md5,proto3" json:"md5,omitempty"`
	// contents of the blob chunk, maximum size is 2MB per message (2 * 1024 * 1024 bytes)
	ChunkContents []byte `protobuf:"bytes,5,opt,name=chunk_contents,json=chunkContents,proto3" json:"chunk_contents,omitempty"`
	// details regarding the blob's origin - aka source and type
	Provenance *BlobProvenance `protobuf:"bytes,6,opt,name=provenance,proto3" json:"provenance,omitempty"`
}

func (x *CreateBlobChunkedRequest) Reset() {
	*x = CreateBlobChunkedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBlobChunkedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlobChunkedRequest) ProtoMessage() {}

func (x *CreateBlobChunkedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlobChunkedRequest.ProtoReflect.Descriptor instead.
func (*CreateBlobChunkedRequest) Descriptor() ([]byte, []int) {
	return file_anduril_blobs_v1_blobs_api_pub_proto_rawDescGZIP(), []int{2}
}

func (x *CreateBlobChunkedRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CreateBlobChunkedRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CreateBlobChunkedRequest) GetRetentionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RetentionTime
	}
	return nil
}

func (x *CreateBlobChunkedRequest) GetMd5() []byte {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *CreateBlobChunkedRequest) GetChunkContents() []byte {
	if x != nil {
		return x.ChunkContents
	}
	return nil
}

func (x *CreateBlobChunkedRequest) GetProvenance() *BlobProvenance {
	if x != nil {
		return x.Provenance
	}
	return nil
}

type CreateBlobChunkedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *BlobMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// URL at which the blob can be fetched
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *CreateBlobChunkedResponse) Reset() {
	*x = CreateBlobChunkedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBlobChunkedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlobChunkedResponse) ProtoMessage() {}

func (x *CreateBlobChunkedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlobChunkedResponse.ProtoReflect.Descriptor instead.
func (*CreateBlobChunkedResponse) Descriptor() ([]byte, []int) {
	return file_anduril_blobs_v1_blobs_api_pub_proto_rawDescGZIP(), []int{3}
}

func (x *CreateBlobChunkedResponse) GetMetadata() *BlobMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateBlobChunkedResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type GetBlobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Key      string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GetBlobRequest) Reset() {
	*x = GetBlobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlobRequest) ProtoMessage() {}

func (x *GetBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlobRequest.ProtoReflect.Descriptor instead.
func (*GetBlobRequest) Descriptor() ([]byte, []int) {
	return file_anduril_blobs_v1_blobs_api_pub_proto_rawDescGZIP(), []int{4}
}

func (x *GetBlobRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GetBlobRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type GetBlobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// contents of the blob, maximum size of each response message contents in stream is capped at 2MB.
	Contents []byte `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
	// metadata will only be present in the first stream message
	Metadata *BlobMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetBlobResponse) Reset() {
	*x = GetBlobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlobResponse) ProtoMessage() {}

func (x *GetBlobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlobResponse.ProtoReflect.Descriptor instead.
func (*GetBlobResponse) Descriptor() ([]byte, []int) {
	return file_anduril_blobs_v1_blobs_api_pub_proto_rawDescGZIP(), []int{5}
}

func (x *GetBlobResponse) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

func (x *GetBlobResponse) GetMetadata() *BlobMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type HeadBlobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Key      string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *HeadBlobRequest) Reset() {
	*x = HeadBlobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeadBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadBlobRequest) ProtoMessage() {}

func (x *HeadBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadBlobRequest.ProtoReflect.Descriptor instead.
func (*HeadBlobRequest) Descriptor() ([]byte, []int) {
	return file_anduril_blobs_v1_blobs_api_pub_proto_rawDescGZIP(), []int{6}
}

func (x *HeadBlobRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *HeadBlobRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type HeadBlobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *BlobMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// URL at which the blob can be fetched
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *HeadBlobResponse) Reset() {
	*x = HeadBlobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeadBlobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadBlobResponse) ProtoMessage() {}

func (x *HeadBlobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadBlobResponse.ProtoReflect.Descriptor instead.
func (*HeadBlobResponse) Descriptor() ([]byte, []int) {
	return file_anduril_blobs_v1_blobs_api_pub_proto_rawDescGZIP(), []int{7}
}

func (x *HeadBlobResponse) GetMetadata() *BlobMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *HeadBlobResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type StreamBlobMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The blob client_id to stream.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *StreamBlobMetadataRequest) Reset() {
	*x = StreamBlobMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamBlobMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamBlobMetadataRequest) ProtoMessage() {}

func (x *StreamBlobMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamBlobMetadataRequest.ProtoReflect.Descriptor instead.
func (*StreamBlobMetadataRequest) Descriptor() ([]byte, []int) {
	return file_anduril_blobs_v1_blobs_api_pub_proto_rawDescGZIP(), []int{8}
}

func (x *StreamBlobMetadataRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type StreamBlobMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of blob announcement metadata returned from a StreamBlobMetadataResponse.
	Announcements []*BlobAnnouncement `protobuf:"bytes,1,rep,name=announcements,proto3" json:"announcements,omitempty"`
}

func (x *StreamBlobMetadataResponse) Reset() {
	*x = StreamBlobMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamBlobMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamBlobMetadataResponse) ProtoMessage() {}

func (x *StreamBlobMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamBlobMetadataResponse.ProtoReflect.Descriptor instead.
func (*StreamBlobMetadataResponse) Descriptor() ([]byte, []int) {
	return file_anduril_blobs_v1_blobs_api_pub_proto_rawDescGZIP(), []int{9}
}

func (x *StreamBlobMetadataResponse) GetAnnouncements() []*BlobAnnouncement {
	if x != nil {
		return x.Announcements
	}
	return nil
}

type BlobAnnouncement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The announced blob's specific client-driven namespace.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The announced blob's unique key.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// The metadata describing the blob's contents.
	Metadata *BlobMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *BlobAnnouncement) Reset() {
	*x = BlobAnnouncement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobAnnouncement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobAnnouncement) ProtoMessage() {}

func (x *BlobAnnouncement) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobAnnouncement.ProtoReflect.Descriptor instead.
func (*BlobAnnouncement) Descriptor() ([]byte, []int) {
	return file_anduril_blobs_v1_blobs_api_pub_proto_rawDescGZIP(), []int{10}
}

func (x *BlobAnnouncement) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *BlobAnnouncement) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *BlobAnnouncement) GetMetadata() *BlobMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_anduril_blobs_v1_blobs_api_pub_proto protoreflect.FileDescriptor

var file_anduril_blobs_v1_blobs_api_pub_proto_rawDesc = []byte{
	0x0a, 0x24, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e,
	0x62, 0x6c, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x21, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf5, 0x01, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x50, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0x62, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x87, 0x02, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x40, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x62,
	0x6c, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x76,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x69, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x62,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x62, 0x6c, 0x6f, 0x62,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x3f, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x69,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x0f, 0x48, 0x65, 0x61,
	0x64, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x60, 0x0a, 0x10, 0x48,
	0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x62, 0x6c, 0x6f, 0x62,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x38, 0x0a,
	0x19, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x6c, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x42, 0x6c, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x6f, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x7d, 0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x62,
	0x6c, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x32, 0xeb,
	0x03, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x41, 0x50, 0x49, 0x12, 0x57, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x23, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c,
	0x6f, 0x62, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x12, 0x2a, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e,
	0x62, 0x6c, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x6c, 0x6f, 0x62, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x28, 0x01, 0x12, 0x50, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x12,
	0x20, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x62, 0x6c, 0x6f, 0x62,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x08, 0x48, 0x65, 0x61, 0x64, 0x42, 0x6c,
	0x6f, 0x62, 0x12, 0x21, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x62, 0x6c, 0x6f,
	0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e,
	0x62, 0x6c, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x12, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x42, 0x6c, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x2b, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x6c, 0x6f, 0x62, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x6c, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0xd0, 0x01, 0x0a,
	0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x62, 0x6c, 0x6f,
	0x62, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x75, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x67, 0x75, 0x6e, 0x2d, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2d, 0x73, 0x64, 0x6b, 0x2d,
	0x67, 0x6f, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x62,
	0x6c, 0x6f, 0x62, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x76, 0x31, 0xa2,
	0x02, 0x03, 0x41, 0x42, 0x58, 0xaa, 0x02, 0x10, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e,
	0x42, 0x6c, 0x6f, 0x62, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x41, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x5c, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x41, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x5c, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x41, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x3a, 0x3a, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_anduril_blobs_v1_blobs_api_pub_proto_rawDescOnce sync.Once
	file_anduril_blobs_v1_blobs_api_pub_proto_rawDescData = file_anduril_blobs_v1_blobs_api_pub_proto_rawDesc
)

func file_anduril_blobs_v1_blobs_api_pub_proto_rawDescGZIP() []byte {
	file_anduril_blobs_v1_blobs_api_pub_proto_rawDescOnce.Do(func() {
		file_anduril_blobs_v1_blobs_api_pub_proto_rawDescData = protoimpl.X.CompressGZIP(file_anduril_blobs_v1_blobs_api_pub_proto_rawDescData)
	})
	return file_anduril_blobs_v1_blobs_api_pub_proto_rawDescData
}

var file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_anduril_blobs_v1_blobs_api_pub_proto_goTypes = []any{
	(*CreateBlobRequest)(nil),          // 0: anduril.blobs.v1.CreateBlobRequest
	(*CreateBlobResponse)(nil),         // 1: anduril.blobs.v1.CreateBlobResponse
	(*CreateBlobChunkedRequest)(nil),   // 2: anduril.blobs.v1.CreateBlobChunkedRequest
	(*CreateBlobChunkedResponse)(nil),  // 3: anduril.blobs.v1.CreateBlobChunkedResponse
	(*GetBlobRequest)(nil),             // 4: anduril.blobs.v1.GetBlobRequest
	(*GetBlobResponse)(nil),            // 5: anduril.blobs.v1.GetBlobResponse
	(*HeadBlobRequest)(nil),            // 6: anduril.blobs.v1.HeadBlobRequest
	(*HeadBlobResponse)(nil),           // 7: anduril.blobs.v1.HeadBlobResponse
	(*StreamBlobMetadataRequest)(nil),  // 8: anduril.blobs.v1.StreamBlobMetadataRequest
	(*StreamBlobMetadataResponse)(nil), // 9: anduril.blobs.v1.StreamBlobMetadataResponse
	(*BlobAnnouncement)(nil),           // 10: anduril.blobs.v1.BlobAnnouncement
	(*timestamppb.Timestamp)(nil),      // 11: google.protobuf.Timestamp
	(*BlobProvenance)(nil),             // 12: anduril.blobs.v1.BlobProvenance
	(*BlobMetadata)(nil),               // 13: anduril.blobs.v1.BlobMetadata
}
var file_anduril_blobs_v1_blobs_api_pub_proto_depIdxs = []int32{
	11, // 0: anduril.blobs.v1.CreateBlobRequest.retention_time:type_name -> google.protobuf.Timestamp
	12, // 1: anduril.blobs.v1.CreateBlobRequest.provenance:type_name -> anduril.blobs.v1.BlobProvenance
	13, // 2: anduril.blobs.v1.CreateBlobResponse.metadata:type_name -> anduril.blobs.v1.BlobMetadata
	11, // 3: anduril.blobs.v1.CreateBlobChunkedRequest.retention_time:type_name -> google.protobuf.Timestamp
	12, // 4: anduril.blobs.v1.CreateBlobChunkedRequest.provenance:type_name -> anduril.blobs.v1.BlobProvenance
	13, // 5: anduril.blobs.v1.CreateBlobChunkedResponse.metadata:type_name -> anduril.blobs.v1.BlobMetadata
	13, // 6: anduril.blobs.v1.GetBlobResponse.metadata:type_name -> anduril.blobs.v1.BlobMetadata
	13, // 7: anduril.blobs.v1.HeadBlobResponse.metadata:type_name -> anduril.blobs.v1.BlobMetadata
	10, // 8: anduril.blobs.v1.StreamBlobMetadataResponse.announcements:type_name -> anduril.blobs.v1.BlobAnnouncement
	13, // 9: anduril.blobs.v1.BlobAnnouncement.metadata:type_name -> anduril.blobs.v1.BlobMetadata
	0,  // 10: anduril.blobs.v1.BlobsAPI.CreateBlob:input_type -> anduril.blobs.v1.CreateBlobRequest
	2,  // 11: anduril.blobs.v1.BlobsAPI.CreateBlobChunked:input_type -> anduril.blobs.v1.CreateBlobChunkedRequest
	4,  // 12: anduril.blobs.v1.BlobsAPI.GetBlob:input_type -> anduril.blobs.v1.GetBlobRequest
	6,  // 13: anduril.blobs.v1.BlobsAPI.HeadBlob:input_type -> anduril.blobs.v1.HeadBlobRequest
	8,  // 14: anduril.blobs.v1.BlobsAPI.StreamBlobMetadata:input_type -> anduril.blobs.v1.StreamBlobMetadataRequest
	1,  // 15: anduril.blobs.v1.BlobsAPI.CreateBlob:output_type -> anduril.blobs.v1.CreateBlobResponse
	3,  // 16: anduril.blobs.v1.BlobsAPI.CreateBlobChunked:output_type -> anduril.blobs.v1.CreateBlobChunkedResponse
	5,  // 17: anduril.blobs.v1.BlobsAPI.GetBlob:output_type -> anduril.blobs.v1.GetBlobResponse
	7,  // 18: anduril.blobs.v1.BlobsAPI.HeadBlob:output_type -> anduril.blobs.v1.HeadBlobResponse
	9,  // 19: anduril.blobs.v1.BlobsAPI.StreamBlobMetadata:output_type -> anduril.blobs.v1.StreamBlobMetadataResponse
	15, // [15:20] is the sub-list for method output_type
	10, // [10:15] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_anduril_blobs_v1_blobs_api_pub_proto_init() }
func file_anduril_blobs_v1_blobs_api_pub_proto_init() {
	if File_anduril_blobs_v1_blobs_api_pub_proto != nil {
		return
	}
	file_anduril_blobs_v1_common_pub_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateBlobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreateBlobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CreateBlobChunkedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CreateBlobChunkedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetBlobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetBlobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*HeadBlobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*HeadBlobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*StreamBlobMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*StreamBlobMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*BlobAnnouncement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_anduril_blobs_v1_blobs_api_pub_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_anduril_blobs_v1_blobs_api_pub_proto_goTypes,
		DependencyIndexes: file_anduril_blobs_v1_blobs_api_pub_proto_depIdxs,
		MessageInfos:      file_anduril_blobs_v1_blobs_api_pub_proto_msgTypes,
	}.Build()
	File_anduril_blobs_v1_blobs_api_pub_proto = out.File
	file_anduril_blobs_v1_blobs_api_pub_proto_rawDesc = nil
	file_anduril_blobs_v1_blobs_api_pub_proto_goTypes = nil
	file_anduril_blobs_v1_blobs_api_pub_proto_depIdxs = nil
}
