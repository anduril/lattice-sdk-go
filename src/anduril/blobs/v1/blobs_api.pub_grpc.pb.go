// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: anduril/blobs/v1/blobs_api.pub.proto

package blobsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlobsAPI_CreateBlob_FullMethodName         = "/anduril.blobs.v1.BlobsAPI/CreateBlob"
	BlobsAPI_CreateBlobChunked_FullMethodName  = "/anduril.blobs.v1.BlobsAPI/CreateBlobChunked"
	BlobsAPI_GetBlob_FullMethodName            = "/anduril.blobs.v1.BlobsAPI/GetBlob"
	BlobsAPI_HeadBlob_FullMethodName           = "/anduril.blobs.v1.BlobsAPI/HeadBlob"
	BlobsAPI_StreamBlobMetadata_FullMethodName = "/anduril.blobs.v1.BlobsAPI/StreamBlobMetadata"
)

// BlobsAPIClient is the client API for BlobsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A general purpose blob storage service.
type BlobsAPIClient interface {
	// Creates a new blob. This is a simple form for small (<=2MB) blobs with unary atomic API.
	CreateBlob(ctx context.Context, in *CreateBlobRequest, opts ...grpc.CallOption) (*CreateBlobResponse, error)
	// Creates a new blob. This is for creating any sized blob using a client streaming API.
	CreateBlobChunked(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateBlobChunkedRequest, CreateBlobChunkedResponse], error)
	// Gets a blob (streams blob contents).
	GetBlob(ctx context.Context, in *GetBlobRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetBlobResponse], error)
	// Gets the metadata for a blob, but not the contents.
	HeadBlob(ctx context.Context, in *HeadBlobRequest, opts ...grpc.CallOption) (*HeadBlobResponse, error)
	// Stream blob metadata announcements for the provided clientID.
	StreamBlobMetadata(ctx context.Context, in *StreamBlobMetadataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamBlobMetadataResponse], error)
}

type blobsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewBlobsAPIClient(cc grpc.ClientConnInterface) BlobsAPIClient {
	return &blobsAPIClient{cc}
}

func (c *blobsAPIClient) CreateBlob(ctx context.Context, in *CreateBlobRequest, opts ...grpc.CallOption) (*CreateBlobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBlobResponse)
	err := c.cc.Invoke(ctx, BlobsAPI_CreateBlob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blobsAPIClient) CreateBlobChunked(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateBlobChunkedRequest, CreateBlobChunkedResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlobsAPI_ServiceDesc.Streams[0], BlobsAPI_CreateBlobChunked_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateBlobChunkedRequest, CreateBlobChunkedResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlobsAPI_CreateBlobChunkedClient = grpc.ClientStreamingClient[CreateBlobChunkedRequest, CreateBlobChunkedResponse]

func (c *blobsAPIClient) GetBlob(ctx context.Context, in *GetBlobRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetBlobResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlobsAPI_ServiceDesc.Streams[1], BlobsAPI_GetBlob_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetBlobRequest, GetBlobResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlobsAPI_GetBlobClient = grpc.ServerStreamingClient[GetBlobResponse]

func (c *blobsAPIClient) HeadBlob(ctx context.Context, in *HeadBlobRequest, opts ...grpc.CallOption) (*HeadBlobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeadBlobResponse)
	err := c.cc.Invoke(ctx, BlobsAPI_HeadBlob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blobsAPIClient) StreamBlobMetadata(ctx context.Context, in *StreamBlobMetadataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamBlobMetadataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlobsAPI_ServiceDesc.Streams[2], BlobsAPI_StreamBlobMetadata_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamBlobMetadataRequest, StreamBlobMetadataResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlobsAPI_StreamBlobMetadataClient = grpc.ServerStreamingClient[StreamBlobMetadataResponse]

// BlobsAPIServer is the server API for BlobsAPI service.
// All implementations must embed UnimplementedBlobsAPIServer
// for forward compatibility.
//
// A general purpose blob storage service.
type BlobsAPIServer interface {
	// Creates a new blob. This is a simple form for small (<=2MB) blobs with unary atomic API.
	CreateBlob(context.Context, *CreateBlobRequest) (*CreateBlobResponse, error)
	// Creates a new blob. This is for creating any sized blob using a client streaming API.
	CreateBlobChunked(grpc.ClientStreamingServer[CreateBlobChunkedRequest, CreateBlobChunkedResponse]) error
	// Gets a blob (streams blob contents).
	GetBlob(*GetBlobRequest, grpc.ServerStreamingServer[GetBlobResponse]) error
	// Gets the metadata for a blob, but not the contents.
	HeadBlob(context.Context, *HeadBlobRequest) (*HeadBlobResponse, error)
	// Stream blob metadata announcements for the provided clientID.
	StreamBlobMetadata(*StreamBlobMetadataRequest, grpc.ServerStreamingServer[StreamBlobMetadataResponse]) error
	mustEmbedUnimplementedBlobsAPIServer()
}

// UnimplementedBlobsAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlobsAPIServer struct{}

func (UnimplementedBlobsAPIServer) CreateBlob(context.Context, *CreateBlobRequest) (*CreateBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlob not implemented")
}
func (UnimplementedBlobsAPIServer) CreateBlobChunked(grpc.ClientStreamingServer[CreateBlobChunkedRequest, CreateBlobChunkedResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CreateBlobChunked not implemented")
}
func (UnimplementedBlobsAPIServer) GetBlob(*GetBlobRequest, grpc.ServerStreamingServer[GetBlobResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetBlob not implemented")
}
func (UnimplementedBlobsAPIServer) HeadBlob(context.Context, *HeadBlobRequest) (*HeadBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeadBlob not implemented")
}
func (UnimplementedBlobsAPIServer) StreamBlobMetadata(*StreamBlobMetadataRequest, grpc.ServerStreamingServer[StreamBlobMetadataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamBlobMetadata not implemented")
}
func (UnimplementedBlobsAPIServer) mustEmbedUnimplementedBlobsAPIServer() {}
func (UnimplementedBlobsAPIServer) testEmbeddedByValue()                  {}

// UnsafeBlobsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlobsAPIServer will
// result in compilation errors.
type UnsafeBlobsAPIServer interface {
	mustEmbedUnimplementedBlobsAPIServer()
}

func RegisterBlobsAPIServer(s grpc.ServiceRegistrar, srv BlobsAPIServer) {
	// If the following call pancis, it indicates UnimplementedBlobsAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlobsAPI_ServiceDesc, srv)
}

func _BlobsAPI_CreateBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobsAPIServer).CreateBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlobsAPI_CreateBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobsAPIServer).CreateBlob(ctx, req.(*CreateBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlobsAPI_CreateBlobChunked_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlobsAPIServer).CreateBlobChunked(&grpc.GenericServerStream[CreateBlobChunkedRequest, CreateBlobChunkedResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlobsAPI_CreateBlobChunkedServer = grpc.ClientStreamingServer[CreateBlobChunkedRequest, CreateBlobChunkedResponse]

func _BlobsAPI_GetBlob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlobsAPIServer).GetBlob(m, &grpc.GenericServerStream[GetBlobRequest, GetBlobResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlobsAPI_GetBlobServer = grpc.ServerStreamingServer[GetBlobResponse]

func _BlobsAPI_HeadBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeadBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobsAPIServer).HeadBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlobsAPI_HeadBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobsAPIServer).HeadBlob(ctx, req.(*HeadBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlobsAPI_StreamBlobMetadata_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamBlobMetadataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlobsAPIServer).StreamBlobMetadata(m, &grpc.GenericServerStream[StreamBlobMetadataRequest, StreamBlobMetadataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlobsAPI_StreamBlobMetadataServer = grpc.ServerStreamingServer[StreamBlobMetadataResponse]

// BlobsAPI_ServiceDesc is the grpc.ServiceDesc for BlobsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlobsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "anduril.blobs.v1.BlobsAPI",
	HandlerType: (*BlobsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlob",
			Handler:    _BlobsAPI_CreateBlob_Handler,
		},
		{
			MethodName: "HeadBlob",
			Handler:    _BlobsAPI_HeadBlob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateBlobChunked",
			Handler:       _BlobsAPI_CreateBlobChunked_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetBlob",
			Handler:       _BlobsAPI_GetBlob_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamBlobMetadata",
			Handler:       _BlobsAPI_StreamBlobMetadata_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "anduril/blobs/v1/blobs_api.pub.proto",
}
