// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: anduril/entitymanager/v1/entity.pub.proto

package entitymanagerv1

import (
	v2 "github.com/anduril/anduril-go/src/anduril/tasks/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Indicates whether an entity can be deleted with the DeleteEntity API call
type Deletable int32

const (
	Deletable_DELETABLE_INVALID Deletable = 0
	// Entity can immediately be deleted.
	Deletable_DELETABLE_TRUE Deletable = 1
	// Entity is from another source that is known to not allow entities to be deleted
	Deletable_DELETABLE_FALSE Deletable = 2
	// Entity is from another source that requires the source to accept the request. The DeleteEntity API call
	// will work asynchronously in this case.
	Deletable_DELETABLE_REQUEST Deletable = 3
)

// Enum value maps for Deletable.
var (
	Deletable_name = map[int32]string{
		0: "DELETABLE_INVALID",
		1: "DELETABLE_TRUE",
		2: "DELETABLE_FALSE",
		3: "DELETABLE_REQUEST",
	}
	Deletable_value = map[string]int32{
		"DELETABLE_INVALID": 0,
		"DELETABLE_TRUE":    1,
		"DELETABLE_FALSE":   2,
		"DELETABLE_REQUEST": 3,
	}
)

func (x Deletable) Enum() *Deletable {
	p := new(Deletable)
	*p = x
	return p
}

func (x Deletable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Deletable) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_entity_pub_proto_enumTypes[0].Descriptor()
}

func (Deletable) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_entity_pub_proto_enumTypes[0]
}

func (x Deletable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Deletable.Descriptor instead.
func (Deletable) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{0}
}

type InteractivityMode int32

const (
	InteractivityMode_INTERACTIVITY_MODE_INVALID         InteractivityMode = 0
	InteractivityMode_INTERACTIVITY_MODE_DEFAULT         InteractivityMode = 1
	InteractivityMode_INTERACTIVITY_MODE_DISABLED_ON_MAP InteractivityMode = 2
)

// Enum value maps for InteractivityMode.
var (
	InteractivityMode_name = map[int32]string{
		0: "INTERACTIVITY_MODE_INVALID",
		1: "INTERACTIVITY_MODE_DEFAULT",
		2: "INTERACTIVITY_MODE_DISABLED_ON_MAP",
	}
	InteractivityMode_value = map[string]int32{
		"INTERACTIVITY_MODE_INVALID":         0,
		"INTERACTIVITY_MODE_DEFAULT":         1,
		"INTERACTIVITY_MODE_DISABLED_ON_MAP": 2,
	}
)

func (x InteractivityMode) Enum() *InteractivityMode {
	p := new(InteractivityMode)
	*p = x
	return p
}

func (x InteractivityMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InteractivityMode) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_entity_pub_proto_enumTypes[1].Descriptor()
}

func (InteractivityMode) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_entity_pub_proto_enumTypes[1]
}

func (x InteractivityMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InteractivityMode.Descriptor instead.
func (InteractivityMode) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{1}
}

// An entity object represents a single entity within the Lattice operational environment, and it contains
// all data associated with that entity, such as its name, ID, and any other relevant components.
type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Globally Unique Identifier (GUID) for your entity. If blank, the Entity API creates
	// an entity and automatically generates a new ID for the entity.
	EntityId string `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	// Helpful, human-readable entity description mainly used for debugging purposes and human
	// traceability. If blank, the Entity API generates one for you.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Indicates an active asset receiving updates. This is a required field for publishing an entity.
	// It needs to be set to true when publishing an entity.
	IsLive bool `protobuf:"varint,3,opt,name=is_live,json=isLive,proto3" json:"is_live,omitempty"`
	// Time when the asset enters the system. If blank, the Entity API uses a current timestamp.
	// For example, when a drone is first powered on, it might report it's boot time as the created time.
	CreatedTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// A future time that expires an entity and updates the isLive flag.
	// For entities that are constantly updating, the expiry time also updates.
	// Note in some cases this may differ from isLive.
	// Example: Entities with tasks exported to an external system must remain
	// active, even after they expire.
	// This is a required field for publishing an entity via Flux or PublishEntities rpc. When publishing
	// an entity, this timestamp must be in the future, but less than 30 days from the current time.
	ExpiryTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	// To indicate that this entity should not expire. Only to be set to `true` on entities published
	// via PutEntity call. Entities published via Flux or PublishEntities rpc with `no_expiry == true` will be rejected.
	NoExpiry bool `protobuf:"varint,43,opt,name=no_expiry,json=noExpiry,proto3" json:"no_expiry,omitempty"`
	// Human-readable descriptions of what the entity is currently doing.
	Status *Status `protobuf:"bytes,19,opt,name=status,proto3" json:"status,omitempty"`
	// Geospatial data related to the entity, including it's position, kinematics and orientation.
	Location *Location `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	// Uncertainty of the entity's position and kinematics.
	LocationUncertainty *LocationUncertainty `protobuf:"bytes,15,opt,name=location_uncertainty,json=locationUncertainty,proto3" json:"location_uncertainty,omitempty"`
	// Deprecated: do not use, use geo_shape instead
	//
	// Deprecated: Marked as deprecated in anduril/entitymanager/v1/entity.pub.proto.
	Geopolygon *GeoPolygon `protobuf:"bytes,17,opt,name=geopolygon,proto3" json:"geopolygon,omitempty"`
	// Geospatial representation of the entity, including entities that cover an area rather than a fixed point.
	GeoShape *GeoShape `protobuf:"bytes,23,opt,name=geo_shape,json=geoShape,proto3" json:"geo_shape,omitempty"`
	// Additional details on what the geospatial area or point represents, along with visual display details.
	GeoDetails *GeoDetails `protobuf:"bytes,24,opt,name=geo_details,json=geoDetails,proto3" json:"geo_details,omitempty"`
	// Naming of the entity as well as identifiers that other systems use to reference the same entity.
	Aliases *Aliases `protobuf:"bytes,7,opt,name=aliases,proto3" json:"aliases,omitempty"`
	// If this entity is tracked by another, this component contains data related to how it's being tracked.
	Tracked *Tracked `protobuf:"bytes,8,opt,name=tracked,proto3" json:"tracked,omitempty"`
	// If this entity has been correlated to another one, this component contains the status of the correlation, the primary entity
	// and the correlation scores.
	Correlated *Correlated `protobuf:"bytes,9,opt,name=correlated,proto3" json:"correlated,omitempty"`
	// Military view of the entity
	MilView *MilView `protobuf:"bytes,10,opt,name=mil_view,json=milView,proto3" json:"mil_view,omitempty"`
	// A standardized representation of the entity
	Ontology *Ontology `protobuf:"bytes,11,opt,name=ontology,proto3" json:"ontology,omitempty"`
	// Details of Sensors that are available on an entity
	Sensors *Sensors `protobuf:"bytes,20,opt,name=sensors,proto3" json:"sensors,omitempty"`
	// Details of payloads that are available on an entity
	Payloads *Payloads `protobuf:"bytes,21,opt,name=payloads,proto3" json:"payloads,omitempty"`
	// Details of the power source on an entity
	PowerState *PowerState `protobuf:"bytes,30,opt,name=power_state,json=powerState,proto3" json:"power_state,omitempty"`
	// The primary data source provenance for this entity
	Provenance *Provenance `protobuf:"bytes,12,opt,name=provenance,proto3" json:"provenance,omitempty"`
	// Provenance of override data
	Overrides *Overrides `protobuf:"bytes,13,opt,name=overrides,proto3" json:"overrides,omitempty"`
	// Indicators of an entity's state that describes properties of the entity as well as what operations can be performed on the entity (eg.
	// can it be deleted)
	Indicators *Indicators `protobuf:"bytes,14,opt,name=indicators,proto3" json:"indicators,omitempty"`
	// A component that references the primary original data source. For example, this would allow the original NITF file
	// data that was ingested to be retrieved.
	OriginalData *OriginalData `protobuf:"bytes,18,opt,name=original_data,json=originalData,proto3" json:"original_data,omitempty"`
	// The prioritization associated with an entity such as if it's a threat or a high value target.
	TargetPriority *TargetPriority `protobuf:"bytes,22,opt,name=target_priority,json=targetPriority,proto3" json:"target_priority,omitempty"`
	// A component that describes an entity's signal characteristics. Primarily used if the entity is a signal of interest
	Signal *Signal `protobuf:"bytes,25,opt,name=signal,proto3" json:"signal,omitempty"`
	// A message describing any transponder codes associated with Mode 1, 2, 3, 4, 5, S interrogations. These are related to ADS-B modes
	TransponderCodes *TransponderCodes `protobuf:"bytes,26,opt,name=transponder_codes,json=transponderCodes,proto3" json:"transponder_codes,omitempty"`
	// Contains details on how to make out-of-band contact with an entity, such as via a phone or email
	Contact *ContactDetails `protobuf:"bytes,27,opt,name=contact,proto3" json:"contact,omitempty"`
	// A component that describes an entity's security classification levels both at an overall classification level for the entity as well as on a per
	// field level.
	DataClassification *Classification `protobuf:"bytes,29,opt,name=data_classification,json=dataClassification,proto3" json:"data_classification,omitempty"`
	// A catalog of tasks that can be performed by an entity.
	TaskCatalog *v2.TaskCatalog `protobuf:"bytes,31,opt,name=task_catalog,json=taskCatalog,proto3" json:"task_catalog,omitempty"`
	// Media associated with an entity such as videos, images or thumbnails.
	Media *Media `protobuf:"bytes,32,opt,name=media,proto3" json:"media,omitempty"`
	// The relationships between this entity and other entities in the battlespace.
	Relationships *Relationships `protobuf:"bytes,33,opt,name=relationships,proto3" json:"relationships,omitempty"`
	// Visual details associated with the display of an entity in the client.
	VisualDetails *VisualDetails `protobuf:"bytes,34,opt,name=visual_details,json=visualDetails,proto3" json:"visual_details,omitempty"`
	// Physical dimensions of the entity
	Dimensions *Dimensions `protobuf:"bytes,36,opt,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Additional information about an entity's route.
	RouteDetails *RouteDetails `protobuf:"bytes,37,opt,name=route_details,json=routeDetails,proto3" json:"route_details,omitempty"`
	// Schedules associated with this entity
	Schedules *Schedules `protobuf:"bytes,38,opt,name=schedules,proto3" json:"schedules,omitempty"`
	// Health metrics or status reported by the entity
	Health *Health `protobuf:"bytes,39,opt,name=health,proto3" json:"health,omitempty"`
	// Details for the group associated with this entity
	GroupDetails *GroupDetails `protobuf:"bytes,40,opt,name=group_details,json=groupDetails,proto3" json:"group_details,omitempty"`
	// Describes an entity's collaborative autonomous teaming status, if any.
	TeamStatus *TeamStatus `protobuf:"bytes,41,opt,name=team_status,json=teamStatus,proto3" json:"team_status,omitempty"`
	// Contains relevant supply information for the entity (e.g., munitions and fuel)
	Supplies *Supplies `protobuf:"bytes,42,opt,name=supplies,proto3" json:"supplies,omitempty"`
	// Orbit information for space objects
	Orbit *Orbit `protobuf:"bytes,46,opt,name=orbit,proto3" json:"orbit,omitempty"`
}

func (x *Entity) Reset() {
	*x = Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{0}
}

func (x *Entity) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *Entity) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Entity) GetIsLive() bool {
	if x != nil {
		return x.IsLive
	}
	return false
}

func (x *Entity) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *Entity) GetExpiryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

func (x *Entity) GetNoExpiry() bool {
	if x != nil {
		return x.NoExpiry
	}
	return false
}

func (x *Entity) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Entity) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Entity) GetLocationUncertainty() *LocationUncertainty {
	if x != nil {
		return x.LocationUncertainty
	}
	return nil
}

// Deprecated: Marked as deprecated in anduril/entitymanager/v1/entity.pub.proto.
func (x *Entity) GetGeopolygon() *GeoPolygon {
	if x != nil {
		return x.Geopolygon
	}
	return nil
}

func (x *Entity) GetGeoShape() *GeoShape {
	if x != nil {
		return x.GeoShape
	}
	return nil
}

func (x *Entity) GetGeoDetails() *GeoDetails {
	if x != nil {
		return x.GeoDetails
	}
	return nil
}

func (x *Entity) GetAliases() *Aliases {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Entity) GetTracked() *Tracked {
	if x != nil {
		return x.Tracked
	}
	return nil
}

func (x *Entity) GetCorrelated() *Correlated {
	if x != nil {
		return x.Correlated
	}
	return nil
}

func (x *Entity) GetMilView() *MilView {
	if x != nil {
		return x.MilView
	}
	return nil
}

func (x *Entity) GetOntology() *Ontology {
	if x != nil {
		return x.Ontology
	}
	return nil
}

func (x *Entity) GetSensors() *Sensors {
	if x != nil {
		return x.Sensors
	}
	return nil
}

func (x *Entity) GetPayloads() *Payloads {
	if x != nil {
		return x.Payloads
	}
	return nil
}

func (x *Entity) GetPowerState() *PowerState {
	if x != nil {
		return x.PowerState
	}
	return nil
}

func (x *Entity) GetProvenance() *Provenance {
	if x != nil {
		return x.Provenance
	}
	return nil
}

func (x *Entity) GetOverrides() *Overrides {
	if x != nil {
		return x.Overrides
	}
	return nil
}

func (x *Entity) GetIndicators() *Indicators {
	if x != nil {
		return x.Indicators
	}
	return nil
}

func (x *Entity) GetOriginalData() *OriginalData {
	if x != nil {
		return x.OriginalData
	}
	return nil
}

func (x *Entity) GetTargetPriority() *TargetPriority {
	if x != nil {
		return x.TargetPriority
	}
	return nil
}

func (x *Entity) GetSignal() *Signal {
	if x != nil {
		return x.Signal
	}
	return nil
}

func (x *Entity) GetTransponderCodes() *TransponderCodes {
	if x != nil {
		return x.TransponderCodes
	}
	return nil
}

func (x *Entity) GetContact() *ContactDetails {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *Entity) GetDataClassification() *Classification {
	if x != nil {
		return x.DataClassification
	}
	return nil
}

func (x *Entity) GetTaskCatalog() *v2.TaskCatalog {
	if x != nil {
		return x.TaskCatalog
	}
	return nil
}

func (x *Entity) GetMedia() *Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *Entity) GetRelationships() *Relationships {
	if x != nil {
		return x.Relationships
	}
	return nil
}

func (x *Entity) GetVisualDetails() *VisualDetails {
	if x != nil {
		return x.VisualDetails
	}
	return nil
}

func (x *Entity) GetDimensions() *Dimensions {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *Entity) GetRouteDetails() *RouteDetails {
	if x != nil {
		return x.RouteDetails
	}
	return nil
}

func (x *Entity) GetSchedules() *Schedules {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *Entity) GetHealth() *Health {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *Entity) GetGroupDetails() *GroupDetails {
	if x != nil {
		return x.GroupDetails
	}
	return nil
}

func (x *Entity) GetTeamStatus() *TeamStatus {
	if x != nil {
		return x.TeamStatus
	}
	return nil
}

func (x *Entity) GetSupplies() *Supplies {
	if x != nil {
		return x.Supplies
	}
	return nil
}

func (x *Entity) GetOrbit() *Orbit {
	if x != nil {
		return x.Orbit
	}
	return nil
}

// We need a proto containing a list of Entities for marshalling/unmarshalling
type Entities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities []*Entity `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *Entities) Reset() {
	*x = Entities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entities) ProtoMessage() {}

func (x *Entities) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entities.ProtoReflect.Descriptor instead.
func (*Entities) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{1}
}

func (x *Entities) GetEntities() []*Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

// Contains status of entities.
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A string that describes the activity that the entity is performing. These values
	// include, but are not limited to the AIR/SURFACE/SUBSURFACE/LAND/SPACE ACTIVITY values found in MIL-STD 6016F.
	// Examples include "RECONNAISSANCE", "INTERDICTION", "ELECTRONIC WARFARE (EW)", "RETURN TO BASE (RTB)", "PREPARING
	// FOR LAUNCH".
	PlatformActivity string `protobuf:"bytes,1,opt,name=platform_activity,json=platformActivity,proto3" json:"platform_activity,omitempty"`
	// A string that describes the role the entity is currently performing. E.g. "Team Member", "Commander" or
	Role string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{2}
}

func (x *Status) GetPlatformActivity() string {
	if x != nil {
		return x.PlatformActivity
	}
	return ""
}

func (x *Status) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

// Available for any Entities with alternate ids in other systems.
type Aliases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlternateIds []*AlternateId `protobuf:"bytes,1,rep,name=alternate_ids,json=alternateIds,proto3" json:"alternate_ids,omitempty"`
	// The best available version of the entity's display name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Aliases) Reset() {
	*x = Aliases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aliases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aliases) ProtoMessage() {}

func (x *Aliases) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aliases.ProtoReflect.Descriptor instead.
func (*Aliases) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{3}
}

func (x *Aliases) GetAlternateIds() []*AlternateId {
	if x != nil {
		return x.AlternateIds
	}
	return nil
}

func (x *Aliases) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Available for Entities that are tracked.
type Tracked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// deprecated in favor of track_quality_wrapper to better indicate when TQ is actually missing vs 0 which is valid
	//
	// Deprecated: Marked as deprecated in anduril/entitymanager/v1/entity.pub.proto.
	TrackQuality uint32 `protobuf:"varint,1,opt,name=track_quality,json=trackQuality,proto3" json:"track_quality,omitempty"`
	// Quality score, 0-15, nil if none
	TrackQualityWrapper *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=track_quality_wrapper,json=trackQualityWrapper,proto3" json:"track_quality_wrapper,omitempty"`
	// Sensor hits aggregation on the tracked entity.
	SensorHits *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=sensor_hits,json=sensorHits,proto3" json:"sensor_hits,omitempty"`
	// Estimated number of objects or units that are represented by this entity. Known as Strength in certain contexts (Link16)
	// if UpperBound == LowerBound; (strength = LowerBound)
	// If both UpperBound and LowerBound are defined; strength is between LowerBound and UpperBound (represented as string "Strength: 4-5")
	// If UpperBound is defined only (LowerBound unset), Strength ≤ UpperBound
	// If LowerBound is defined only (UpperBound unset), LowerBound ≤ Strength
	// 0 indicates unset.
	NumberOfObjects *UInt32Range `protobuf:"bytes,4,opt,name=number_of_objects,json=numberOfObjects,proto3" json:"number_of_objects,omitempty"`
	// deprecated. data from sensors actively tracking the entity are placed in the TrackedBy relationship.
	//
	// Deprecated: Marked as deprecated in anduril/entitymanager/v1/entity.pub.proto.
	SensorDetails *Sensors `protobuf:"bytes,5,opt,name=sensor_details,json=sensorDetails,proto3" json:"sensor_details,omitempty"`
	// The radar cross section (RCS) is a measure of how detectable an object is by radar. A large RCS indicates an object is more easily
	// detected. The unit is “decibels per square meter,” or dBsm
	RadarCrossSection *wrapperspb.DoubleValue `protobuf:"bytes,6,opt,name=radar_cross_section,json=radarCrossSection,proto3" json:"radar_cross_section,omitempty"`
	// Timestamp of the latest tracking measurement for this entity.
	LastMeasurementTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_measurement_time,json=lastMeasurementTime,proto3" json:"last_measurement_time,omitempty"`
	// The relative position of a track with respect to the entity that is tracking it. Used for tracks that do not yet have a 3D position.
	// For this entity (A), being tracked by some entity (B), this LineOfBearing would express a ray from B to A.
	LineOfBearing *LineOfBearing `protobuf:"bytes,9,opt,name=line_of_bearing,json=lineOfBearing,proto3" json:"line_of_bearing,omitempty"`
}

func (x *Tracked) Reset() {
	*x = Tracked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tracked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tracked) ProtoMessage() {}

func (x *Tracked) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tracked.ProtoReflect.Descriptor instead.
func (*Tracked) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{4}
}

// Deprecated: Marked as deprecated in anduril/entitymanager/v1/entity.pub.proto.
func (x *Tracked) GetTrackQuality() uint32 {
	if x != nil {
		return x.TrackQuality
	}
	return 0
}

func (x *Tracked) GetTrackQualityWrapper() *wrapperspb.Int32Value {
	if x != nil {
		return x.TrackQualityWrapper
	}
	return nil
}

func (x *Tracked) GetSensorHits() *wrapperspb.Int32Value {
	if x != nil {
		return x.SensorHits
	}
	return nil
}

func (x *Tracked) GetNumberOfObjects() *UInt32Range {
	if x != nil {
		return x.NumberOfObjects
	}
	return nil
}

// Deprecated: Marked as deprecated in anduril/entitymanager/v1/entity.pub.proto.
func (x *Tracked) GetSensorDetails() *Sensors {
	if x != nil {
		return x.SensorDetails
	}
	return nil
}

func (x *Tracked) GetRadarCrossSection() *wrapperspb.DoubleValue {
	if x != nil {
		return x.RadarCrossSection
	}
	return nil
}

func (x *Tracked) GetLastMeasurementTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastMeasurementTime
	}
	return nil
}

func (x *Tracked) GetLineOfBearing() *LineOfBearing {
	if x != nil {
		return x.LineOfBearing
	}
	return nil
}

// Data provenance.
type Provenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the integration that produced this entity
	IntegrationName string `protobuf:"bytes,5,opt,name=integration_name,json=integrationName,proto3" json:"integration_name,omitempty"`
	// Source data type of this entity. Examples: ADSB, Link16, etc.
	DataType string `protobuf:"bytes,6,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	// Enum defining the source TO BE DEPRECATED
	Source Source `protobuf:"varint,1,opt,name=source,proto3,enum=anduril.entitymanager.v1.Source" json:"source,omitempty"`
	// An ID that allows an element from a source to be uniquely identified
	SourceId string `protobuf:"bytes,3,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// Main update timer for the entity with the exception of overrides
	SourceUpdateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=source_update_time,json=sourceUpdateTime,proto3" json:"source_update_time,omitempty"`
	// Description of the modification source. In the case of a user this is the email address.
	SourceDescription string `protobuf:"bytes,4,opt,name=source_description,json=sourceDescription,proto3" json:"source_description,omitempty"`
}

func (x *Provenance) Reset() {
	*x = Provenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provenance) ProtoMessage() {}

func (x *Provenance) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provenance.ProtoReflect.Descriptor instead.
func (*Provenance) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{5}
}

func (x *Provenance) GetIntegrationName() string {
	if x != nil {
		return x.IntegrationName
	}
	return ""
}

func (x *Provenance) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *Provenance) GetSource() Source {
	if x != nil {
		return x.Source
	}
	return Source_SOURCE_INVALID
}

func (x *Provenance) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *Provenance) GetSourceUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SourceUpdateTime
	}
	return nil
}

func (x *Provenance) GetSourceDescription() string {
	if x != nil {
		return x.SourceDescription
	}
	return ""
}

// Indicators to describe entity to consumers.
type Indicators struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Simulated *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=simulated,proto3" json:"simulated,omitempty"`
	Exercise  *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=exercise,proto3" json:"exercise,omitempty"`
	Emergency *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=emergency,proto3" json:"emergency,omitempty"`
	C2        *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=c2,proto3" json:"c2,omitempty"`
	Deletable Deletable             `protobuf:"varint,5,opt,name=deletable,proto3,enum=anduril.entitymanager.v1.Deletable" json:"deletable,omitempty"`
	// Indicates the Entity should be egressed to external sources.
	// Integrations choose how the egressing happens (e.g. if an Entity needs fuzzing).
	Egressable *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=egressable,proto3" json:"egressable,omitempty"`
	// A signal of arbitrary importance such that the entity should be globally marked for all users
	Starred *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=starred,proto3" json:"starred,omitempty"`
}

func (x *Indicators) Reset() {
	*x = Indicators{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Indicators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Indicators) ProtoMessage() {}

func (x *Indicators) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Indicators.ProtoReflect.Descriptor instead.
func (*Indicators) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{6}
}

func (x *Indicators) GetSimulated() *wrapperspb.BoolValue {
	if x != nil {
		return x.Simulated
	}
	return nil
}

func (x *Indicators) GetExercise() *wrapperspb.BoolValue {
	if x != nil {
		return x.Exercise
	}
	return nil
}

func (x *Indicators) GetEmergency() *wrapperspb.BoolValue {
	if x != nil {
		return x.Emergency
	}
	return nil
}

func (x *Indicators) GetC2() *wrapperspb.BoolValue {
	if x != nil {
		return x.C2
	}
	return nil
}

func (x *Indicators) GetDeletable() Deletable {
	if x != nil {
		return x.Deletable
	}
	return Deletable_DELETABLE_INVALID
}

func (x *Indicators) GetEgressable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Egressable
	}
	return nil
}

func (x *Indicators) GetStarred() *wrapperspb.BoolValue {
	if x != nil {
		return x.Starred
	}
	return nil
}

// Metadata about entity overrides present.
type Overrides struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Override []*Override `protobuf:"bytes,2,rep,name=override,proto3" json:"override,omitempty"`
	// Deprecated: do not use
	//
	// Deprecated: Marked as deprecated in anduril/entitymanager/v1/entity.pub.proto.
	Provenance []*OverrideProvenance `protobuf:"bytes,1,rep,name=provenance,proto3" json:"provenance,omitempty"`
}

func (x *Overrides) Reset() {
	*x = Overrides{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Overrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Overrides) ProtoMessage() {}

func (x *Overrides) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Overrides.ProtoReflect.Descriptor instead.
func (*Overrides) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{7}
}

func (x *Overrides) GetOverride() []*Override {
	if x != nil {
		return x.Override
	}
	return nil
}

// Deprecated: Marked as deprecated in anduril/entitymanager/v1/entity.pub.proto.
func (x *Overrides) GetProvenance() []*OverrideProvenance {
	if x != nil {
		return x.Provenance
	}
	return nil
}

// Details about an override. Last write wins.
type Override struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// override request id for an override request
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// proto field path which is the string representation of a field.
	// example: correlated.primary_entity_id would be primary_entity_id in correlated component
	FieldPath string `protobuf:"bytes,2,opt,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	// new field value corresponding to field path. In the shape of an empty entity with only the changed value.
	// example: entity: { mil_view: { disposition: Disposition_DISPOSITION_HOSTILE } }
	MaskedFieldValue *Entity `protobuf:"bytes,3,opt,name=masked_field_value,json=maskedFieldValue,proto3" json:"masked_field_value,omitempty"`
	// status of the override
	Status     OverrideStatus `protobuf:"varint,4,opt,name=status,proto3,enum=anduril.entitymanager.v1.OverrideStatus" json:"status,omitempty"`
	Provenance *Provenance    `protobuf:"bytes,5,opt,name=provenance,proto3" json:"provenance,omitempty"`
	// The type of the override, defined by the stage of the entity lifecycle that the entity was in when the override
	// was requested.
	Type OverrideType `protobuf:"varint,6,opt,name=type,proto3,enum=anduril.entitymanager.v1.OverrideType" json:"type,omitempty"`
	// Timestamp of the override request. The timestamp is generated by the Entity Manager instance that receives the request.
	RequestTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=request_timestamp,json=requestTimestamp,proto3" json:"request_timestamp,omitempty"`
}

func (x *Override) Reset() {
	*x = Override{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Override) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Override) ProtoMessage() {}

func (x *Override) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Override.ProtoReflect.Descriptor instead.
func (*Override) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{8}
}

func (x *Override) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *Override) GetFieldPath() string {
	if x != nil {
		return x.FieldPath
	}
	return ""
}

func (x *Override) GetMaskedFieldValue() *Entity {
	if x != nil {
		return x.MaskedFieldValue
	}
	return nil
}

func (x *Override) GetStatus() OverrideStatus {
	if x != nil {
		return x.Status
	}
	return OverrideStatus_OVERRIDE_STATUS_INVALID
}

func (x *Override) GetProvenance() *Provenance {
	if x != nil {
		return x.Provenance
	}
	return nil
}

func (x *Override) GetType() OverrideType {
	if x != nil {
		return x.Type
	}
	return OverrideType_OVERRIDE_TYPE_INVALID
}

func (x *Override) GetRequestTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestTimestamp
	}
	return nil
}

// The provenance of a particular override within the entity.
//
// Deprecated: Marked as deprecated in anduril/entitymanager/v1/entity.pub.proto.
type OverrideProvenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// proto field path which is the string representation of a field.
	// example: correlated.primary_entity_id would be primary_entity_id in correlated component
	FieldPath string `protobuf:"bytes,1,opt,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	// Deprecated: do not use
	//
	// Deprecated: Marked as deprecated in anduril/entitymanager/v1/entity.pub.proto.
	SourceId   string      `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	Provenance *Provenance `protobuf:"bytes,3,opt,name=provenance,proto3" json:"provenance,omitempty"`
}

func (x *OverrideProvenance) Reset() {
	*x = OverrideProvenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverrideProvenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverrideProvenance) ProtoMessage() {}

func (x *OverrideProvenance) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverrideProvenance.ProtoReflect.Descriptor instead.
func (*OverrideProvenance) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{9}
}

func (x *OverrideProvenance) GetFieldPath() string {
	if x != nil {
		return x.FieldPath
	}
	return ""
}

// Deprecated: Marked as deprecated in anduril/entitymanager/v1/entity.pub.proto.
func (x *OverrideProvenance) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *OverrideProvenance) GetProvenance() *Provenance {
	if x != nil {
		return x.Provenance
	}
	return nil
}

// A component that references the primary original data source. For example, this would allow the original NITF file
// data that was ingested to be retrieved.
type OriginalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL is a reference to the data's location so it can be retrieved after being converted to an entity.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Deprecated: Marked as deprecated in anduril/entitymanager/v1/entity.pub.proto.
	Tle *OriginalData_TLE `protobuf:"bytes,2,opt,name=tle,proto3" json:"tle,omitempty"`
}

func (x *OriginalData) Reset() {
	*x = OriginalData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OriginalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginalData) ProtoMessage() {}

func (x *OriginalData) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginalData.ProtoReflect.Descriptor instead.
func (*OriginalData) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{10}
}

func (x *OriginalData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Deprecated: Marked as deprecated in anduril/entitymanager/v1/entity.pub.proto.
func (x *OriginalData) GetTle() *OriginalData_TLE {
	if x != nil {
		return x.Tle
	}
	return nil
}

// An alternate id for an Entity.
type AlternateId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// deprecated in favor of type
	//
	// Deprecated: Marked as deprecated in anduril/entitymanager/v1/entity.pub.proto.
	Source string    `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Id     string    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Type   AltIdType `protobuf:"varint,3,opt,name=type,proto3,enum=anduril.entitymanager.v1.AltIdType" json:"type,omitempty"`
}

func (x *AlternateId) Reset() {
	*x = AlternateId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlternateId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlternateId) ProtoMessage() {}

func (x *AlternateId) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlternateId.ProtoReflect.Descriptor instead.
func (*AlternateId) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{11}
}

// Deprecated: Marked as deprecated in anduril/entitymanager/v1/entity.pub.proto.
func (x *AlternateId) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *AlternateId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AlternateId) GetType() AltIdType {
	if x != nil {
		return x.Type
	}
	return AltIdType_ALT_ID_TYPE_INVALID
}

// Visual details associated with the display of an entity in the client.
type VisualDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The range rings to display around an entity.
	RangeRings *RangeRings `protobuf:"bytes,1,opt,name=range_rings,json=rangeRings,proto3" json:"range_rings,omitempty"`
	// Control the operator's ability to interact with the entity on the UI (disable hover/click on map, etc.)
	// Not a security/access flag
	InteractivityMode InteractivityMode `protobuf:"varint,2,opt,name=interactivity_mode,json=interactivityMode,proto3,enum=anduril.entitymanager.v1.InteractivityMode" json:"interactivity_mode,omitempty"`
}

func (x *VisualDetails) Reset() {
	*x = VisualDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisualDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisualDetails) ProtoMessage() {}

func (x *VisualDetails) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisualDetails.ProtoReflect.Descriptor instead.
func (*VisualDetails) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{12}
}

func (x *VisualDetails) GetRangeRings() *RangeRings {
	if x != nil {
		return x.RangeRings
	}
	return nil
}

func (x *VisualDetails) GetInteractivityMode() InteractivityMode {
	if x != nil {
		return x.InteractivityMode
	}
	return InteractivityMode_INTERACTIVITY_MODE_INVALID
}

// Range rings allow visual assessment of map distance at varying zoom levels.
type RangeRings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minimum range ring distance, specified in meters.
	MinDistanceM *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=min_distance_m,json=minDistanceM,proto3" json:"min_distance_m,omitempty"`
	// The maximum range ring distance, specified in meters.
	MaxDistanceM *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=max_distance_m,json=maxDistanceM,proto3" json:"max_distance_m,omitempty"`
	// The count of range rings.
	RingCount uint32 `protobuf:"varint,3,opt,name=ring_count,json=ringCount,proto3" json:"ring_count,omitempty"`
}

func (x *RangeRings) Reset() {
	*x = RangeRings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeRings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeRings) ProtoMessage() {}

func (x *RangeRings) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeRings.ProtoReflect.Descriptor instead.
func (*RangeRings) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{13}
}

func (x *RangeRings) GetMinDistanceM() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MinDistanceM
	}
	return nil
}

func (x *RangeRings) GetMaxDistanceM() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxDistanceM
	}
	return nil
}

func (x *RangeRings) GetRingCount() uint32 {
	if x != nil {
		return x.RingCount
	}
	return 0
}

// If present, signifies the entity can participate in collaborative autonomous teaming.
// Any status about team membership will be reported here.
type TeamStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TeamStatus) Reset() {
	*x = TeamStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamStatus) ProtoMessage() {}

func (x *TeamStatus) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamStatus.ProtoReflect.Descriptor instead.
func (*TeamStatus) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{14}
}

// A TLE is a space industry standard for representing the characteristics of an object on orbit.
// It is composed of two lines that are each a fixed width of 69 characters.
//
// Deprecated: Marked as deprecated in anduril/entitymanager/v1/entity.pub.proto.
type OriginalData_TLE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line1 string `protobuf:"bytes,1,opt,name=line1,proto3" json:"line1,omitempty"`
	Line2 string `protobuf:"bytes,2,opt,name=line2,proto3" json:"line2,omitempty"`
}

func (x *OriginalData_TLE) Reset() {
	*x = OriginalData_TLE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OriginalData_TLE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginalData_TLE) ProtoMessage() {}

func (x *OriginalData_TLE) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginalData_TLE.ProtoReflect.Descriptor instead.
func (*OriginalData_TLE) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{10, 0}
}

func (x *OriginalData_TLE) GetLine1() string {
	if x != nil {
		return x.Line1
	}
	return ""
}

func (x *OriginalData_TLE) GetLine2() string {
	if x != nil {
		return x.Line2
	}
	return ""
}

var File_anduril_entitymanager_v1_entity_pub_proto protoreflect.FileDescriptor

var file_anduril_entitymanager_v1_entity_pub_proto_rawDesc = []byte{
	0x0a, 0x29, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x31, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x75, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x75, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2b, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x70, 0x75,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x70,
	0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x75,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x34, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x22, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x76,
	0x32, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x15, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x6f, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x14, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e,
	0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x63, 0x65,
	0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x0a,
	0x67, 0x65, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x50,
	0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x67, 0x65, 0x6f, 0x70,
	0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x67, 0x65, 0x6f, 0x5f, 0x73, 0x68,
	0x61, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x08, 0x67,
	0x65, 0x6f, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x0a, 0x67, 0x65, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3b,
	0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x0a, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c,
	0x0a, 0x08, 0x6d, 0x69, 0x6c, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6c, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x07, 0x6d, 0x69, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x12, 0x3e, 0x0a, 0x08,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x52, 0x08, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x3b, 0x0a, 0x07,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73,
	0x52, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52,
	0x08, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x44, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x09,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x4b, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x0f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x38, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x57, 0x0a, 0x11, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x59, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x4d, 0x0a, 0x0d, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x76, 0x69, 0x73,
	0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x73,
	0x75, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0d, 0x76, 0x69, 0x73, 0x75,
	0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x4b, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x41, 0x0a, 0x09,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x38, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x4b, 0x0a, 0x0d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a,
	0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x05, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x62, 0x69, 0x74, 0x52, 0x05, 0x6f,
	0x72, 0x62, 0x69, 0x74, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x4a, 0x04, 0x08, 0x1c, 0x10, 0x1d,
	0x4a, 0x04, 0x08, 0x23, 0x10, 0x24, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x48, 0x0a, 0x08,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x22, 0x73, 0x0a, 0x07, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0d,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x49, 0x64, 0x42, 0x03, 0xc8, 0x3e, 0x01, 0x52,
	0x0c, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xc8, 0x3e, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xea, 0x04, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x15, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0b,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x48, 0x69, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x11, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x4c, 0x0a,
	0x0e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x72,
	0x61, 0x64, 0x61, 0x72, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x61, 0x64, 0x61, 0x72, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x15, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x6e, 0x65, 0x4f, 0x66, 0x42, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6c, 0x69, 0x6e,
	0x65, 0x4f, 0x66, 0x42, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09,
	0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x02, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x48, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x03, 0x0a, 0x0a, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x69, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x65,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x65, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2a, 0x0a, 0x02, 0x63, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x63,
	0x32, 0x12, 0x41, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xc8, 0x3e, 0x01, 0x52, 0x0a, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x03, 0xc8, 0x3e, 0x01, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64,
	0x22, 0x9d, 0x01, 0x0a, 0x09, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x3e,
	0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x50,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0xa5, 0x03, 0x0a, 0x08, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x12, 0x6d,
	0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x6d, 0x61, 0x73, 0x6b, 0x65,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x47, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x9e, 0x01, 0x0a, 0x12, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f,
	0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x44, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x99, 0x01, 0x0a, 0x0c, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x40, 0x0a, 0x03,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x54, 0x4c, 0x45, 0x42, 0x02, 0x18, 0x01, 0x52, 0x03, 0x74, 0x6c, 0x65, 0x1a, 0x35,
	0x0a, 0x03, 0x54, 0x4c, 0x45, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6e, 0x65, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65,
	0x32, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x77, 0x0a, 0x0b, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x74, 0x49, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x03, 0xd0, 0x3e, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb7,
	0x01, 0x0a, 0x0d, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x4a, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x03, 0xc8, 0x3e, 0x01,
	0x52, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5a, 0x0a, 0x12,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x0a, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d,
	0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x12, 0x42, 0x0a, 0x0e, 0x6d,
	0x61, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x0c,
	0x0a, 0x0a, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x62, 0x0a, 0x09,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x52,
	0x55, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x03,
	0x2a, 0x7b, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x5f, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x02, 0x42, 0xfc, 0x01,
	0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2d, 0x67, 0x6f, 0x2f,
	0x73, 0x72, 0x63, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41,
	0x45, 0x58, 0xaa, 0x02, 0x18, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x18,
	0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x5c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x24, 0x41, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x5c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x1a, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x3a, 0x3a, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_anduril_entitymanager_v1_entity_pub_proto_rawDescOnce sync.Once
	file_anduril_entitymanager_v1_entity_pub_proto_rawDescData = file_anduril_entitymanager_v1_entity_pub_proto_rawDesc
)

func file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP() []byte {
	file_anduril_entitymanager_v1_entity_pub_proto_rawDescOnce.Do(func() {
		file_anduril_entitymanager_v1_entity_pub_proto_rawDescData = protoimpl.X.CompressGZIP(file_anduril_entitymanager_v1_entity_pub_proto_rawDescData)
	})
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescData
}

var file_anduril_entitymanager_v1_entity_pub_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_anduril_entitymanager_v1_entity_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_anduril_entitymanager_v1_entity_pub_proto_goTypes = []any{
	(Deletable)(0),                 // 0: anduril.entitymanager.v1.Deletable
	(InteractivityMode)(0),         // 1: anduril.entitymanager.v1.InteractivityMode
	(*Entity)(nil),                 // 2: anduril.entitymanager.v1.Entity
	(*Entities)(nil),               // 3: anduril.entitymanager.v1.Entities
	(*Status)(nil),                 // 4: anduril.entitymanager.v1.Status
	(*Aliases)(nil),                // 5: anduril.entitymanager.v1.Aliases
	(*Tracked)(nil),                // 6: anduril.entitymanager.v1.Tracked
	(*Provenance)(nil),             // 7: anduril.entitymanager.v1.Provenance
	(*Indicators)(nil),             // 8: anduril.entitymanager.v1.Indicators
	(*Overrides)(nil),              // 9: anduril.entitymanager.v1.Overrides
	(*Override)(nil),               // 10: anduril.entitymanager.v1.Override
	(*OverrideProvenance)(nil),     // 11: anduril.entitymanager.v1.OverrideProvenance
	(*OriginalData)(nil),           // 12: anduril.entitymanager.v1.OriginalData
	(*AlternateId)(nil),            // 13: anduril.entitymanager.v1.AlternateId
	(*VisualDetails)(nil),          // 14: anduril.entitymanager.v1.VisualDetails
	(*RangeRings)(nil),             // 15: anduril.entitymanager.v1.RangeRings
	(*TeamStatus)(nil),             // 16: anduril.entitymanager.v1.TeamStatus
	(*OriginalData_TLE)(nil),       // 17: anduril.entitymanager.v1.OriginalData.TLE
	(*timestamppb.Timestamp)(nil),  // 18: google.protobuf.Timestamp
	(*Location)(nil),               // 19: anduril.entitymanager.v1.Location
	(*LocationUncertainty)(nil),    // 20: anduril.entitymanager.v1.LocationUncertainty
	(*GeoPolygon)(nil),             // 21: anduril.entitymanager.v1.GeoPolygon
	(*GeoShape)(nil),               // 22: anduril.entitymanager.v1.GeoShape
	(*GeoDetails)(nil),             // 23: anduril.entitymanager.v1.GeoDetails
	(*Correlated)(nil),             // 24: anduril.entitymanager.v1.Correlated
	(*MilView)(nil),                // 25: anduril.entitymanager.v1.MilView
	(*Ontology)(nil),               // 26: anduril.entitymanager.v1.Ontology
	(*Sensors)(nil),                // 27: anduril.entitymanager.v1.Sensors
	(*Payloads)(nil),               // 28: anduril.entitymanager.v1.Payloads
	(*PowerState)(nil),             // 29: anduril.entitymanager.v1.PowerState
	(*TargetPriority)(nil),         // 30: anduril.entitymanager.v1.TargetPriority
	(*Signal)(nil),                 // 31: anduril.entitymanager.v1.Signal
	(*TransponderCodes)(nil),       // 32: anduril.entitymanager.v1.TransponderCodes
	(*ContactDetails)(nil),         // 33: anduril.entitymanager.v1.ContactDetails
	(*Classification)(nil),         // 34: anduril.entitymanager.v1.Classification
	(*v2.TaskCatalog)(nil),         // 35: anduril.tasks.v2.TaskCatalog
	(*Media)(nil),                  // 36: anduril.entitymanager.v1.Media
	(*Relationships)(nil),          // 37: anduril.entitymanager.v1.Relationships
	(*Dimensions)(nil),             // 38: anduril.entitymanager.v1.Dimensions
	(*RouteDetails)(nil),           // 39: anduril.entitymanager.v1.RouteDetails
	(*Schedules)(nil),              // 40: anduril.entitymanager.v1.Schedules
	(*Health)(nil),                 // 41: anduril.entitymanager.v1.Health
	(*GroupDetails)(nil),           // 42: anduril.entitymanager.v1.GroupDetails
	(*Supplies)(nil),               // 43: anduril.entitymanager.v1.Supplies
	(*Orbit)(nil),                  // 44: anduril.entitymanager.v1.Orbit
	(*wrapperspb.Int32Value)(nil),  // 45: google.protobuf.Int32Value
	(*UInt32Range)(nil),            // 46: anduril.entitymanager.v1.UInt32Range
	(*wrapperspb.DoubleValue)(nil), // 47: google.protobuf.DoubleValue
	(*LineOfBearing)(nil),          // 48: anduril.entitymanager.v1.LineOfBearing
	(Source)(0),                    // 49: anduril.entitymanager.v1.Source
	(*wrapperspb.BoolValue)(nil),   // 50: google.protobuf.BoolValue
	(OverrideStatus)(0),            // 51: anduril.entitymanager.v1.OverrideStatus
	(OverrideType)(0),              // 52: anduril.entitymanager.v1.OverrideType
	(AltIdType)(0),                 // 53: anduril.entitymanager.v1.AltIdType
}
var file_anduril_entitymanager_v1_entity_pub_proto_depIdxs = []int32{
	18, // 0: anduril.entitymanager.v1.Entity.created_time:type_name -> google.protobuf.Timestamp
	18, // 1: anduril.entitymanager.v1.Entity.expiry_time:type_name -> google.protobuf.Timestamp
	4,  // 2: anduril.entitymanager.v1.Entity.status:type_name -> anduril.entitymanager.v1.Status
	19, // 3: anduril.entitymanager.v1.Entity.location:type_name -> anduril.entitymanager.v1.Location
	20, // 4: anduril.entitymanager.v1.Entity.location_uncertainty:type_name -> anduril.entitymanager.v1.LocationUncertainty
	21, // 5: anduril.entitymanager.v1.Entity.geopolygon:type_name -> anduril.entitymanager.v1.GeoPolygon
	22, // 6: anduril.entitymanager.v1.Entity.geo_shape:type_name -> anduril.entitymanager.v1.GeoShape
	23, // 7: anduril.entitymanager.v1.Entity.geo_details:type_name -> anduril.entitymanager.v1.GeoDetails
	5,  // 8: anduril.entitymanager.v1.Entity.aliases:type_name -> anduril.entitymanager.v1.Aliases
	6,  // 9: anduril.entitymanager.v1.Entity.tracked:type_name -> anduril.entitymanager.v1.Tracked
	24, // 10: anduril.entitymanager.v1.Entity.correlated:type_name -> anduril.entitymanager.v1.Correlated
	25, // 11: anduril.entitymanager.v1.Entity.mil_view:type_name -> anduril.entitymanager.v1.MilView
	26, // 12: anduril.entitymanager.v1.Entity.ontology:type_name -> anduril.entitymanager.v1.Ontology
	27, // 13: anduril.entitymanager.v1.Entity.sensors:type_name -> anduril.entitymanager.v1.Sensors
	28, // 14: anduril.entitymanager.v1.Entity.payloads:type_name -> anduril.entitymanager.v1.Payloads
	29, // 15: anduril.entitymanager.v1.Entity.power_state:type_name -> anduril.entitymanager.v1.PowerState
	7,  // 16: anduril.entitymanager.v1.Entity.provenance:type_name -> anduril.entitymanager.v1.Provenance
	9,  // 17: anduril.entitymanager.v1.Entity.overrides:type_name -> anduril.entitymanager.v1.Overrides
	8,  // 18: anduril.entitymanager.v1.Entity.indicators:type_name -> anduril.entitymanager.v1.Indicators
	12, // 19: anduril.entitymanager.v1.Entity.original_data:type_name -> anduril.entitymanager.v1.OriginalData
	30, // 20: anduril.entitymanager.v1.Entity.target_priority:type_name -> anduril.entitymanager.v1.TargetPriority
	31, // 21: anduril.entitymanager.v1.Entity.signal:type_name -> anduril.entitymanager.v1.Signal
	32, // 22: anduril.entitymanager.v1.Entity.transponder_codes:type_name -> anduril.entitymanager.v1.TransponderCodes
	33, // 23: anduril.entitymanager.v1.Entity.contact:type_name -> anduril.entitymanager.v1.ContactDetails
	34, // 24: anduril.entitymanager.v1.Entity.data_classification:type_name -> anduril.entitymanager.v1.Classification
	35, // 25: anduril.entitymanager.v1.Entity.task_catalog:type_name -> anduril.tasks.v2.TaskCatalog
	36, // 26: anduril.entitymanager.v1.Entity.media:type_name -> anduril.entitymanager.v1.Media
	37, // 27: anduril.entitymanager.v1.Entity.relationships:type_name -> anduril.entitymanager.v1.Relationships
	14, // 28: anduril.entitymanager.v1.Entity.visual_details:type_name -> anduril.entitymanager.v1.VisualDetails
	38, // 29: anduril.entitymanager.v1.Entity.dimensions:type_name -> anduril.entitymanager.v1.Dimensions
	39, // 30: anduril.entitymanager.v1.Entity.route_details:type_name -> anduril.entitymanager.v1.RouteDetails
	40, // 31: anduril.entitymanager.v1.Entity.schedules:type_name -> anduril.entitymanager.v1.Schedules
	41, // 32: anduril.entitymanager.v1.Entity.health:type_name -> anduril.entitymanager.v1.Health
	42, // 33: anduril.entitymanager.v1.Entity.group_details:type_name -> anduril.entitymanager.v1.GroupDetails
	16, // 34: anduril.entitymanager.v1.Entity.team_status:type_name -> anduril.entitymanager.v1.TeamStatus
	43, // 35: anduril.entitymanager.v1.Entity.supplies:type_name -> anduril.entitymanager.v1.Supplies
	44, // 36: anduril.entitymanager.v1.Entity.orbit:type_name -> anduril.entitymanager.v1.Orbit
	2,  // 37: anduril.entitymanager.v1.Entities.entities:type_name -> anduril.entitymanager.v1.Entity
	13, // 38: anduril.entitymanager.v1.Aliases.alternate_ids:type_name -> anduril.entitymanager.v1.AlternateId
	45, // 39: anduril.entitymanager.v1.Tracked.track_quality_wrapper:type_name -> google.protobuf.Int32Value
	45, // 40: anduril.entitymanager.v1.Tracked.sensor_hits:type_name -> google.protobuf.Int32Value
	46, // 41: anduril.entitymanager.v1.Tracked.number_of_objects:type_name -> anduril.entitymanager.v1.UInt32Range
	27, // 42: anduril.entitymanager.v1.Tracked.sensor_details:type_name -> anduril.entitymanager.v1.Sensors
	47, // 43: anduril.entitymanager.v1.Tracked.radar_cross_section:type_name -> google.protobuf.DoubleValue
	18, // 44: anduril.entitymanager.v1.Tracked.last_measurement_time:type_name -> google.protobuf.Timestamp
	48, // 45: anduril.entitymanager.v1.Tracked.line_of_bearing:type_name -> anduril.entitymanager.v1.LineOfBearing
	49, // 46: anduril.entitymanager.v1.Provenance.source:type_name -> anduril.entitymanager.v1.Source
	18, // 47: anduril.entitymanager.v1.Provenance.source_update_time:type_name -> google.protobuf.Timestamp
	50, // 48: anduril.entitymanager.v1.Indicators.simulated:type_name -> google.protobuf.BoolValue
	50, // 49: anduril.entitymanager.v1.Indicators.exercise:type_name -> google.protobuf.BoolValue
	50, // 50: anduril.entitymanager.v1.Indicators.emergency:type_name -> google.protobuf.BoolValue
	50, // 51: anduril.entitymanager.v1.Indicators.c2:type_name -> google.protobuf.BoolValue
	0,  // 52: anduril.entitymanager.v1.Indicators.deletable:type_name -> anduril.entitymanager.v1.Deletable
	50, // 53: anduril.entitymanager.v1.Indicators.egressable:type_name -> google.protobuf.BoolValue
	50, // 54: anduril.entitymanager.v1.Indicators.starred:type_name -> google.protobuf.BoolValue
	10, // 55: anduril.entitymanager.v1.Overrides.override:type_name -> anduril.entitymanager.v1.Override
	11, // 56: anduril.entitymanager.v1.Overrides.provenance:type_name -> anduril.entitymanager.v1.OverrideProvenance
	2,  // 57: anduril.entitymanager.v1.Override.masked_field_value:type_name -> anduril.entitymanager.v1.Entity
	51, // 58: anduril.entitymanager.v1.Override.status:type_name -> anduril.entitymanager.v1.OverrideStatus
	7,  // 59: anduril.entitymanager.v1.Override.provenance:type_name -> anduril.entitymanager.v1.Provenance
	52, // 60: anduril.entitymanager.v1.Override.type:type_name -> anduril.entitymanager.v1.OverrideType
	18, // 61: anduril.entitymanager.v1.Override.request_timestamp:type_name -> google.protobuf.Timestamp
	7,  // 62: anduril.entitymanager.v1.OverrideProvenance.provenance:type_name -> anduril.entitymanager.v1.Provenance
	17, // 63: anduril.entitymanager.v1.OriginalData.tle:type_name -> anduril.entitymanager.v1.OriginalData.TLE
	53, // 64: anduril.entitymanager.v1.AlternateId.type:type_name -> anduril.entitymanager.v1.AltIdType
	15, // 65: anduril.entitymanager.v1.VisualDetails.range_rings:type_name -> anduril.entitymanager.v1.RangeRings
	1,  // 66: anduril.entitymanager.v1.VisualDetails.interactivity_mode:type_name -> anduril.entitymanager.v1.InteractivityMode
	47, // 67: anduril.entitymanager.v1.RangeRings.min_distance_m:type_name -> google.protobuf.DoubleValue
	47, // 68: anduril.entitymanager.v1.RangeRings.max_distance_m:type_name -> google.protobuf.DoubleValue
	69, // [69:69] is the sub-list for method output_type
	69, // [69:69] is the sub-list for method input_type
	69, // [69:69] is the sub-list for extension type_name
	69, // [69:69] is the sub-list for extension extendee
	0,  // [0:69] is the sub-list for field type_name
}

func init() { file_anduril_entitymanager_v1_entity_pub_proto_init() }
func file_anduril_entitymanager_v1_entity_pub_proto_init() {
	if File_anduril_entitymanager_v1_entity_pub_proto != nil {
		return
	}
	file_anduril_entitymanager_v1_classification_pub_proto_init()
	file_anduril_entitymanager_v1_contact_details_pub_proto_init()
	file_anduril_entitymanager_v1_correlations_pub_proto_init()
	file_anduril_entitymanager_v1_dimensions_pub_proto_init()
	file_anduril_entitymanager_v1_geoentity_pub_proto_init()
	file_anduril_entitymanager_v1_group_pub_proto_init()
	file_anduril_entitymanager_v1_health_status_pub_proto_init()
	file_anduril_entitymanager_v1_location_pub_proto_init()
	file_anduril_entitymanager_v1_media_pub_proto_init()
	file_anduril_entitymanager_v1_ontology_pub_proto_init()
	file_anduril_entitymanager_v1_options_pub_proto_init()
	file_anduril_entitymanager_v1_orbit_pub_proto_init()
	file_anduril_entitymanager_v1_payloads_pub_proto_init()
	file_anduril_entitymanager_v1_power_pub_proto_init()
	file_anduril_entitymanager_v1_relationship_pub_proto_init()
	file_anduril_entitymanager_v1_route_details_pub_proto_init()
	file_anduril_entitymanager_v1_schedule_pub_proto_init()
	file_anduril_entitymanager_v1_sensors_pub_proto_init()
	file_anduril_entitymanager_v1_signal_pub_proto_init()
	file_anduril_entitymanager_v1_supplies_pub_proto_init()
	file_anduril_entitymanager_v1_target_priority_pub_proto_init()
	file_anduril_entitymanager_v1_transponder_codes_pub_proto_init()
	file_anduril_entitymanager_v1_types_pub_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Entities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Aliases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Tracked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Provenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Indicators); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Overrides); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Override); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*OverrideProvenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*OriginalData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*AlternateId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*VisualDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*RangeRings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*TeamStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*OriginalData_TLE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_anduril_entitymanager_v1_entity_pub_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_anduril_entitymanager_v1_entity_pub_proto_goTypes,
		DependencyIndexes: file_anduril_entitymanager_v1_entity_pub_proto_depIdxs,
		EnumInfos:         file_anduril_entitymanager_v1_entity_pub_proto_enumTypes,
		MessageInfos:      file_anduril_entitymanager_v1_entity_pub_proto_msgTypes,
	}.Build()
	File_anduril_entitymanager_v1_entity_pub_proto = out.File
	file_anduril_entitymanager_v1_entity_pub_proto_rawDesc = nil
	file_anduril_entitymanager_v1_entity_pub_proto_goTypes = nil
	file_anduril_entitymanager_v1_entity_pub_proto_depIdxs = nil
}
