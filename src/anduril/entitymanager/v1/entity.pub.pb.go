// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: anduril/entitymanager/v1/entity.pub.proto

package entitymanagerv1

import (
	v2 "github.com/anduril/lattice-sdk-go/src/anduril/tasks/v2"
	_type "github.com/anduril/lattice-sdk-go/src/anduril/type"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of correlation indicating how it was made.
type CorrelationType int32

const (
	CorrelationType_CORRELATION_TYPE_INVALID CorrelationType = 0
	// The correlation was made manually by a human.
	// Manual is higher precedence than automated assuming the same replication mode.
	CorrelationType_CORRELATION_TYPE_MANUAL CorrelationType = 1
	// The correlation was automatically made by a service or some other automated process.
	// Automated is lower precedence than manual assuming the same replication mode.
	CorrelationType_CORRELATION_TYPE_AUTOMATED CorrelationType = 2
)

// Enum value maps for CorrelationType.
var (
	CorrelationType_name = map[int32]string{
		0: "CORRELATION_TYPE_INVALID",
		1: "CORRELATION_TYPE_MANUAL",
		2: "CORRELATION_TYPE_AUTOMATED",
	}
	CorrelationType_value = map[string]int32{
		"CORRELATION_TYPE_INVALID":   0,
		"CORRELATION_TYPE_MANUAL":    1,
		"CORRELATION_TYPE_AUTOMATED": 2,
	}
)

func (x CorrelationType) Enum() *CorrelationType {
	p := new(CorrelationType)
	*p = x
	return p
}

func (x CorrelationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CorrelationType) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_entity_pub_proto_enumTypes[0].Descriptor()
}

func (CorrelationType) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_entity_pub_proto_enumTypes[0]
}

func (x CorrelationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CorrelationType.Descriptor instead.
func (CorrelationType) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{0}
}

// The replication mode of the correlation indicating how the correlation will be replication to
// other nodes in the mesh.
type CorrelationReplicationMode int32

const (
	CorrelationReplicationMode_CORRELATION_REPLICATION_MODE_INVALID CorrelationReplicationMode = 0
	// The correlation is local only to the originating node and will not be distributed to other
	// nodes in the mesh. In the case of conflicts, this correlation will override ones coming from
	// other nodes. Local is always higher precedence than global regardless of the correlation type.
	CorrelationReplicationMode_CORRELATION_REPLICATION_MODE_LOCAL CorrelationReplicationMode = 1
	// The correlation is distributed globally across all nodes in the mesh. Because an entity can
	// only be part of one correlation, this is based on last-write-wins semantics, however, the
	// correlation will also be stored locally in the originating node preventing any overrides.
	// Global is always lower precedence than local regardless of the correlation type.
	CorrelationReplicationMode_CORRELATION_REPLICATION_MODE_GLOBAL CorrelationReplicationMode = 2
)

// Enum value maps for CorrelationReplicationMode.
var (
	CorrelationReplicationMode_name = map[int32]string{
		0: "CORRELATION_REPLICATION_MODE_INVALID",
		1: "CORRELATION_REPLICATION_MODE_LOCAL",
		2: "CORRELATION_REPLICATION_MODE_GLOBAL",
	}
	CorrelationReplicationMode_value = map[string]int32{
		"CORRELATION_REPLICATION_MODE_INVALID": 0,
		"CORRELATION_REPLICATION_MODE_LOCAL":   1,
		"CORRELATION_REPLICATION_MODE_GLOBAL":  2,
	}
)

func (x CorrelationReplicationMode) Enum() *CorrelationReplicationMode {
	p := new(CorrelationReplicationMode)
	*p = x
	return p
}

func (x CorrelationReplicationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CorrelationReplicationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_entity_pub_proto_enumTypes[1].Descriptor()
}

func (CorrelationReplicationMode) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_entity_pub_proto_enumTypes[1]
}

func (x CorrelationReplicationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CorrelationReplicationMode.Descriptor instead.
func (CorrelationReplicationMode) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{1}
}

// The entity object represents a single known object within the Lattice operational environment. It contains
// all data associated with the entity, such as its name, ID, and other relevant components.
type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Globally Unique Identifier (GUID) for your entity. If this field is empty, the Entity Manager API
	// automatically generates an ID when it creates the entity.
	EntityId string `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	// A human-readable entity description that's helpful for debugging purposes and human
	// traceability. If this field is empty, the Entity Manager API generates one for you.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Indicates the entity is active and should have a lifecycle state of CREATE or UPDATE.
	// Set this field to true when publishing an entity.
	IsLive bool `protobuf:"varint,3,opt,name=is_live,json=isLive,proto3" json:"is_live,omitempty"`
	// The time when the entity was first known to the entity producer. If this field is empty, the Entity Manager API uses the
	// current timestamp of when the entity is first received.
	// For example, when a drone is first powered on, it might report its startup time as the created time.
	// The timestamp doesn't change for the lifetime of an entity.
	CreatedTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// Future time that expires an entity and updates the is_live flag.
	// For entities that are constantly updating, the expiry time also updates.
	// In some cases, this may differ from is_live.
	// Example: Entities with tasks exported to an external system must remain
	// active even after they expire.
	// This field is required when publishing a prepopulated entity.
	// The expiry time must be in the future, but less than 30 days from the current time.
	ExpiryTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	// Human-readable descriptions of what the entity is currently doing.
	Status *Status `protobuf:"bytes,19,opt,name=status,proto3" json:"status,omitempty"`
	// Geospatial data related to the entity, including its position, kinematics, and orientation.
	Location *Location `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	// Indicates uncertainty of the entity's position and kinematics.
	LocationUncertainty *LocationUncertainty `protobuf:"bytes,15,opt,name=location_uncertainty,json=locationUncertainty,proto3" json:"location_uncertainty,omitempty"`
	// Geospatial representation of the entity, including entities that cover an area rather than a fixed point.
	GeoShape *GeoShape `protobuf:"bytes,23,opt,name=geo_shape,json=geoShape,proto3" json:"geo_shape,omitempty"`
	// Additional details on what the geospatial area or point represents, along with visual display details.
	GeoDetails *GeoDetails `protobuf:"bytes,24,opt,name=geo_details,json=geoDetails,proto3" json:"geo_details,omitempty"`
	// Entity name displayed in the Lattice UI side panel. Also includes identifiers that other systems can use to reference the same entity.
	Aliases *Aliases `protobuf:"bytes,7,opt,name=aliases,proto3" json:"aliases,omitempty"`
	// If this entity is tracked by another entity, this component contains data related to how it's being tracked.
	Tracked *Tracked `protobuf:"bytes,8,opt,name=tracked,proto3" json:"tracked,omitempty"`
	// If this entity has been correlated or decorrelated to another one, this component contains information on the correlation or decorrelation.
	Correlation *Correlation `protobuf:"bytes,47,opt,name=correlation,proto3" json:"correlation,omitempty"`
	// View of the entity.
	MilView *MilView `protobuf:"bytes,10,opt,name=mil_view,json=milView,proto3" json:"mil_view,omitempty"`
	// A standardized representation of the entity.
	Ontology *Ontology `protobuf:"bytes,11,opt,name=ontology,proto3" json:"ontology,omitempty"`
	// Details an entity's available sensors.
	Sensors *Sensors `protobuf:"bytes,20,opt,name=sensors,proto3" json:"sensors,omitempty"`
	// Details an entity's available payloads.
	Payloads *Payloads `protobuf:"bytes,21,opt,name=payloads,proto3" json:"payloads,omitempty"`
	// Details the entity's power source.
	PowerState *PowerState `protobuf:"bytes,30,opt,name=power_state,json=powerState,proto3" json:"power_state,omitempty"`
	// The primary data source provenance for this entity.
	Provenance *Provenance `protobuf:"bytes,12,opt,name=provenance,proto3" json:"provenance,omitempty"`
	// Provenance of override data.
	Overrides *Overrides `protobuf:"bytes,13,opt,name=overrides,proto3" json:"overrides,omitempty"`
	// Describes an entity's specific characteristics and the operations that can be performed on the entity.
	// For example, "simulated" informs the operator that the entity is from a simulation, and "deletable"
	// informs the operator (and system) that the delete operation is valid against the entity.
	Indicators *Indicators `protobuf:"bytes,14,opt,name=indicators,proto3" json:"indicators,omitempty"`
	// The prioritization associated with an entity, such as if it's a threat or a high-value target.
	TargetPriority *TargetPriority `protobuf:"bytes,22,opt,name=target_priority,json=targetPriority,proto3" json:"target_priority,omitempty"`
	// Describes an entity's signal characteristics, primarily used when an entity is a signal of interest.
	Signal *Signal `protobuf:"bytes,25,opt,name=signal,proto3" json:"signal,omitempty"`
	// A message describing any transponder codes associated with Mode 1, 2, 3, 4, 5, S interrogations. These are related to ADS-B modes.
	TransponderCodes *TransponderCodes `protobuf:"bytes,26,opt,name=transponder_codes,json=transponderCodes,proto3" json:"transponder_codes,omitempty"`
	// Describes an entity's security classification levels at an overall classification level and on a per
	// field level.
	DataClassification *Classification `protobuf:"bytes,29,opt,name=data_classification,json=dataClassification,proto3" json:"data_classification,omitempty"`
	// A catalog of tasks that can be performed by an entity.
	TaskCatalog *v2.TaskCatalog `protobuf:"bytes,31,opt,name=task_catalog,json=taskCatalog,proto3" json:"task_catalog,omitempty"`
	// The relationships between this entity and other entities in the common operational picture (COP).
	Relationships *Relationships `protobuf:"bytes,33,opt,name=relationships,proto3" json:"relationships,omitempty"`
	// Visual details associated with the display of an entity in the client.
	VisualDetails *VisualDetails `protobuf:"bytes,34,opt,name=visual_details,json=visualDetails,proto3" json:"visual_details,omitempty"`
	// Physical dimensions of the entity.
	Dimensions *Dimensions `protobuf:"bytes,36,opt,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Additional information about an entity's route.
	RouteDetails *RouteDetails `protobuf:"bytes,37,opt,name=route_details,json=routeDetails,proto3" json:"route_details,omitempty"`
	// Schedules associated with this entity.
	Schedules *Schedules `protobuf:"bytes,38,opt,name=schedules,proto3" json:"schedules,omitempty"`
	// Health metrics or connection status reported by the entity.
	Health *Health `protobuf:"bytes,39,opt,name=health,proto3" json:"health,omitempty"`
	// Details for the group associated with this entity.
	GroupDetails *GroupDetails `protobuf:"bytes,40,opt,name=group_details,json=groupDetails,proto3" json:"group_details,omitempty"`
	// Contains relevant supply information for the entity, such as fuel.
	Supplies *Supplies `protobuf:"bytes,42,opt,name=supplies,proto3" json:"supplies,omitempty"`
	// Orbit information for space objects.
	Orbit *Orbit `protobuf:"bytes,46,opt,name=orbit,proto3" json:"orbit,omitempty"`
}

func (x *Entity) Reset() {
	*x = Entity{}
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{0}
}

func (x *Entity) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *Entity) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Entity) GetIsLive() bool {
	if x != nil {
		return x.IsLive
	}
	return false
}

func (x *Entity) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *Entity) GetExpiryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

func (x *Entity) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Entity) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Entity) GetLocationUncertainty() *LocationUncertainty {
	if x != nil {
		return x.LocationUncertainty
	}
	return nil
}

func (x *Entity) GetGeoShape() *GeoShape {
	if x != nil {
		return x.GeoShape
	}
	return nil
}

func (x *Entity) GetGeoDetails() *GeoDetails {
	if x != nil {
		return x.GeoDetails
	}
	return nil
}

func (x *Entity) GetAliases() *Aliases {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Entity) GetTracked() *Tracked {
	if x != nil {
		return x.Tracked
	}
	return nil
}

func (x *Entity) GetCorrelation() *Correlation {
	if x != nil {
		return x.Correlation
	}
	return nil
}

func (x *Entity) GetMilView() *MilView {
	if x != nil {
		return x.MilView
	}
	return nil
}

func (x *Entity) GetOntology() *Ontology {
	if x != nil {
		return x.Ontology
	}
	return nil
}

func (x *Entity) GetSensors() *Sensors {
	if x != nil {
		return x.Sensors
	}
	return nil
}

func (x *Entity) GetPayloads() *Payloads {
	if x != nil {
		return x.Payloads
	}
	return nil
}

func (x *Entity) GetPowerState() *PowerState {
	if x != nil {
		return x.PowerState
	}
	return nil
}

func (x *Entity) GetProvenance() *Provenance {
	if x != nil {
		return x.Provenance
	}
	return nil
}

func (x *Entity) GetOverrides() *Overrides {
	if x != nil {
		return x.Overrides
	}
	return nil
}

func (x *Entity) GetIndicators() *Indicators {
	if x != nil {
		return x.Indicators
	}
	return nil
}

func (x *Entity) GetTargetPriority() *TargetPriority {
	if x != nil {
		return x.TargetPriority
	}
	return nil
}

func (x *Entity) GetSignal() *Signal {
	if x != nil {
		return x.Signal
	}
	return nil
}

func (x *Entity) GetTransponderCodes() *TransponderCodes {
	if x != nil {
		return x.TransponderCodes
	}
	return nil
}

func (x *Entity) GetDataClassification() *Classification {
	if x != nil {
		return x.DataClassification
	}
	return nil
}

func (x *Entity) GetTaskCatalog() *v2.TaskCatalog {
	if x != nil {
		return x.TaskCatalog
	}
	return nil
}

func (x *Entity) GetRelationships() *Relationships {
	if x != nil {
		return x.Relationships
	}
	return nil
}

func (x *Entity) GetVisualDetails() *VisualDetails {
	if x != nil {
		return x.VisualDetails
	}
	return nil
}

func (x *Entity) GetDimensions() *Dimensions {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *Entity) GetRouteDetails() *RouteDetails {
	if x != nil {
		return x.RouteDetails
	}
	return nil
}

func (x *Entity) GetSchedules() *Schedules {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *Entity) GetHealth() *Health {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *Entity) GetGroupDetails() *GroupDetails {
	if x != nil {
		return x.GroupDetails
	}
	return nil
}

func (x *Entity) GetSupplies() *Supplies {
	if x != nil {
		return x.Supplies
	}
	return nil
}

func (x *Entity) GetOrbit() *Orbit {
	if x != nil {
		return x.Orbit
	}
	return nil
}

// Contains status of entities.
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A string that describes the activity that the entity is performing.
	// Examples include "RECONNAISSANCE", "INTERDICTION", "RETURN TO BASE (RTB)", "PREPARING FOR LAUNCH".
	PlatformActivity string `protobuf:"bytes,1,opt,name=platform_activity,json=platformActivity,proto3" json:"platform_activity,omitempty"`
	// A human-readable string that describes the role the entity is currently performing. E.g. "Team Member", "Commander".
	Role string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{1}
}

func (x *Status) GetPlatformActivity() string {
	if x != nil {
		return x.PlatformActivity
	}
	return ""
}

func (x *Status) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

// Available for any Entities with alternate ids in other systems.
type Aliases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlternateIds []*AlternateId `protobuf:"bytes,1,rep,name=alternate_ids,json=alternateIds,proto3" json:"alternate_ids,omitempty"`
	// The best available version of the entity's display name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Aliases) Reset() {
	*x = Aliases{}
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Aliases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aliases) ProtoMessage() {}

func (x *Aliases) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aliases.ProtoReflect.Descriptor instead.
func (*Aliases) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{2}
}

func (x *Aliases) GetAlternateIds() []*AlternateId {
	if x != nil {
		return x.AlternateIds
	}
	return nil
}

func (x *Aliases) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Available for Entities that are tracked.
type Tracked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Quality score, 0-15, nil if none
	TrackQualityWrapper *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=track_quality_wrapper,json=trackQualityWrapper,proto3" json:"track_quality_wrapper,omitempty"`
	// Sensor hits aggregation on the tracked entity.
	SensorHits *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=sensor_hits,json=sensorHits,proto3" json:"sensor_hits,omitempty"`
	// Estimated number of objects or units that are represented by this entity. Known as Strength in certain contexts (Link16)
	// if UpperBound == LowerBound; (strength = LowerBound)
	// If both UpperBound and LowerBound are defined; strength is between LowerBound and UpperBound (represented as string "Strength: 4-5")
	// If UpperBound is defined only (LowerBound unset), Strength ≤ UpperBound
	// If LowerBound is defined only (UpperBound unset), LowerBound ≤ Strength
	// 0 indicates unset.
	NumberOfObjects *UInt32Range `protobuf:"bytes,4,opt,name=number_of_objects,json=numberOfObjects,proto3" json:"number_of_objects,omitempty"`
	// The radar cross section (RCS) is a measure of how detectable an object is by radar. A large RCS indicates an object is more easily
	// detected. The unit is “decibels per square meter,” or dBsm
	RadarCrossSection *wrapperspb.DoubleValue `protobuf:"bytes,6,opt,name=radar_cross_section,json=radarCrossSection,proto3" json:"radar_cross_section,omitempty"`
	// Timestamp of the latest tracking measurement for this entity.
	LastMeasurementTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_measurement_time,json=lastMeasurementTime,proto3" json:"last_measurement_time,omitempty"`
	// The relative position of a track with respect to the entity that is tracking it. Used for tracks that do not yet have a 3D position.
	// For this entity (A), being tracked by some entity (B), this LineOfBearing would express a ray from B to A.
	LineOfBearing *LineOfBearing `protobuf:"bytes,9,opt,name=line_of_bearing,json=lineOfBearing,proto3" json:"line_of_bearing,omitempty"`
}

func (x *Tracked) Reset() {
	*x = Tracked{}
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tracked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tracked) ProtoMessage() {}

func (x *Tracked) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tracked.ProtoReflect.Descriptor instead.
func (*Tracked) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{3}
}

func (x *Tracked) GetTrackQualityWrapper() *wrapperspb.Int32Value {
	if x != nil {
		return x.TrackQualityWrapper
	}
	return nil
}

func (x *Tracked) GetSensorHits() *wrapperspb.Int32Value {
	if x != nil {
		return x.SensorHits
	}
	return nil
}

func (x *Tracked) GetNumberOfObjects() *UInt32Range {
	if x != nil {
		return x.NumberOfObjects
	}
	return nil
}

func (x *Tracked) GetRadarCrossSection() *wrapperspb.DoubleValue {
	if x != nil {
		return x.RadarCrossSection
	}
	return nil
}

func (x *Tracked) GetLastMeasurementTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastMeasurementTime
	}
	return nil
}

func (x *Tracked) GetLineOfBearing() *LineOfBearing {
	if x != nil {
		return x.LineOfBearing
	}
	return nil
}

// Data provenance.
type Provenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the integration that produced this entity
	IntegrationName string `protobuf:"bytes,5,opt,name=integration_name,json=integrationName,proto3" json:"integration_name,omitempty"`
	// Source data type of this entity. Examples: ADSB, Link16, etc.
	DataType string `protobuf:"bytes,6,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	// An ID that allows an element from a source to be uniquely identified
	SourceId string `protobuf:"bytes,3,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// The time, according to the source system, that the data in the entity was last modified. Generally, this should
	// be the time that the source-reported time of validity of the data in the entity. This field must be
	// updated with every change to the entity or else Entity Manager will discard the update.
	SourceUpdateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=source_update_time,json=sourceUpdateTime,proto3" json:"source_update_time,omitempty"`
	// Description of the modification source. In the case of a user this is the email address.
	SourceDescription string `protobuf:"bytes,4,opt,name=source_description,json=sourceDescription,proto3" json:"source_description,omitempty"`
}

func (x *Provenance) Reset() {
	*x = Provenance{}
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Provenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provenance) ProtoMessage() {}

func (x *Provenance) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provenance.ProtoReflect.Descriptor instead.
func (*Provenance) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{4}
}

func (x *Provenance) GetIntegrationName() string {
	if x != nil {
		return x.IntegrationName
	}
	return ""
}

func (x *Provenance) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *Provenance) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *Provenance) GetSourceUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SourceUpdateTime
	}
	return nil
}

func (x *Provenance) GetSourceDescription() string {
	if x != nil {
		return x.SourceDescription
	}
	return ""
}

// Indicators to describe entity to consumers.
type Indicators struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Simulated *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=simulated,proto3" json:"simulated,omitempty"`
	Exercise  *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=exercise,proto3" json:"exercise,omitempty"`
	Emergency *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=emergency,proto3" json:"emergency,omitempty"`
	C2        *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=c2,proto3" json:"c2,omitempty"`
	// Indicates the Entity should be egressed to external sources.
	// Integrations choose how the egressing happens (e.g. if an Entity needs fuzzing).
	Egressable *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=egressable,proto3" json:"egressable,omitempty"`
	// A signal of arbitrary importance such that the entity should be globally marked for all users
	Starred *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=starred,proto3" json:"starred,omitempty"`
}

func (x *Indicators) Reset() {
	*x = Indicators{}
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Indicators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Indicators) ProtoMessage() {}

func (x *Indicators) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Indicators.ProtoReflect.Descriptor instead.
func (*Indicators) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{5}
}

func (x *Indicators) GetSimulated() *wrapperspb.BoolValue {
	if x != nil {
		return x.Simulated
	}
	return nil
}

func (x *Indicators) GetExercise() *wrapperspb.BoolValue {
	if x != nil {
		return x.Exercise
	}
	return nil
}

func (x *Indicators) GetEmergency() *wrapperspb.BoolValue {
	if x != nil {
		return x.Emergency
	}
	return nil
}

func (x *Indicators) GetC2() *wrapperspb.BoolValue {
	if x != nil {
		return x.C2
	}
	return nil
}

func (x *Indicators) GetEgressable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Egressable
	}
	return nil
}

func (x *Indicators) GetStarred() *wrapperspb.BoolValue {
	if x != nil {
		return x.Starred
	}
	return nil
}

// Metadata about entity overrides present.
type Overrides struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Override []*Override `protobuf:"bytes,2,rep,name=override,proto3" json:"override,omitempty"`
}

func (x *Overrides) Reset() {
	*x = Overrides{}
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Overrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Overrides) ProtoMessage() {}

func (x *Overrides) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Overrides.ProtoReflect.Descriptor instead.
func (*Overrides) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{6}
}

func (x *Overrides) GetOverride() []*Override {
	if x != nil {
		return x.Override
	}
	return nil
}

// Details about an override. Last write wins.
type Override struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// override request id for an override request
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// proto field path which is the string representation of a field.
	// example: correlated.primary_entity_id would be primary_entity_id in correlated component
	FieldPath string `protobuf:"bytes,2,opt,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	// new field value corresponding to field path. In the shape of an empty entity with only the changed value.
	// example: entity: { mil_view: { disposition: Disposition_DISPOSITION_HOSTILE } }
	MaskedFieldValue *Entity `protobuf:"bytes,3,opt,name=masked_field_value,json=maskedFieldValue,proto3" json:"masked_field_value,omitempty"`
	// status of the override
	Status     OverrideStatus `protobuf:"varint,4,opt,name=status,proto3,enum=anduril.entitymanager.v1.OverrideStatus" json:"status,omitempty"`
	Provenance *Provenance    `protobuf:"bytes,5,opt,name=provenance,proto3" json:"provenance,omitempty"`
	// The type of the override, defined by the stage of the entity lifecycle that the entity was in when the override
	// was requested.
	Type OverrideType `protobuf:"varint,6,opt,name=type,proto3,enum=anduril.entitymanager.v1.OverrideType" json:"type,omitempty"`
	// Timestamp of the override request. The timestamp is generated by the Entity Manager instance that receives the request.
	RequestTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=request_timestamp,json=requestTimestamp,proto3" json:"request_timestamp,omitempty"`
}

func (x *Override) Reset() {
	*x = Override{}
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Override) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Override) ProtoMessage() {}

func (x *Override) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Override.ProtoReflect.Descriptor instead.
func (*Override) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{7}
}

func (x *Override) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *Override) GetFieldPath() string {
	if x != nil {
		return x.FieldPath
	}
	return ""
}

func (x *Override) GetMaskedFieldValue() *Entity {
	if x != nil {
		return x.MaskedFieldValue
	}
	return nil
}

func (x *Override) GetStatus() OverrideStatus {
	if x != nil {
		return x.Status
	}
	return OverrideStatus_OVERRIDE_STATUS_INVALID
}

func (x *Override) GetProvenance() *Provenance {
	if x != nil {
		return x.Provenance
	}
	return nil
}

func (x *Override) GetType() OverrideType {
	if x != nil {
		return x.Type
	}
	return OverrideType_OVERRIDE_TYPE_INVALID
}

func (x *Override) GetRequestTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestTimestamp
	}
	return nil
}

// An alternate id for an Entity.
type AlternateId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Type AltIdType `protobuf:"varint,3,opt,name=type,proto3,enum=anduril.entitymanager.v1.AltIdType" json:"type,omitempty"`
}

func (x *AlternateId) Reset() {
	*x = AlternateId{}
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlternateId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlternateId) ProtoMessage() {}

func (x *AlternateId) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlternateId.ProtoReflect.Descriptor instead.
func (*AlternateId) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{8}
}

func (x *AlternateId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AlternateId) GetType() AltIdType {
	if x != nil {
		return x.Type
	}
	return AltIdType_ALT_ID_TYPE_INVALID
}

// Visual details associated with the display of an entity in the client.
type VisualDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The range rings to display around an entity.
	RangeRings *RangeRings `protobuf:"bytes,1,opt,name=range_rings,json=rangeRings,proto3" json:"range_rings,omitempty"`
}

func (x *VisualDetails) Reset() {
	*x = VisualDetails{}
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VisualDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisualDetails) ProtoMessage() {}

func (x *VisualDetails) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisualDetails.ProtoReflect.Descriptor instead.
func (*VisualDetails) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{9}
}

func (x *VisualDetails) GetRangeRings() *RangeRings {
	if x != nil {
		return x.RangeRings
	}
	return nil
}

// Range rings allow visual assessment of map distance at varying zoom levels.
type RangeRings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minimum range ring distance, specified in meters.
	MinDistanceM *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=min_distance_m,json=minDistanceM,proto3" json:"min_distance_m,omitempty"`
	// The maximum range ring distance, specified in meters.
	MaxDistanceM *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=max_distance_m,json=maxDistanceM,proto3" json:"max_distance_m,omitempty"`
	// The count of range rings.
	RingCount uint32 `protobuf:"varint,3,opt,name=ring_count,json=ringCount,proto3" json:"ring_count,omitempty"`
	// The color of range rings, specified in hex string.
	RingLineColor *_type.Color `protobuf:"bytes,4,opt,name=ring_line_color,json=ringLineColor,proto3" json:"ring_line_color,omitempty"`
}

func (x *RangeRings) Reset() {
	*x = RangeRings{}
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RangeRings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeRings) ProtoMessage() {}

func (x *RangeRings) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeRings.ProtoReflect.Descriptor instead.
func (*RangeRings) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{10}
}

func (x *RangeRings) GetMinDistanceM() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MinDistanceM
	}
	return nil
}

func (x *RangeRings) GetMaxDistanceM() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxDistanceM
	}
	return nil
}

func (x *RangeRings) GetRingCount() uint32 {
	if x != nil {
		return x.RingCount
	}
	return 0
}

func (x *RangeRings) GetRingLineColor() *_type.Color {
	if x != nil {
		return x.RingLineColor
	}
	return nil
}

// Available for Entities that are a correlated (N to 1) set of entities. This will be present on
// each entity in the set.
type Correlation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If an entity is correlated, it is either the primary or a secondary.
	// DEPRECATED - Use membership instead.
	//
	// Types that are assignable to Correlation:
	//
	//	*Correlation_Primary
	//	*Correlation_Secondary
	Correlation isCorrelation_Correlation `protobuf_oneof:"correlation"`
	// If present, this entity is a part of a correlation set.
	Membership *CorrelationMembership `protobuf:"bytes,4,opt,name=membership,proto3" json:"membership,omitempty"`
	// If present, this entity was explicitly decorrelated from one or more entities.
	// An entity can be both correlated and decorrelated as long as they are disjoint sets.
	// An example would be if a user in the UI decides that two tracks are not actually the
	// same despite an automatic correlator having correlated them. The user would then
	// decorrelate the two tracks and this decorrelation would be preserved preventing the
	// correlator from re-correlating them at a later time.
	Decorrelation *Decorrelation `protobuf:"bytes,3,opt,name=decorrelation,proto3" json:"decorrelation,omitempty"`
}

func (x *Correlation) Reset() {
	*x = Correlation{}
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Correlation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Correlation) ProtoMessage() {}

func (x *Correlation) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Correlation.ProtoReflect.Descriptor instead.
func (*Correlation) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{11}
}

func (m *Correlation) GetCorrelation() isCorrelation_Correlation {
	if m != nil {
		return m.Correlation
	}
	return nil
}

func (x *Correlation) GetPrimary() *PrimaryCorrelation {
	if x, ok := x.GetCorrelation().(*Correlation_Primary); ok {
		return x.Primary
	}
	return nil
}

func (x *Correlation) GetSecondary() *SecondaryCorrelation {
	if x, ok := x.GetCorrelation().(*Correlation_Secondary); ok {
		return x.Secondary
	}
	return nil
}

func (x *Correlation) GetMembership() *CorrelationMembership {
	if x != nil {
		return x.Membership
	}
	return nil
}

func (x *Correlation) GetDecorrelation() *Decorrelation {
	if x != nil {
		return x.Decorrelation
	}
	return nil
}

type isCorrelation_Correlation interface {
	isCorrelation_Correlation()
}

type Correlation_Primary struct {
	// This entity is the primary of a correlation meaning that it serves as the representative
	// entity of the correlation set.
	Primary *PrimaryCorrelation `protobuf:"bytes,1,opt,name=primary,proto3,oneof"`
}

type Correlation_Secondary struct {
	// This entity is a secondary of a correlation meaning that it will be represented by the
	// primary of the correlation set.
	Secondary *SecondaryCorrelation `protobuf:"bytes,2,opt,name=secondary,proto3,oneof"`
}

func (*Correlation_Primary) isCorrelation_Correlation() {}

func (*Correlation_Secondary) isCorrelation_Correlation() {}

type PrimaryCorrelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The secondary entity IDs part of this correlation.
	SecondaryEntityIds []string `protobuf:"bytes,1,rep,name=secondary_entity_ids,json=secondaryEntityIds,proto3" json:"secondary_entity_ids,omitempty"`
}

func (x *PrimaryCorrelation) Reset() {
	*x = PrimaryCorrelation{}
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrimaryCorrelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryCorrelation) ProtoMessage() {}

func (x *PrimaryCorrelation) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryCorrelation.ProtoReflect.Descriptor instead.
func (*PrimaryCorrelation) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{12}
}

func (x *PrimaryCorrelation) GetSecondaryEntityIds() []string {
	if x != nil {
		return x.SecondaryEntityIds
	}
	return nil
}

type SecondaryCorrelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The primary of this correlation.
	PrimaryEntityId string `protobuf:"bytes,1,opt,name=primary_entity_id,json=primaryEntityId,proto3" json:"primary_entity_id,omitempty"`
	// Metadata about the correlation.
	Metadata *CorrelationMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *SecondaryCorrelation) Reset() {
	*x = SecondaryCorrelation{}
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecondaryCorrelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecondaryCorrelation) ProtoMessage() {}

func (x *SecondaryCorrelation) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecondaryCorrelation.ProtoReflect.Descriptor instead.
func (*SecondaryCorrelation) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{13}
}

func (x *SecondaryCorrelation) GetPrimaryEntityId() string {
	if x != nil {
		return x.PrimaryEntityId
	}
	return ""
}

func (x *SecondaryCorrelation) GetMetadata() *CorrelationMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CorrelationMembership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the correlation set this entity belongs to.
	CorrelationSetId string `protobuf:"bytes,1,opt,name=correlation_set_id,json=correlationSetId,proto3" json:"correlation_set_id,omitempty"`
	// If an entity is correlated, it may or may not be the primary.
	//
	// Types that are assignable to Membership:
	//
	//	*CorrelationMembership_Primary
	//	*CorrelationMembership_NonPrimary
	Membership isCorrelationMembership_Membership `protobuf_oneof:"membership"`
	// Additional metadata on this correlation.
	Metadata *CorrelationMetadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *CorrelationMembership) Reset() {
	*x = CorrelationMembership{}
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CorrelationMembership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrelationMembership) ProtoMessage() {}

func (x *CorrelationMembership) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrelationMembership.ProtoReflect.Descriptor instead.
func (*CorrelationMembership) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{14}
}

func (x *CorrelationMembership) GetCorrelationSetId() string {
	if x != nil {
		return x.CorrelationSetId
	}
	return ""
}

func (m *CorrelationMembership) GetMembership() isCorrelationMembership_Membership {
	if m != nil {
		return m.Membership
	}
	return nil
}

func (x *CorrelationMembership) GetPrimary() *PrimaryMembership {
	if x, ok := x.GetMembership().(*CorrelationMembership_Primary); ok {
		return x.Primary
	}
	return nil
}

func (x *CorrelationMembership) GetNonPrimary() *NonPrimaryMembership {
	if x, ok := x.GetMembership().(*CorrelationMembership_NonPrimary); ok {
		return x.NonPrimary
	}
	return nil
}

func (x *CorrelationMembership) GetMetadata() *CorrelationMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type isCorrelationMembership_Membership interface {
	isCorrelationMembership_Membership()
}

type CorrelationMembership_Primary struct {
	// This entity is the primary of a correlation set meaning that it serves as the representative
	// entity of the correlation set.
	Primary *PrimaryMembership `protobuf:"bytes,2,opt,name=primary,proto3,oneof"`
}

type CorrelationMembership_NonPrimary struct {
	// This entity is not the primary of the correlation set. Note that there may not
	// be a primary at all.
	NonPrimary *NonPrimaryMembership `protobuf:"bytes,3,opt,name=non_primary,json=nonPrimary,proto3,oneof"`
}

func (*CorrelationMembership_Primary) isCorrelationMembership_Membership() {}

func (*CorrelationMembership_NonPrimary) isCorrelationMembership_Membership() {}

type PrimaryMembership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PrimaryMembership) Reset() {
	*x = PrimaryMembership{}
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrimaryMembership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryMembership) ProtoMessage() {}

func (x *PrimaryMembership) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryMembership.ProtoReflect.Descriptor instead.
func (*PrimaryMembership) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{15}
}

type NonPrimaryMembership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NonPrimaryMembership) Reset() {
	*x = NonPrimaryMembership{}
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NonPrimaryMembership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonPrimaryMembership) ProtoMessage() {}

func (x *NonPrimaryMembership) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonPrimaryMembership.ProtoReflect.Descriptor instead.
func (*NonPrimaryMembership) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{16}
}

type Decorrelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This will be specified if this entity was decorrelated against all other entities.
	All *DecorrelatedAll `protobuf:"bytes,1,opt,name=all,proto3" json:"all,omitempty"`
	// A list of decorrelated entities that have been explicitly decorrelated against this entity
	// which prevents lower precedence correlations from overriding it in the future.
	// For example, if an operator in the UI decorrelated tracks A and B, any automated
	// correlators would be unable to correlate them since manual decorrelations have
	// higher precedence than automatic ones. Precedence is determined by both correlation
	// type and replication mode.
	DecorrelatedEntities []*DecorrelatedSingle `protobuf:"bytes,2,rep,name=decorrelated_entities,json=decorrelatedEntities,proto3" json:"decorrelated_entities,omitempty"`
}

func (x *Decorrelation) Reset() {
	*x = Decorrelation{}
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Decorrelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decorrelation) ProtoMessage() {}

func (x *Decorrelation) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decorrelation.ProtoReflect.Descriptor instead.
func (*Decorrelation) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{17}
}

func (x *Decorrelation) GetAll() *DecorrelatedAll {
	if x != nil {
		return x.All
	}
	return nil
}

func (x *Decorrelation) GetDecorrelatedEntities() []*DecorrelatedSingle {
	if x != nil {
		return x.DecorrelatedEntities
	}
	return nil
}

type DecorrelatedAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata about the decorrelation.
	Metadata *CorrelationMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *DecorrelatedAll) Reset() {
	*x = DecorrelatedAll{}
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecorrelatedAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecorrelatedAll) ProtoMessage() {}

func (x *DecorrelatedAll) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecorrelatedAll.ProtoReflect.Descriptor instead.
func (*DecorrelatedAll) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{18}
}

func (x *DecorrelatedAll) GetMetadata() *CorrelationMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type DecorrelatedSingle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The entity that was decorrelated against.
	EntityId string `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	// Metadata about the decorrelation.
	Metadata *CorrelationMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *DecorrelatedSingle) Reset() {
	*x = DecorrelatedSingle{}
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecorrelatedSingle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecorrelatedSingle) ProtoMessage() {}

func (x *DecorrelatedSingle) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecorrelatedSingle.ProtoReflect.Descriptor instead.
func (*DecorrelatedSingle) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{19}
}

func (x *DecorrelatedSingle) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *DecorrelatedSingle) GetMetadata() *CorrelationMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CorrelationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Who or what added this entity to the (de)correlation.
	Provenance *Provenance `protobuf:"bytes,1,opt,name=provenance,proto3" json:"provenance,omitempty"`
	// Indicates how the correlation will be distributed. Because a correlation is composed of
	// multiple secondaries, each of which may have been correlated with different replication
	// modes, the distribution of the correlation is composed of distributions of the individual
	// entities within the correlation set.
	// For example, if there are two secondary entities A and B correlated against a primary C,
	// with A having been correlated globally and B having been correlated locally, then the
	// correlation set that is distributed globally than what is known locally in the node.
	ReplicationMode CorrelationReplicationMode `protobuf:"varint,2,opt,name=replication_mode,json=replicationMode,proto3,enum=anduril.entitymanager.v1.CorrelationReplicationMode" json:"replication_mode,omitempty"`
	// What type of (de)correlation was this entity added with.
	Type CorrelationType `protobuf:"varint,3,opt,name=type,proto3,enum=anduril.entitymanager.v1.CorrelationType" json:"type,omitempty"`
}

func (x *CorrelationMetadata) Reset() {
	*x = CorrelationMetadata{}
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CorrelationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrelationMetadata) ProtoMessage() {}

func (x *CorrelationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrelationMetadata.ProtoReflect.Descriptor instead.
func (*CorrelationMetadata) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP(), []int{20}
}

func (x *CorrelationMetadata) GetProvenance() *Provenance {
	if x != nil {
		return x.Provenance
	}
	return nil
}

func (x *CorrelationMetadata) GetReplicationMode() CorrelationReplicationMode {
	if x != nil {
		return x.ReplicationMode
	}
	return CorrelationReplicationMode_CORRELATION_REPLICATION_MODE_INVALID
}

func (x *CorrelationMetadata) GetType() CorrelationType {
	if x != nil {
		return x.Type
	}
	return CorrelationType_CORRELATION_TYPE_INVALID
}

var File_anduril_entitymanager_v1_entity_pub_proto protoreflect.FileDescriptor

var file_anduril_entitymanager_v1_entity_pub_proto_rawDesc = []byte{
	0x0a, 0x29, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x31, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x75,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x67, 0x65, 0x6f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x30, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2b, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x75,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2b, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x70,
	0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70,
	0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2b, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x34, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x22, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f,
	0x76, 0x32, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x13, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x14,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61,
	0x69, 0x6e, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x12, 0x3f,
	0x0a, 0x09, 0x67, 0x65, 0x6f, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12,
	0x45, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x67, 0x65, 0x6f, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x12, 0x47, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x69, 0x6c,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x52, 0x07,
	0x6d, 0x69, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x12, 0x3e, 0x0a, 0x08, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x08, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x07, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x41, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x0a,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x51, 0x0a, 0x0f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x57, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x59, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0c, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x4d, 0x0a,
	0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x0d, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x4e, 0x0a, 0x0e,
	0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0d, 0x76,
	0x69, 0x73, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x0a,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x41, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x4b, 0x0a, 0x0d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x52,
	0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x6f, 0x72, 0x62,
	0x69, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x62, 0x69, 0x74, 0x52, 0x05, 0x6f, 0x72, 0x62, 0x69, 0x74,
	0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x4a, 0x04, 0x08, 0x11,
	0x10, 0x12, 0x4a, 0x04, 0x08, 0x12, 0x10, 0x13, 0x4a, 0x04, 0x08, 0x1b, 0x10, 0x1c, 0x4a, 0x04,
	0x08, 0x1c, 0x10, 0x1d, 0x4a, 0x04, 0x08, 0x20, 0x10, 0x21, 0x4a, 0x04, 0x08, 0x29, 0x10, 0x2a,
	0x4a, 0x04, 0x08, 0x2b, 0x10, 0x2c, 0x52, 0x0a, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x0a, 0x67, 0x65, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x52, 0x05, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0b, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6e, 0x6f, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0x49, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x22, 0x73, 0x0a, 0x07, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x61,
	0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x49, 0x64, 0x42, 0x03, 0xc8, 0x3e, 0x01, 0x52, 0x0c,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xc8, 0x3e, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9e, 0x04, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x4f, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x68, 0x69, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x48, 0x69, 0x74, 0x73,
	0x12, 0x51, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x61, 0x64, 0x61, 0x72, 0x5f, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11,
	0x72, 0x61, 0x64, 0x61, 0x72, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4e, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x65, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x42, 0x65, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x42, 0x65, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04,
	0x08, 0x08, 0x10, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf0, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xf1, 0x02, 0x0a, 0x0a, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x69, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x65, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x65, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x2a, 0x0a, 0x02, 0x63, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x63, 0x32,
	0x12, 0x3f, 0x0a, 0x0a, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x03, 0xc8, 0x3e, 0x01, 0x52, 0x0a, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03,
	0xc8, 0x3e, 0x01, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x05,
	0x10, 0x06, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x5d, 0x0a,
	0x09, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xa5, 0x03, 0x0a,
	0x08, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x12, 0x6d, 0x61, 0x73, 0x6b, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x64, 0x0a, 0x0b, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x74,
	0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x5b, 0x0a, 0x0d, 0x56, 0x69,
	0x73, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x03, 0xc8, 0x3e, 0x01, 0x52, 0x0a, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xf0, 0x01, 0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d, 0x69,
	0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x61,
	0x78, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x0f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0d, 0x72, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xd6, 0x02, 0x0a, 0x0b, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x07, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x12, 0x4f, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x4d, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x14,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x49, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xba, 0x02, 0x0a, 0x15,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x51, 0x0a, 0x0b,
	0x6e, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6e,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x49, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x22, 0x13, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x22, 0x16, 0x0a,
	0x14, 0x4e, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x22, 0xaf, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x52,
	0x03, 0x61, 0x6c, 0x6c, 0x12, 0x61, 0x0a, 0x15, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x52, 0x14, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x0f, 0x44, 0x65, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x12, 0x49, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7c, 0x0a, 0x12, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xfb, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x5f, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x2a, 0x6c, 0x0a, 0x0f, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a,
	0x97, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28,
	0x0a, 0x24, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x52, 0x52,
	0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x27, 0x0a, 0x23, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x02, 0x42, 0x80, 0x02, 0x0a, 0x1c, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2f, 0x6c, 0x61, 0x74, 0x74, 0x69, 0x63, 0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f,
	0x73, 0x72, 0x63, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41,
	0x45, 0x58, 0xaa, 0x02, 0x18, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x18,
	0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x5c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x24, 0x41, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x5c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x1a, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x3a, 0x3a, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_anduril_entitymanager_v1_entity_pub_proto_rawDescOnce sync.Once
	file_anduril_entitymanager_v1_entity_pub_proto_rawDescData = file_anduril_entitymanager_v1_entity_pub_proto_rawDesc
)

func file_anduril_entitymanager_v1_entity_pub_proto_rawDescGZIP() []byte {
	file_anduril_entitymanager_v1_entity_pub_proto_rawDescOnce.Do(func() {
		file_anduril_entitymanager_v1_entity_pub_proto_rawDescData = protoimpl.X.CompressGZIP(file_anduril_entitymanager_v1_entity_pub_proto_rawDescData)
	})
	return file_anduril_entitymanager_v1_entity_pub_proto_rawDescData
}

var file_anduril_entitymanager_v1_entity_pub_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_anduril_entitymanager_v1_entity_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_anduril_entitymanager_v1_entity_pub_proto_goTypes = []any{
	(CorrelationType)(0),            // 0: anduril.entitymanager.v1.CorrelationType
	(CorrelationReplicationMode)(0), // 1: anduril.entitymanager.v1.CorrelationReplicationMode
	(*Entity)(nil),                  // 2: anduril.entitymanager.v1.Entity
	(*Status)(nil),                  // 3: anduril.entitymanager.v1.Status
	(*Aliases)(nil),                 // 4: anduril.entitymanager.v1.Aliases
	(*Tracked)(nil),                 // 5: anduril.entitymanager.v1.Tracked
	(*Provenance)(nil),              // 6: anduril.entitymanager.v1.Provenance
	(*Indicators)(nil),              // 7: anduril.entitymanager.v1.Indicators
	(*Overrides)(nil),               // 8: anduril.entitymanager.v1.Overrides
	(*Override)(nil),                // 9: anduril.entitymanager.v1.Override
	(*AlternateId)(nil),             // 10: anduril.entitymanager.v1.AlternateId
	(*VisualDetails)(nil),           // 11: anduril.entitymanager.v1.VisualDetails
	(*RangeRings)(nil),              // 12: anduril.entitymanager.v1.RangeRings
	(*Correlation)(nil),             // 13: anduril.entitymanager.v1.Correlation
	(*PrimaryCorrelation)(nil),      // 14: anduril.entitymanager.v1.PrimaryCorrelation
	(*SecondaryCorrelation)(nil),    // 15: anduril.entitymanager.v1.SecondaryCorrelation
	(*CorrelationMembership)(nil),   // 16: anduril.entitymanager.v1.CorrelationMembership
	(*PrimaryMembership)(nil),       // 17: anduril.entitymanager.v1.PrimaryMembership
	(*NonPrimaryMembership)(nil),    // 18: anduril.entitymanager.v1.NonPrimaryMembership
	(*Decorrelation)(nil),           // 19: anduril.entitymanager.v1.Decorrelation
	(*DecorrelatedAll)(nil),         // 20: anduril.entitymanager.v1.DecorrelatedAll
	(*DecorrelatedSingle)(nil),      // 21: anduril.entitymanager.v1.DecorrelatedSingle
	(*CorrelationMetadata)(nil),     // 22: anduril.entitymanager.v1.CorrelationMetadata
	(*timestamppb.Timestamp)(nil),   // 23: google.protobuf.Timestamp
	(*Location)(nil),                // 24: anduril.entitymanager.v1.Location
	(*LocationUncertainty)(nil),     // 25: anduril.entitymanager.v1.LocationUncertainty
	(*GeoShape)(nil),                // 26: anduril.entitymanager.v1.GeoShape
	(*GeoDetails)(nil),              // 27: anduril.entitymanager.v1.GeoDetails
	(*MilView)(nil),                 // 28: anduril.entitymanager.v1.MilView
	(*Ontology)(nil),                // 29: anduril.entitymanager.v1.Ontology
	(*Sensors)(nil),                 // 30: anduril.entitymanager.v1.Sensors
	(*Payloads)(nil),                // 31: anduril.entitymanager.v1.Payloads
	(*PowerState)(nil),              // 32: anduril.entitymanager.v1.PowerState
	(*TargetPriority)(nil),          // 33: anduril.entitymanager.v1.TargetPriority
	(*Signal)(nil),                  // 34: anduril.entitymanager.v1.Signal
	(*TransponderCodes)(nil),        // 35: anduril.entitymanager.v1.TransponderCodes
	(*Classification)(nil),          // 36: anduril.entitymanager.v1.Classification
	(*v2.TaskCatalog)(nil),          // 37: anduril.tasks.v2.TaskCatalog
	(*Relationships)(nil),           // 38: anduril.entitymanager.v1.Relationships
	(*Dimensions)(nil),              // 39: anduril.entitymanager.v1.Dimensions
	(*RouteDetails)(nil),            // 40: anduril.entitymanager.v1.RouteDetails
	(*Schedules)(nil),               // 41: anduril.entitymanager.v1.Schedules
	(*Health)(nil),                  // 42: anduril.entitymanager.v1.Health
	(*GroupDetails)(nil),            // 43: anduril.entitymanager.v1.GroupDetails
	(*Supplies)(nil),                // 44: anduril.entitymanager.v1.Supplies
	(*Orbit)(nil),                   // 45: anduril.entitymanager.v1.Orbit
	(*wrapperspb.Int32Value)(nil),   // 46: google.protobuf.Int32Value
	(*UInt32Range)(nil),             // 47: anduril.entitymanager.v1.UInt32Range
	(*wrapperspb.DoubleValue)(nil),  // 48: google.protobuf.DoubleValue
	(*LineOfBearing)(nil),           // 49: anduril.entitymanager.v1.LineOfBearing
	(*wrapperspb.BoolValue)(nil),    // 50: google.protobuf.BoolValue
	(OverrideStatus)(0),             // 51: anduril.entitymanager.v1.OverrideStatus
	(OverrideType)(0),               // 52: anduril.entitymanager.v1.OverrideType
	(AltIdType)(0),                  // 53: anduril.entitymanager.v1.AltIdType
	(*_type.Color)(nil),             // 54: anduril.type.Color
}
var file_anduril_entitymanager_v1_entity_pub_proto_depIdxs = []int32{
	23, // 0: anduril.entitymanager.v1.Entity.created_time:type_name -> google.protobuf.Timestamp
	23, // 1: anduril.entitymanager.v1.Entity.expiry_time:type_name -> google.protobuf.Timestamp
	3,  // 2: anduril.entitymanager.v1.Entity.status:type_name -> anduril.entitymanager.v1.Status
	24, // 3: anduril.entitymanager.v1.Entity.location:type_name -> anduril.entitymanager.v1.Location
	25, // 4: anduril.entitymanager.v1.Entity.location_uncertainty:type_name -> anduril.entitymanager.v1.LocationUncertainty
	26, // 5: anduril.entitymanager.v1.Entity.geo_shape:type_name -> anduril.entitymanager.v1.GeoShape
	27, // 6: anduril.entitymanager.v1.Entity.geo_details:type_name -> anduril.entitymanager.v1.GeoDetails
	4,  // 7: anduril.entitymanager.v1.Entity.aliases:type_name -> anduril.entitymanager.v1.Aliases
	5,  // 8: anduril.entitymanager.v1.Entity.tracked:type_name -> anduril.entitymanager.v1.Tracked
	13, // 9: anduril.entitymanager.v1.Entity.correlation:type_name -> anduril.entitymanager.v1.Correlation
	28, // 10: anduril.entitymanager.v1.Entity.mil_view:type_name -> anduril.entitymanager.v1.MilView
	29, // 11: anduril.entitymanager.v1.Entity.ontology:type_name -> anduril.entitymanager.v1.Ontology
	30, // 12: anduril.entitymanager.v1.Entity.sensors:type_name -> anduril.entitymanager.v1.Sensors
	31, // 13: anduril.entitymanager.v1.Entity.payloads:type_name -> anduril.entitymanager.v1.Payloads
	32, // 14: anduril.entitymanager.v1.Entity.power_state:type_name -> anduril.entitymanager.v1.PowerState
	6,  // 15: anduril.entitymanager.v1.Entity.provenance:type_name -> anduril.entitymanager.v1.Provenance
	8,  // 16: anduril.entitymanager.v1.Entity.overrides:type_name -> anduril.entitymanager.v1.Overrides
	7,  // 17: anduril.entitymanager.v1.Entity.indicators:type_name -> anduril.entitymanager.v1.Indicators
	33, // 18: anduril.entitymanager.v1.Entity.target_priority:type_name -> anduril.entitymanager.v1.TargetPriority
	34, // 19: anduril.entitymanager.v1.Entity.signal:type_name -> anduril.entitymanager.v1.Signal
	35, // 20: anduril.entitymanager.v1.Entity.transponder_codes:type_name -> anduril.entitymanager.v1.TransponderCodes
	36, // 21: anduril.entitymanager.v1.Entity.data_classification:type_name -> anduril.entitymanager.v1.Classification
	37, // 22: anduril.entitymanager.v1.Entity.task_catalog:type_name -> anduril.tasks.v2.TaskCatalog
	38, // 23: anduril.entitymanager.v1.Entity.relationships:type_name -> anduril.entitymanager.v1.Relationships
	11, // 24: anduril.entitymanager.v1.Entity.visual_details:type_name -> anduril.entitymanager.v1.VisualDetails
	39, // 25: anduril.entitymanager.v1.Entity.dimensions:type_name -> anduril.entitymanager.v1.Dimensions
	40, // 26: anduril.entitymanager.v1.Entity.route_details:type_name -> anduril.entitymanager.v1.RouteDetails
	41, // 27: anduril.entitymanager.v1.Entity.schedules:type_name -> anduril.entitymanager.v1.Schedules
	42, // 28: anduril.entitymanager.v1.Entity.health:type_name -> anduril.entitymanager.v1.Health
	43, // 29: anduril.entitymanager.v1.Entity.group_details:type_name -> anduril.entitymanager.v1.GroupDetails
	44, // 30: anduril.entitymanager.v1.Entity.supplies:type_name -> anduril.entitymanager.v1.Supplies
	45, // 31: anduril.entitymanager.v1.Entity.orbit:type_name -> anduril.entitymanager.v1.Orbit
	10, // 32: anduril.entitymanager.v1.Aliases.alternate_ids:type_name -> anduril.entitymanager.v1.AlternateId
	46, // 33: anduril.entitymanager.v1.Tracked.track_quality_wrapper:type_name -> google.protobuf.Int32Value
	46, // 34: anduril.entitymanager.v1.Tracked.sensor_hits:type_name -> google.protobuf.Int32Value
	47, // 35: anduril.entitymanager.v1.Tracked.number_of_objects:type_name -> anduril.entitymanager.v1.UInt32Range
	48, // 36: anduril.entitymanager.v1.Tracked.radar_cross_section:type_name -> google.protobuf.DoubleValue
	23, // 37: anduril.entitymanager.v1.Tracked.last_measurement_time:type_name -> google.protobuf.Timestamp
	49, // 38: anduril.entitymanager.v1.Tracked.line_of_bearing:type_name -> anduril.entitymanager.v1.LineOfBearing
	23, // 39: anduril.entitymanager.v1.Provenance.source_update_time:type_name -> google.protobuf.Timestamp
	50, // 40: anduril.entitymanager.v1.Indicators.simulated:type_name -> google.protobuf.BoolValue
	50, // 41: anduril.entitymanager.v1.Indicators.exercise:type_name -> google.protobuf.BoolValue
	50, // 42: anduril.entitymanager.v1.Indicators.emergency:type_name -> google.protobuf.BoolValue
	50, // 43: anduril.entitymanager.v1.Indicators.c2:type_name -> google.protobuf.BoolValue
	50, // 44: anduril.entitymanager.v1.Indicators.egressable:type_name -> google.protobuf.BoolValue
	50, // 45: anduril.entitymanager.v1.Indicators.starred:type_name -> google.protobuf.BoolValue
	9,  // 46: anduril.entitymanager.v1.Overrides.override:type_name -> anduril.entitymanager.v1.Override
	2,  // 47: anduril.entitymanager.v1.Override.masked_field_value:type_name -> anduril.entitymanager.v1.Entity
	51, // 48: anduril.entitymanager.v1.Override.status:type_name -> anduril.entitymanager.v1.OverrideStatus
	6,  // 49: anduril.entitymanager.v1.Override.provenance:type_name -> anduril.entitymanager.v1.Provenance
	52, // 50: anduril.entitymanager.v1.Override.type:type_name -> anduril.entitymanager.v1.OverrideType
	23, // 51: anduril.entitymanager.v1.Override.request_timestamp:type_name -> google.protobuf.Timestamp
	53, // 52: anduril.entitymanager.v1.AlternateId.type:type_name -> anduril.entitymanager.v1.AltIdType
	12, // 53: anduril.entitymanager.v1.VisualDetails.range_rings:type_name -> anduril.entitymanager.v1.RangeRings
	48, // 54: anduril.entitymanager.v1.RangeRings.min_distance_m:type_name -> google.protobuf.DoubleValue
	48, // 55: anduril.entitymanager.v1.RangeRings.max_distance_m:type_name -> google.protobuf.DoubleValue
	54, // 56: anduril.entitymanager.v1.RangeRings.ring_line_color:type_name -> anduril.type.Color
	14, // 57: anduril.entitymanager.v1.Correlation.primary:type_name -> anduril.entitymanager.v1.PrimaryCorrelation
	15, // 58: anduril.entitymanager.v1.Correlation.secondary:type_name -> anduril.entitymanager.v1.SecondaryCorrelation
	16, // 59: anduril.entitymanager.v1.Correlation.membership:type_name -> anduril.entitymanager.v1.CorrelationMembership
	19, // 60: anduril.entitymanager.v1.Correlation.decorrelation:type_name -> anduril.entitymanager.v1.Decorrelation
	22, // 61: anduril.entitymanager.v1.SecondaryCorrelation.metadata:type_name -> anduril.entitymanager.v1.CorrelationMetadata
	17, // 62: anduril.entitymanager.v1.CorrelationMembership.primary:type_name -> anduril.entitymanager.v1.PrimaryMembership
	18, // 63: anduril.entitymanager.v1.CorrelationMembership.non_primary:type_name -> anduril.entitymanager.v1.NonPrimaryMembership
	22, // 64: anduril.entitymanager.v1.CorrelationMembership.metadata:type_name -> anduril.entitymanager.v1.CorrelationMetadata
	20, // 65: anduril.entitymanager.v1.Decorrelation.all:type_name -> anduril.entitymanager.v1.DecorrelatedAll
	21, // 66: anduril.entitymanager.v1.Decorrelation.decorrelated_entities:type_name -> anduril.entitymanager.v1.DecorrelatedSingle
	22, // 67: anduril.entitymanager.v1.DecorrelatedAll.metadata:type_name -> anduril.entitymanager.v1.CorrelationMetadata
	22, // 68: anduril.entitymanager.v1.DecorrelatedSingle.metadata:type_name -> anduril.entitymanager.v1.CorrelationMetadata
	6,  // 69: anduril.entitymanager.v1.CorrelationMetadata.provenance:type_name -> anduril.entitymanager.v1.Provenance
	1,  // 70: anduril.entitymanager.v1.CorrelationMetadata.replication_mode:type_name -> anduril.entitymanager.v1.CorrelationReplicationMode
	0,  // 71: anduril.entitymanager.v1.CorrelationMetadata.type:type_name -> anduril.entitymanager.v1.CorrelationType
	72, // [72:72] is the sub-list for method output_type
	72, // [72:72] is the sub-list for method input_type
	72, // [72:72] is the sub-list for extension type_name
	72, // [72:72] is the sub-list for extension extendee
	0,  // [0:72] is the sub-list for field type_name
}

func init() { file_anduril_entitymanager_v1_entity_pub_proto_init() }
func file_anduril_entitymanager_v1_entity_pub_proto_init() {
	if File_anduril_entitymanager_v1_entity_pub_proto != nil {
		return
	}
	file_anduril_entitymanager_v1_classification_pub_proto_init()
	file_anduril_entitymanager_v1_dimensions_pub_proto_init()
	file_anduril_entitymanager_v1_geoentity_pub_proto_init()
	file_anduril_entitymanager_v1_group_pub_proto_init()
	file_anduril_entitymanager_v1_health_status_pub_proto_init()
	file_anduril_entitymanager_v1_location_pub_proto_init()
	file_anduril_entitymanager_v1_ontology_pub_proto_init()
	file_anduril_entitymanager_v1_options_pub_proto_init()
	file_anduril_entitymanager_v1_orbit_pub_proto_init()
	file_anduril_entitymanager_v1_payloads_pub_proto_init()
	file_anduril_entitymanager_v1_power_pub_proto_init()
	file_anduril_entitymanager_v1_relationship_pub_proto_init()
	file_anduril_entitymanager_v1_route_details_pub_proto_init()
	file_anduril_entitymanager_v1_schedule_pub_proto_init()
	file_anduril_entitymanager_v1_sensors_pub_proto_init()
	file_anduril_entitymanager_v1_signal_pub_proto_init()
	file_anduril_entitymanager_v1_supplies_pub_proto_init()
	file_anduril_entitymanager_v1_target_priority_pub_proto_init()
	file_anduril_entitymanager_v1_transponder_codes_pub_proto_init()
	file_anduril_entitymanager_v1_types_pub_proto_init()
	file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[11].OneofWrappers = []any{
		(*Correlation_Primary)(nil),
		(*Correlation_Secondary)(nil),
	}
	file_anduril_entitymanager_v1_entity_pub_proto_msgTypes[14].OneofWrappers = []any{
		(*CorrelationMembership_Primary)(nil),
		(*CorrelationMembership_NonPrimary)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_anduril_entitymanager_v1_entity_pub_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_anduril_entitymanager_v1_entity_pub_proto_goTypes,
		DependencyIndexes: file_anduril_entitymanager_v1_entity_pub_proto_depIdxs,
		EnumInfos:         file_anduril_entitymanager_v1_entity_pub_proto_enumTypes,
		MessageInfos:      file_anduril_entitymanager_v1_entity_pub_proto_msgTypes,
	}.Build()
	File_anduril_entitymanager_v1_entity_pub_proto = out.File
	file_anduril_entitymanager_v1_entity_pub_proto_rawDesc = nil
	file_anduril_entitymanager_v1_entity_pub_proto_goTypes = nil
	file_anduril_entitymanager_v1_entity_pub_proto_depIdxs = nil
}
