// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: anduril/entitymanager/v1/filter.pub.proto

package entitymanagerv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The Comparator specifies the set of supported comparison operations. It also provides the
// mapping information about which comparators are supported for which values. Services that wish
// to implement entity filters must provide validation functionality to strictly enforce these
// mappings.
type Comparator int32

const (
	Comparator_COMPARATOR_INVALID Comparator = 0
	// Comparators for: boolean, numeric, string, enum, position, timestamp, positions, and bounded shapes.
	Comparator_COMPARATOR_MATCH_ALL Comparator = 11
	// Comparators for: boolean, numeric, string, enum, position, and timestamp.
	Comparator_COMPARATOR_EQUALITY Comparator = 1
	Comparator_COMPARATOR_IN       Comparator = 9
	// Comparators for: numeric, string, and timestamp.
	Comparator_COMPARATOR_LESS_THAN             Comparator = 2
	Comparator_COMPARATOR_GREATER_THAN          Comparator = 3
	Comparator_COMPARATOR_LESS_THAN_EQUAL_TO    Comparator = 4
	Comparator_COMPARATOR_GREATER_THAN_EQUAL_TO Comparator = 5
	// Comparators for: positions and bounded shapes.
	Comparator_COMPARATOR_WITHIN Comparator = 6
	// Comparators for: existential checks.
	// TRUE if path to field exists (parent message is present), and either:
	//  1. the field is a primitive: all values including default pass check.
	//  2. the field is a message and set/present.
	//  3. the field is repeated or map with size > 0.
	//
	// FALSE unless path exists and one of the above 3 conditions is met
	Comparator_COMPARATOR_EXISTS Comparator = 7
	// Comparator for string type only.
	Comparator_COMPARATOR_CASE_INSENSITIVE_EQUALITY    Comparator = 8
	Comparator_COMPARATOR_CASE_INSENSITIVE_EQUALITY_IN Comparator = 10
	// Comparators for range types only.
	// Closed (inclusive endpoints) [a, b]
	Comparator_COMPARATOR_RANGE_CLOSED Comparator = 12
)

// Enum value maps for Comparator.
var (
	Comparator_name = map[int32]string{
		0:  "COMPARATOR_INVALID",
		11: "COMPARATOR_MATCH_ALL",
		1:  "COMPARATOR_EQUALITY",
		9:  "COMPARATOR_IN",
		2:  "COMPARATOR_LESS_THAN",
		3:  "COMPARATOR_GREATER_THAN",
		4:  "COMPARATOR_LESS_THAN_EQUAL_TO",
		5:  "COMPARATOR_GREATER_THAN_EQUAL_TO",
		6:  "COMPARATOR_WITHIN",
		7:  "COMPARATOR_EXISTS",
		8:  "COMPARATOR_CASE_INSENSITIVE_EQUALITY",
		10: "COMPARATOR_CASE_INSENSITIVE_EQUALITY_IN",
		12: "COMPARATOR_RANGE_CLOSED",
	}
	Comparator_value = map[string]int32{
		"COMPARATOR_INVALID":                      0,
		"COMPARATOR_MATCH_ALL":                    11,
		"COMPARATOR_EQUALITY":                     1,
		"COMPARATOR_IN":                           9,
		"COMPARATOR_LESS_THAN":                    2,
		"COMPARATOR_GREATER_THAN":                 3,
		"COMPARATOR_LESS_THAN_EQUAL_TO":           4,
		"COMPARATOR_GREATER_THAN_EQUAL_TO":        5,
		"COMPARATOR_WITHIN":                       6,
		"COMPARATOR_EXISTS":                       7,
		"COMPARATOR_CASE_INSENSITIVE_EQUALITY":    8,
		"COMPARATOR_CASE_INSENSITIVE_EQUALITY_IN": 10,
		"COMPARATOR_RANGE_CLOSED":                 12,
	}
)

func (x Comparator) Enum() *Comparator {
	p := new(Comparator)
	*p = x
	return p
}

func (x Comparator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Comparator) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_filter_pub_proto_enumTypes[0].Descriptor()
}

func (Comparator) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_filter_pub_proto_enumTypes[0]
}

func (x Comparator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Comparator.Descriptor instead.
func (Comparator) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_filter_pub_proto_rawDescGZIP(), []int{0}
}

// The ListComparator determines how to compose statement evaluations for members of a list. For
// example, if ANY_OF is specified, the ListOperation in which the ListComparator is embedded
// will return TRUE if any of the values in the list returns true for the ListOperation's child
// statement.
type ListComparator int32

const (
	ListComparator_LIST_COMPARATOR_INVALID ListComparator = 0
	ListComparator_LIST_COMPARATOR_ANY_OF  ListComparator = 1
)

// Enum value maps for ListComparator.
var (
	ListComparator_name = map[int32]string{
		0: "LIST_COMPARATOR_INVALID",
		1: "LIST_COMPARATOR_ANY_OF",
	}
	ListComparator_value = map[string]int32{
		"LIST_COMPARATOR_INVALID": 0,
		"LIST_COMPARATOR_ANY_OF":  1,
	}
)

func (x ListComparator) Enum() *ListComparator {
	p := new(ListComparator)
	*p = x
	return p
}

func (x ListComparator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListComparator) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_filter_pub_proto_enumTypes[1].Descriptor()
}

func (ListComparator) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_filter_pub_proto_enumTypes[1]
}

func (x ListComparator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListComparator.Descriptor instead.
func (ListComparator) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_filter_pub_proto_rawDescGZIP(), []int{1}
}

// A Statement is the building block of the entity filter. The outermost statement is conceptually
// the root node of an "expression tree" which allows for the construction of complete boolean
// logic statements. Statements are formed by grouping sets of children statement(s) or predicate(s)
// according to the boolean operation which is to be applied.
//
// For example, the criteria "take an action if an entity is hostile and an air vehicle" can be
// represented as: Statement1: { AndOperation: { Predicate1, Predicate2 } }. Where Statement1
// is the root of the expression tree, with an AND operation that is applied to children
// predicates. The predicates themselves encode "entity is hostile" and "entity is air vehicle."
type Statement struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Operation:
	//
	//	*Statement_And
	//	*Statement_Or
	//	*Statement_Not
	//	*Statement_List
	//	*Statement_Predicate
	Operation     isStatement_Operation `protobuf_oneof:"operation"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Statement) Reset() {
	*x = Statement{}
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Statement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statement) ProtoMessage() {}

func (x *Statement) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statement.ProtoReflect.Descriptor instead.
func (*Statement) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_filter_pub_proto_rawDescGZIP(), []int{0}
}

func (x *Statement) GetOperation() isStatement_Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *Statement) GetAnd() *AndOperation {
	if x != nil {
		if x, ok := x.Operation.(*Statement_And); ok {
			return x.And
		}
	}
	return nil
}

func (x *Statement) GetOr() *OrOperation {
	if x != nil {
		if x, ok := x.Operation.(*Statement_Or); ok {
			return x.Or
		}
	}
	return nil
}

func (x *Statement) GetNot() *NotOperation {
	if x != nil {
		if x, ok := x.Operation.(*Statement_Not); ok {
			return x.Not
		}
	}
	return nil
}

func (x *Statement) GetList() *ListOperation {
	if x != nil {
		if x, ok := x.Operation.(*Statement_List); ok {
			return x.List
		}
	}
	return nil
}

func (x *Statement) GetPredicate() *Predicate {
	if x != nil {
		if x, ok := x.Operation.(*Statement_Predicate); ok {
			return x.Predicate
		}
	}
	return nil
}

type isStatement_Operation interface {
	isStatement_Operation()
}

type Statement_And struct {
	And *AndOperation `protobuf:"bytes,1,opt,name=and,proto3,oneof"`
}

type Statement_Or struct {
	Or *OrOperation `protobuf:"bytes,2,opt,name=or,proto3,oneof"`
}

type Statement_Not struct {
	Not *NotOperation `protobuf:"bytes,3,opt,name=not,proto3,oneof"`
}

type Statement_List struct {
	List *ListOperation `protobuf:"bytes,4,opt,name=list,proto3,oneof"`
}

type Statement_Predicate struct {
	Predicate *Predicate `protobuf:"bytes,5,opt,name=predicate,proto3,oneof"`
}

func (*Statement_And) isStatement_Operation() {}

func (*Statement_Or) isStatement_Operation() {}

func (*Statement_Not) isStatement_Operation() {}

func (*Statement_List) isStatement_Operation() {}

func (*Statement_Predicate) isStatement_Operation() {}

// The AndOperation represents the boolean AND operation, which is to be applied to the list of
// children statement(s) or predicate(s).
type AndOperation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Children:
	//
	//	*AndOperation_PredicateSet
	//	*AndOperation_StatementSet
	Children      isAndOperation_Children `protobuf_oneof:"children"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AndOperation) Reset() {
	*x = AndOperation{}
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AndOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndOperation) ProtoMessage() {}

func (x *AndOperation) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndOperation.ProtoReflect.Descriptor instead.
func (*AndOperation) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_filter_pub_proto_rawDescGZIP(), []int{1}
}

func (x *AndOperation) GetChildren() isAndOperation_Children {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *AndOperation) GetPredicateSet() *PredicateSet {
	if x != nil {
		if x, ok := x.Children.(*AndOperation_PredicateSet); ok {
			return x.PredicateSet
		}
	}
	return nil
}

func (x *AndOperation) GetStatementSet() *StatementSet {
	if x != nil {
		if x, ok := x.Children.(*AndOperation_StatementSet); ok {
			return x.StatementSet
		}
	}
	return nil
}

type isAndOperation_Children interface {
	isAndOperation_Children()
}

type AndOperation_PredicateSet struct {
	PredicateSet *PredicateSet `protobuf:"bytes,1,opt,name=predicate_set,json=predicateSet,proto3,oneof"`
}

type AndOperation_StatementSet struct {
	StatementSet *StatementSet `protobuf:"bytes,2,opt,name=statement_set,json=statementSet,proto3,oneof"`
}

func (*AndOperation_PredicateSet) isAndOperation_Children() {}

func (*AndOperation_StatementSet) isAndOperation_Children() {}

// The OrOperation represents the boolean OR operation, which is to be applied to the list of
// children statement(s) or predicate(s).
type OrOperation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Children:
	//
	//	*OrOperation_PredicateSet
	//	*OrOperation_StatementSet
	Children      isOrOperation_Children `protobuf_oneof:"children"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrOperation) Reset() {
	*x = OrOperation{}
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrOperation) ProtoMessage() {}

func (x *OrOperation) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrOperation.ProtoReflect.Descriptor instead.
func (*OrOperation) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_filter_pub_proto_rawDescGZIP(), []int{2}
}

func (x *OrOperation) GetChildren() isOrOperation_Children {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *OrOperation) GetPredicateSet() *PredicateSet {
	if x != nil {
		if x, ok := x.Children.(*OrOperation_PredicateSet); ok {
			return x.PredicateSet
		}
	}
	return nil
}

func (x *OrOperation) GetStatementSet() *StatementSet {
	if x != nil {
		if x, ok := x.Children.(*OrOperation_StatementSet); ok {
			return x.StatementSet
		}
	}
	return nil
}

type isOrOperation_Children interface {
	isOrOperation_Children()
}

type OrOperation_PredicateSet struct {
	PredicateSet *PredicateSet `protobuf:"bytes,1,opt,name=predicate_set,json=predicateSet,proto3,oneof"`
}

type OrOperation_StatementSet struct {
	StatementSet *StatementSet `protobuf:"bytes,2,opt,name=statement_set,json=statementSet,proto3,oneof"`
}

func (*OrOperation_PredicateSet) isOrOperation_Children() {}

func (*OrOperation_StatementSet) isOrOperation_Children() {}

// The NotOperation represents the boolean NOT operation, which can only be applied to a single
// child predicate or statement.
type NotOperation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Child:
	//
	//	*NotOperation_Predicate
	//	*NotOperation_Statement
	Child         isNotOperation_Child `protobuf_oneof:"child"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotOperation) Reset() {
	*x = NotOperation{}
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotOperation) ProtoMessage() {}

func (x *NotOperation) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotOperation.ProtoReflect.Descriptor instead.
func (*NotOperation) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_filter_pub_proto_rawDescGZIP(), []int{3}
}

func (x *NotOperation) GetChild() isNotOperation_Child {
	if x != nil {
		return x.Child
	}
	return nil
}

func (x *NotOperation) GetPredicate() *Predicate {
	if x != nil {
		if x, ok := x.Child.(*NotOperation_Predicate); ok {
			return x.Predicate
		}
	}
	return nil
}

func (x *NotOperation) GetStatement() *Statement {
	if x != nil {
		if x, ok := x.Child.(*NotOperation_Statement); ok {
			return x.Statement
		}
	}
	return nil
}

type isNotOperation_Child interface {
	isNotOperation_Child()
}

type NotOperation_Predicate struct {
	Predicate *Predicate `protobuf:"bytes,1,opt,name=predicate,proto3,oneof"`
}

type NotOperation_Statement struct {
	Statement *Statement `protobuf:"bytes,2,opt,name=statement,proto3,oneof"`
}

func (*NotOperation_Predicate) isNotOperation_Child() {}

func (*NotOperation_Statement) isNotOperation_Child() {}

// The ListOperation represents an operation against a proto list. If the list is of primitive proto
// type (e.g. int32), paths in all child predicates should be left empty. If the list is of message
// proto type (e.g. Sensor), paths in all child predicates should be relative to the list path.
//
// For example, the criteria "take an action if an entity has any sensor with sensor_id='sensor' and
// OperationalState=STATE_OFF" would be modeled as:
// Predicate1: { path: "sensor_id", comparator: EQUAL_TO, value: "sensor" }
// Predicate2: { path: "operational_state", comparator: EQUAL_TO, value: STATE_OFF }
//
// Statement2: { AndOperation: PredicateSet: { <Predicate1>, <Predicate2> } }
// ListOperation: { list_path: "sensors.sensors", list_comparator: ANY, statement: <Statement2> }
// Statement1: { ListOperation: <ListOperation> }
//
// Note that in the above, the child predicates of the list operation have paths relative to the
// list_path because the list is comprised of message not primitive types.
type ListOperation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list_path specifies the repeated field on an entity to which this operation applies.
	ListPath string `protobuf:"bytes,1,opt,name=list_path,json=listPath,proto3" json:"list_path,omitempty"`
	// The list_comparator specifies how to compose the boolean results from the child statement
	// for each member of the specified list.
	ListComparator ListComparator `protobuf:"varint,2,opt,name=list_comparator,json=listComparator,proto3,enum=anduril.entitymanager.v1.ListComparator" json:"list_comparator,omitempty"`
	// The statement is a new expression tree conceptually rooted at type of the list. It determines
	// how each member of the list is evaluated.
	Statement     *Statement `protobuf:"bytes,3,opt,name=statement,proto3" json:"statement,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOperation) Reset() {
	*x = ListOperation{}
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOperation) ProtoMessage() {}

func (x *ListOperation) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOperation.ProtoReflect.Descriptor instead.
func (*ListOperation) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_filter_pub_proto_rawDescGZIP(), []int{4}
}

func (x *ListOperation) GetListPath() string {
	if x != nil {
		return x.ListPath
	}
	return ""
}

func (x *ListOperation) GetListComparator() ListComparator {
	if x != nil {
		return x.ListComparator
	}
	return ListComparator_LIST_COMPARATOR_INVALID
}

func (x *ListOperation) GetStatement() *Statement {
	if x != nil {
		return x.Statement
	}
	return nil
}

// The PredicateSet represents a list of predicates or "leaf nodes" in the expression tree, which
// can be directly evaluated to a boolean TRUE/FALSE result.
type PredicateSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Predicates    []*Predicate           `protobuf:"bytes,1,rep,name=predicates,proto3" json:"predicates,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PredicateSet) Reset() {
	*x = PredicateSet{}
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PredicateSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredicateSet) ProtoMessage() {}

func (x *PredicateSet) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredicateSet.ProtoReflect.Descriptor instead.
func (*PredicateSet) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_filter_pub_proto_rawDescGZIP(), []int{5}
}

func (x *PredicateSet) GetPredicates() []*Predicate {
	if x != nil {
		return x.Predicates
	}
	return nil
}

// The StatementSet represents a list of statements or "tree nodes," each of which follow the same
// behavior as the Statement proto message.
type StatementSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Statements    []*Statement           `protobuf:"bytes,1,rep,name=statements,proto3" json:"statements,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatementSet) Reset() {
	*x = StatementSet{}
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatementSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatementSet) ProtoMessage() {}

func (x *StatementSet) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatementSet.ProtoReflect.Descriptor instead.
func (*StatementSet) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_filter_pub_proto_rawDescGZIP(), []int{6}
}

func (x *StatementSet) GetStatements() []*Statement {
	if x != nil {
		return x.Statements
	}
	return nil
}

// The Predicate fully encodes the information required to make an evaluation of an entity field
// against a given static value, resulting in a boolean TRUE/FALSE result. The structure of a
// predicate will always follow: "{entity-value} {comparator} {fixed-value}" where the entity value
// is determined by the field path.
//
// For example, a predicate would read as: "{entity.location.velocity_enu} {LESS_THAN} {500kph}"
type Predicate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The field_path determines which field on an entity is being referenced in this predicate. For
	// example: correlated.primary_entity_id would be primary_entity_id in correlated component.
	FieldPath string `protobuf:"bytes,1,opt,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	// The value determines the fixed value against which the entity field is to be compared.
	// In the case of COMPARATOR_MATCH_ALL, the value contents do not matter as long as the Value is a supported
	// type.
	Value *Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// The comparator determines the manner in which the entity field and static value are compared.
	// Comparators may only be applied to certain values. For example, the WITHIN comparator cannot
	// be used for a boolean value comparison.
	Comparator    Comparator `protobuf:"varint,3,opt,name=comparator,proto3,enum=anduril.entitymanager.v1.Comparator" json:"comparator,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Predicate) Reset() {
	*x = Predicate{}
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Predicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Predicate) ProtoMessage() {}

func (x *Predicate) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Predicate.ProtoReflect.Descriptor instead.
func (*Predicate) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_filter_pub_proto_rawDescGZIP(), []int{7}
}

func (x *Predicate) GetFieldPath() string {
	if x != nil {
		return x.FieldPath
	}
	return ""
}

func (x *Predicate) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Predicate) GetComparator() Comparator {
	if x != nil {
		return x.Comparator
	}
	return Comparator_COMPARATOR_INVALID
}

// The Value represents the information against which an entity field is evaluated. It is one of
// a fixed set of types, each of which correspond to specific comparators. See "ComparatorType"
// for the full list of Value <-> Comparator mappings.
type Value struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Value_BooleanType
	//	*Value_NumericType
	//	*Value_StringType
	//	*Value_EnumType
	//	*Value_TimestampType
	//	*Value_BoundedShapeType
	//	*Value_PositionType
	//	*Value_HeadingType
	//	*Value_ListType
	//	*Value_RangeType
	Type          isValue_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Value) Reset() {
	*x = Value{}
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_filter_pub_proto_rawDescGZIP(), []int{8}
}

func (x *Value) GetType() isValue_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Value) GetBooleanType() *BooleanType {
	if x != nil {
		if x, ok := x.Type.(*Value_BooleanType); ok {
			return x.BooleanType
		}
	}
	return nil
}

func (x *Value) GetNumericType() *NumericType {
	if x != nil {
		if x, ok := x.Type.(*Value_NumericType); ok {
			return x.NumericType
		}
	}
	return nil
}

func (x *Value) GetStringType() *StringType {
	if x != nil {
		if x, ok := x.Type.(*Value_StringType); ok {
			return x.StringType
		}
	}
	return nil
}

func (x *Value) GetEnumType() *EnumType {
	if x != nil {
		if x, ok := x.Type.(*Value_EnumType); ok {
			return x.EnumType
		}
	}
	return nil
}

func (x *Value) GetTimestampType() *TimestampType {
	if x != nil {
		if x, ok := x.Type.(*Value_TimestampType); ok {
			return x.TimestampType
		}
	}
	return nil
}

func (x *Value) GetBoundedShapeType() *BoundedShapeType {
	if x != nil {
		if x, ok := x.Type.(*Value_BoundedShapeType); ok {
			return x.BoundedShapeType
		}
	}
	return nil
}

func (x *Value) GetPositionType() *PositionType {
	if x != nil {
		if x, ok := x.Type.(*Value_PositionType); ok {
			return x.PositionType
		}
	}
	return nil
}

func (x *Value) GetHeadingType() *HeadingType {
	if x != nil {
		if x, ok := x.Type.(*Value_HeadingType); ok {
			return x.HeadingType
		}
	}
	return nil
}

func (x *Value) GetListType() *ListType {
	if x != nil {
		if x, ok := x.Type.(*Value_ListType); ok {
			return x.ListType
		}
	}
	return nil
}

func (x *Value) GetRangeType() *RangeType {
	if x != nil {
		if x, ok := x.Type.(*Value_RangeType); ok {
			return x.RangeType
		}
	}
	return nil
}

type isValue_Type interface {
	isValue_Type()
}

type Value_BooleanType struct {
	BooleanType *BooleanType `protobuf:"bytes,1,opt,name=boolean_type,json=booleanType,proto3,oneof"`
}

type Value_NumericType struct {
	NumericType *NumericType `protobuf:"bytes,2,opt,name=numeric_type,json=numericType,proto3,oneof"`
}

type Value_StringType struct {
	StringType *StringType `protobuf:"bytes,3,opt,name=string_type,json=stringType,proto3,oneof"`
}

type Value_EnumType struct {
	EnumType *EnumType `protobuf:"bytes,4,opt,name=enum_type,json=enumType,proto3,oneof"`
}

type Value_TimestampType struct {
	TimestampType *TimestampType `protobuf:"bytes,5,opt,name=timestamp_type,json=timestampType,proto3,oneof"`
}

type Value_BoundedShapeType struct {
	BoundedShapeType *BoundedShapeType `protobuf:"bytes,6,opt,name=bounded_shape_type,json=boundedShapeType,proto3,oneof"`
}

type Value_PositionType struct {
	PositionType *PositionType `protobuf:"bytes,7,opt,name=position_type,json=positionType,proto3,oneof"`
}

type Value_HeadingType struct {
	HeadingType *HeadingType `protobuf:"bytes,8,opt,name=heading_type,json=headingType,proto3,oneof"`
}

type Value_ListType struct {
	ListType *ListType `protobuf:"bytes,9,opt,name=list_type,json=listType,proto3,oneof"`
}

type Value_RangeType struct {
	RangeType *RangeType `protobuf:"bytes,10,opt,name=range_type,json=rangeType,proto3,oneof"`
}

func (*Value_BooleanType) isValue_Type() {}

func (*Value_NumericType) isValue_Type() {}

func (*Value_StringType) isValue_Type() {}

func (*Value_EnumType) isValue_Type() {}

func (*Value_TimestampType) isValue_Type() {}

func (*Value_BoundedShapeType) isValue_Type() {}

func (*Value_PositionType) isValue_Type() {}

func (*Value_HeadingType) isValue_Type() {}

func (*Value_ListType) isValue_Type() {}

func (*Value_RangeType) isValue_Type() {}

// The BooleanType represents a static boolean value.
type BooleanType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         bool                   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BooleanType) Reset() {
	*x = BooleanType{}
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BooleanType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanType) ProtoMessage() {}

func (x *BooleanType) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanType.ProtoReflect.Descriptor instead.
func (*BooleanType) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_filter_pub_proto_rawDescGZIP(), []int{9}
}

func (x *BooleanType) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

// The NumericType represents static numeric values. It supports all numeric primitives supported
// by the proto3 language specification.
type NumericType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*NumericType_DoubleValue
	//	*NumericType_FloatValue
	//	*NumericType_Int32Value
	//	*NumericType_Int64Value
	//	*NumericType_Uint32Value
	//	*NumericType_Uint64Value
	Value         isNumericType_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NumericType) Reset() {
	*x = NumericType{}
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NumericType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericType) ProtoMessage() {}

func (x *NumericType) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericType.ProtoReflect.Descriptor instead.
func (*NumericType) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_filter_pub_proto_rawDescGZIP(), []int{10}
}

func (x *NumericType) GetValue() isNumericType_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *NumericType) GetDoubleValue() float64 {
	if x != nil {
		if x, ok := x.Value.(*NumericType_DoubleValue); ok {
			return x.DoubleValue
		}
	}
	return 0
}

func (x *NumericType) GetFloatValue() float32 {
	if x != nil {
		if x, ok := x.Value.(*NumericType_FloatValue); ok {
			return x.FloatValue
		}
	}
	return 0
}

func (x *NumericType) GetInt32Value() int32 {
	if x != nil {
		if x, ok := x.Value.(*NumericType_Int32Value); ok {
			return x.Int32Value
		}
	}
	return 0
}

func (x *NumericType) GetInt64Value() int64 {
	if x != nil {
		if x, ok := x.Value.(*NumericType_Int64Value); ok {
			return x.Int64Value
		}
	}
	return 0
}

func (x *NumericType) GetUint32Value() uint32 {
	if x != nil {
		if x, ok := x.Value.(*NumericType_Uint32Value); ok {
			return x.Uint32Value
		}
	}
	return 0
}

func (x *NumericType) GetUint64Value() uint64 {
	if x != nil {
		if x, ok := x.Value.(*NumericType_Uint64Value); ok {
			return x.Uint64Value
		}
	}
	return 0
}

type isNumericType_Value interface {
	isNumericType_Value()
}

type NumericType_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type NumericType_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type NumericType_Int32Value struct {
	Int32Value int32 `protobuf:"varint,3,opt,name=int32_value,json=int32Value,proto3,oneof"`
}

type NumericType_Int64Value struct {
	Int64Value int64 `protobuf:"varint,4,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type NumericType_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,5,opt,name=uint32_value,json=uint32Value,proto3,oneof"`
}

type NumericType_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,6,opt,name=uint64_value,json=uint64Value,proto3,oneof"`
}

func (*NumericType_DoubleValue) isNumericType_Value() {}

func (*NumericType_FloatValue) isNumericType_Value() {}

func (*NumericType_Int32Value) isNumericType_Value() {}

func (*NumericType_Int64Value) isNumericType_Value() {}

func (*NumericType_Uint32Value) isNumericType_Value() {}

func (*NumericType_Uint64Value) isNumericType_Value() {}

// The StringType represents static string values.
type StringType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringType) Reset() {
	*x = StringType{}
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringType) ProtoMessage() {}

func (x *StringType) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringType.ProtoReflect.Descriptor instead.
func (*StringType) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_filter_pub_proto_rawDescGZIP(), []int{11}
}

func (x *StringType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// The EnumType represents members of well-known anduril ontologies, such as "disposition." When
// such a value is specified, the evaluation library expects the integer representation of the enum
// value. For example, a disposition derived from ontology.v1 such as "DISPOSITION_HOSTILE" should be
// represented with the integer value 2.
type EnumType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         int32                  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnumType) Reset() {
	*x = EnumType{}
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnumType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumType) ProtoMessage() {}

func (x *EnumType) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumType.ProtoReflect.Descriptor instead.
func (*EnumType) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_filter_pub_proto_rawDescGZIP(), []int{12}
}

func (x *EnumType) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// A List of Values for use with the IN comparator.
type ListType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []*Value               `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListType) Reset() {
	*x = ListType{}
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListType) ProtoMessage() {}

func (x *ListType) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListType.ProtoReflect.Descriptor instead.
func (*ListType) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_filter_pub_proto_rawDescGZIP(), []int{13}
}

func (x *ListType) GetValues() []*Value {
	if x != nil {
		return x.Values
	}
	return nil
}

// The TimestampType represents a static timestamp value.
type TimestampType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimestampType) Reset() {
	*x = TimestampType{}
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimestampType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampType) ProtoMessage() {}

func (x *TimestampType) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampType.ProtoReflect.Descriptor instead.
func (*TimestampType) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_filter_pub_proto_rawDescGZIP(), []int{14}
}

func (x *TimestampType) GetValue() *timestamppb.Timestamp {
	if x != nil {
		return x.Value
	}
	return nil
}

// The PositionType represents any fixed LLA point in space.
type PositionType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *Position              `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PositionType) Reset() {
	*x = PositionType{}
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PositionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionType) ProtoMessage() {}

func (x *PositionType) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionType.ProtoReflect.Descriptor instead.
func (*PositionType) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_filter_pub_proto_rawDescGZIP(), []int{15}
}

func (x *PositionType) GetValue() *Position {
	if x != nil {
		return x.Value
	}
	return nil
}

// The BoundedShapeType represents any static fully-enclosed shape.
type BoundedShapeType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*BoundedShapeType_PolygonValue
	Value         isBoundedShapeType_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoundedShapeType) Reset() {
	*x = BoundedShapeType{}
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoundedShapeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundedShapeType) ProtoMessage() {}

func (x *BoundedShapeType) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundedShapeType.ProtoReflect.Descriptor instead.
func (*BoundedShapeType) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_filter_pub_proto_rawDescGZIP(), []int{16}
}

func (x *BoundedShapeType) GetValue() isBoundedShapeType_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *BoundedShapeType) GetPolygonValue() *GeoPolygon {
	if x != nil {
		if x, ok := x.Value.(*BoundedShapeType_PolygonValue); ok {
			return x.PolygonValue
		}
	}
	return nil
}

type isBoundedShapeType_Value interface {
	isBoundedShapeType_Value()
}

type BoundedShapeType_PolygonValue struct {
	PolygonValue *GeoPolygon `protobuf:"bytes,1,opt,name=polygon_value,json=polygonValue,proto3,oneof"`
}

func (*BoundedShapeType_PolygonValue) isBoundedShapeType_Value() {}

// The HeadingType represents the heading in degrees for an entity's
// attitudeEnu quaternion to be compared against. Defaults between a range of 0 to 360
type HeadingType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         int32                  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeadingType) Reset() {
	*x = HeadingType{}
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeadingType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadingType) ProtoMessage() {}

func (x *HeadingType) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadingType.ProtoReflect.Descriptor instead.
func (*HeadingType) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_filter_pub_proto_rawDescGZIP(), []int{17}
}

func (x *HeadingType) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// The RangeType represents a numeric range.
// Whether endpoints are included are based on the comparator used.
// Both endpoints must be of the same numeric type.
type RangeType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         *NumericType           `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End           *NumericType           `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RangeType) Reset() {
	*x = RangeType{}
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeType) ProtoMessage() {}

func (x *RangeType) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeType.ProtoReflect.Descriptor instead.
func (*RangeType) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_filter_pub_proto_rawDescGZIP(), []int{18}
}

func (x *RangeType) GetStart() *NumericType {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *RangeType) GetEnd() *NumericType {
	if x != nil {
		return x.End
	}
	return nil
}

var File_anduril_entitymanager_v1_filter_pub_proto protoreflect.FileDescriptor

const file_anduril_entitymanager_v1_filter_pub_proto_rawDesc = "" +
	"\n" +
	")anduril/entitymanager/v1/filter.pub.proto\x12\x18anduril.entitymanager.v1\x1a,anduril/entitymanager/v1/geoentity.pub.proto\x1a+anduril/entitymanager/v1/location.pub.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xcd\x02\n" +
	"\tStatement\x12:\n" +
	"\x03and\x18\x01 \x01(\v2&.anduril.entitymanager.v1.AndOperationH\x00R\x03and\x127\n" +
	"\x02or\x18\x02 \x01(\v2%.anduril.entitymanager.v1.OrOperationH\x00R\x02or\x12:\n" +
	"\x03not\x18\x03 \x01(\v2&.anduril.entitymanager.v1.NotOperationH\x00R\x03not\x12=\n" +
	"\x04list\x18\x04 \x01(\v2'.anduril.entitymanager.v1.ListOperationH\x00R\x04list\x12C\n" +
	"\tpredicate\x18\x05 \x01(\v2#.anduril.entitymanager.v1.PredicateH\x00R\tpredicateB\v\n" +
	"\toperation\"\xb8\x01\n" +
	"\fAndOperation\x12M\n" +
	"\rpredicate_set\x18\x01 \x01(\v2&.anduril.entitymanager.v1.PredicateSetH\x00R\fpredicateSet\x12M\n" +
	"\rstatement_set\x18\x02 \x01(\v2&.anduril.entitymanager.v1.StatementSetH\x00R\fstatementSetB\n" +
	"\n" +
	"\bchildren\"\xb7\x01\n" +
	"\vOrOperation\x12M\n" +
	"\rpredicate_set\x18\x01 \x01(\v2&.anduril.entitymanager.v1.PredicateSetH\x00R\fpredicateSet\x12M\n" +
	"\rstatement_set\x18\x02 \x01(\v2&.anduril.entitymanager.v1.StatementSetH\x00R\fstatementSetB\n" +
	"\n" +
	"\bchildren\"\xa1\x01\n" +
	"\fNotOperation\x12C\n" +
	"\tpredicate\x18\x01 \x01(\v2#.anduril.entitymanager.v1.PredicateH\x00R\tpredicate\x12C\n" +
	"\tstatement\x18\x02 \x01(\v2#.anduril.entitymanager.v1.StatementH\x00R\tstatementB\a\n" +
	"\x05child\"\xc2\x01\n" +
	"\rListOperation\x12\x1b\n" +
	"\tlist_path\x18\x01 \x01(\tR\blistPath\x12Q\n" +
	"\x0flist_comparator\x18\x02 \x01(\x0e2(.anduril.entitymanager.v1.ListComparatorR\x0elistComparator\x12A\n" +
	"\tstatement\x18\x03 \x01(\v2#.anduril.entitymanager.v1.StatementR\tstatement\"S\n" +
	"\fPredicateSet\x12C\n" +
	"\n" +
	"predicates\x18\x01 \x03(\v2#.anduril.entitymanager.v1.PredicateR\n" +
	"predicates\"S\n" +
	"\fStatementSet\x12C\n" +
	"\n" +
	"statements\x18\x01 \x03(\v2#.anduril.entitymanager.v1.StatementR\n" +
	"statements\"\xa7\x01\n" +
	"\tPredicate\x12\x1d\n" +
	"\n" +
	"field_path\x18\x01 \x01(\tR\tfieldPath\x125\n" +
	"\x05value\x18\x02 \x01(\v2\x1f.anduril.entitymanager.v1.ValueR\x05value\x12D\n" +
	"\n" +
	"comparator\x18\x03 \x01(\x0e2$.anduril.entitymanager.v1.ComparatorR\n" +
	"comparator\"\x85\x06\n" +
	"\x05Value\x12J\n" +
	"\fboolean_type\x18\x01 \x01(\v2%.anduril.entitymanager.v1.BooleanTypeH\x00R\vbooleanType\x12J\n" +
	"\fnumeric_type\x18\x02 \x01(\v2%.anduril.entitymanager.v1.NumericTypeH\x00R\vnumericType\x12G\n" +
	"\vstring_type\x18\x03 \x01(\v2$.anduril.entitymanager.v1.StringTypeH\x00R\n" +
	"stringType\x12A\n" +
	"\tenum_type\x18\x04 \x01(\v2\".anduril.entitymanager.v1.EnumTypeH\x00R\benumType\x12P\n" +
	"\x0etimestamp_type\x18\x05 \x01(\v2'.anduril.entitymanager.v1.TimestampTypeH\x00R\rtimestampType\x12Z\n" +
	"\x12bounded_shape_type\x18\x06 \x01(\v2*.anduril.entitymanager.v1.BoundedShapeTypeH\x00R\x10boundedShapeType\x12M\n" +
	"\rposition_type\x18\a \x01(\v2&.anduril.entitymanager.v1.PositionTypeH\x00R\fpositionType\x12J\n" +
	"\fheading_type\x18\b \x01(\v2%.anduril.entitymanager.v1.HeadingTypeH\x00R\vheadingType\x12A\n" +
	"\tlist_type\x18\t \x01(\v2\".anduril.entitymanager.v1.ListTypeH\x00R\blistType\x12D\n" +
	"\n" +
	"range_type\x18\n" +
	" \x01(\v2#.anduril.entitymanager.v1.RangeTypeH\x00R\trangeTypeB\x06\n" +
	"\x04type\"#\n" +
	"\vBooleanType\x12\x14\n" +
	"\x05value\x18\x01 \x01(\bR\x05value\"\xee\x01\n" +
	"\vNumericType\x12#\n" +
	"\fdouble_value\x18\x01 \x01(\x01H\x00R\vdoubleValue\x12!\n" +
	"\vfloat_value\x18\x02 \x01(\x02H\x00R\n" +
	"floatValue\x12!\n" +
	"\vint32_value\x18\x03 \x01(\x05H\x00R\n" +
	"int32Value\x12!\n" +
	"\vint64_value\x18\x04 \x01(\x03H\x00R\n" +
	"int64Value\x12#\n" +
	"\fuint32_value\x18\x05 \x01(\rH\x00R\vuint32Value\x12#\n" +
	"\fuint64_value\x18\x06 \x01(\x04H\x00R\vuint64ValueB\a\n" +
	"\x05value\"\"\n" +
	"\n" +
	"StringType\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\" \n" +
	"\bEnumType\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x05R\x05value\"C\n" +
	"\bListType\x127\n" +
	"\x06values\x18\x01 \x03(\v2\x1f.anduril.entitymanager.v1.ValueR\x06values\"A\n" +
	"\rTimestampType\x120\n" +
	"\x05value\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x05value\"H\n" +
	"\fPositionType\x128\n" +
	"\x05value\x18\x01 \x01(\v2\".anduril.entitymanager.v1.PositionR\x05value\"h\n" +
	"\x10BoundedShapeType\x12K\n" +
	"\rpolygon_value\x18\x01 \x01(\v2$.anduril.entitymanager.v1.GeoPolygonH\x00R\fpolygonValueB\a\n" +
	"\x05value\"#\n" +
	"\vHeadingType\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x05R\x05value\"\x81\x01\n" +
	"\tRangeType\x12;\n" +
	"\x05start\x18\x01 \x01(\v2%.anduril.entitymanager.v1.NumericTypeR\x05start\x127\n" +
	"\x03end\x18\x02 \x01(\v2%.anduril.entitymanager.v1.NumericTypeR\x03end*\x8c\x03\n" +
	"\n" +
	"Comparator\x12\x16\n" +
	"\x12COMPARATOR_INVALID\x10\x00\x12\x18\n" +
	"\x14COMPARATOR_MATCH_ALL\x10\v\x12\x17\n" +
	"\x13COMPARATOR_EQUALITY\x10\x01\x12\x11\n" +
	"\rCOMPARATOR_IN\x10\t\x12\x18\n" +
	"\x14COMPARATOR_LESS_THAN\x10\x02\x12\x1b\n" +
	"\x17COMPARATOR_GREATER_THAN\x10\x03\x12!\n" +
	"\x1dCOMPARATOR_LESS_THAN_EQUAL_TO\x10\x04\x12$\n" +
	" COMPARATOR_GREATER_THAN_EQUAL_TO\x10\x05\x12\x15\n" +
	"\x11COMPARATOR_WITHIN\x10\x06\x12\x15\n" +
	"\x11COMPARATOR_EXISTS\x10\a\x12(\n" +
	"$COMPARATOR_CASE_INSENSITIVE_EQUALITY\x10\b\x12+\n" +
	"'COMPARATOR_CASE_INSENSITIVE_EQUALITY_IN\x10\n" +
	"\x12\x1b\n" +
	"\x17COMPARATOR_RANGE_CLOSED\x10\f*I\n" +
	"\x0eListComparator\x12\x1b\n" +
	"\x17LIST_COMPARATOR_INVALID\x10\x00\x12\x1a\n" +
	"\x16LIST_COMPARATOR_ANY_OF\x10\x01B\x80\x02\n" +
	"\x1ccom.anduril.entitymanager.v1B\x0eFilterPubProtoP\x01ZNgithub.com/anduril/lattice-sdk-go/src/anduril/entitymanager/v1;entitymanagerv1\xa2\x02\x03AEX\xaa\x02\x18Anduril.Entitymanager.V1\xca\x02\x18Anduril\\Entitymanager\\V1\xe2\x02$Anduril\\Entitymanager\\V1\\GPBMetadata\xea\x02\x1aAnduril::Entitymanager::V1b\x06proto3"

var (
	file_anduril_entitymanager_v1_filter_pub_proto_rawDescOnce sync.Once
	file_anduril_entitymanager_v1_filter_pub_proto_rawDescData []byte
)

func file_anduril_entitymanager_v1_filter_pub_proto_rawDescGZIP() []byte {
	file_anduril_entitymanager_v1_filter_pub_proto_rawDescOnce.Do(func() {
		file_anduril_entitymanager_v1_filter_pub_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_anduril_entitymanager_v1_filter_pub_proto_rawDesc), len(file_anduril_entitymanager_v1_filter_pub_proto_rawDesc)))
	})
	return file_anduril_entitymanager_v1_filter_pub_proto_rawDescData
}

var file_anduril_entitymanager_v1_filter_pub_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_anduril_entitymanager_v1_filter_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_anduril_entitymanager_v1_filter_pub_proto_goTypes = []any{
	(Comparator)(0),               // 0: anduril.entitymanager.v1.Comparator
	(ListComparator)(0),           // 1: anduril.entitymanager.v1.ListComparator
	(*Statement)(nil),             // 2: anduril.entitymanager.v1.Statement
	(*AndOperation)(nil),          // 3: anduril.entitymanager.v1.AndOperation
	(*OrOperation)(nil),           // 4: anduril.entitymanager.v1.OrOperation
	(*NotOperation)(nil),          // 5: anduril.entitymanager.v1.NotOperation
	(*ListOperation)(nil),         // 6: anduril.entitymanager.v1.ListOperation
	(*PredicateSet)(nil),          // 7: anduril.entitymanager.v1.PredicateSet
	(*StatementSet)(nil),          // 8: anduril.entitymanager.v1.StatementSet
	(*Predicate)(nil),             // 9: anduril.entitymanager.v1.Predicate
	(*Value)(nil),                 // 10: anduril.entitymanager.v1.Value
	(*BooleanType)(nil),           // 11: anduril.entitymanager.v1.BooleanType
	(*NumericType)(nil),           // 12: anduril.entitymanager.v1.NumericType
	(*StringType)(nil),            // 13: anduril.entitymanager.v1.StringType
	(*EnumType)(nil),              // 14: anduril.entitymanager.v1.EnumType
	(*ListType)(nil),              // 15: anduril.entitymanager.v1.ListType
	(*TimestampType)(nil),         // 16: anduril.entitymanager.v1.TimestampType
	(*PositionType)(nil),          // 17: anduril.entitymanager.v1.PositionType
	(*BoundedShapeType)(nil),      // 18: anduril.entitymanager.v1.BoundedShapeType
	(*HeadingType)(nil),           // 19: anduril.entitymanager.v1.HeadingType
	(*RangeType)(nil),             // 20: anduril.entitymanager.v1.RangeType
	(*timestamppb.Timestamp)(nil), // 21: google.protobuf.Timestamp
	(*Position)(nil),              // 22: anduril.entitymanager.v1.Position
	(*GeoPolygon)(nil),            // 23: anduril.entitymanager.v1.GeoPolygon
}
var file_anduril_entitymanager_v1_filter_pub_proto_depIdxs = []int32{
	3,  // 0: anduril.entitymanager.v1.Statement.and:type_name -> anduril.entitymanager.v1.AndOperation
	4,  // 1: anduril.entitymanager.v1.Statement.or:type_name -> anduril.entitymanager.v1.OrOperation
	5,  // 2: anduril.entitymanager.v1.Statement.not:type_name -> anduril.entitymanager.v1.NotOperation
	6,  // 3: anduril.entitymanager.v1.Statement.list:type_name -> anduril.entitymanager.v1.ListOperation
	9,  // 4: anduril.entitymanager.v1.Statement.predicate:type_name -> anduril.entitymanager.v1.Predicate
	7,  // 5: anduril.entitymanager.v1.AndOperation.predicate_set:type_name -> anduril.entitymanager.v1.PredicateSet
	8,  // 6: anduril.entitymanager.v1.AndOperation.statement_set:type_name -> anduril.entitymanager.v1.StatementSet
	7,  // 7: anduril.entitymanager.v1.OrOperation.predicate_set:type_name -> anduril.entitymanager.v1.PredicateSet
	8,  // 8: anduril.entitymanager.v1.OrOperation.statement_set:type_name -> anduril.entitymanager.v1.StatementSet
	9,  // 9: anduril.entitymanager.v1.NotOperation.predicate:type_name -> anduril.entitymanager.v1.Predicate
	2,  // 10: anduril.entitymanager.v1.NotOperation.statement:type_name -> anduril.entitymanager.v1.Statement
	1,  // 11: anduril.entitymanager.v1.ListOperation.list_comparator:type_name -> anduril.entitymanager.v1.ListComparator
	2,  // 12: anduril.entitymanager.v1.ListOperation.statement:type_name -> anduril.entitymanager.v1.Statement
	9,  // 13: anduril.entitymanager.v1.PredicateSet.predicates:type_name -> anduril.entitymanager.v1.Predicate
	2,  // 14: anduril.entitymanager.v1.StatementSet.statements:type_name -> anduril.entitymanager.v1.Statement
	10, // 15: anduril.entitymanager.v1.Predicate.value:type_name -> anduril.entitymanager.v1.Value
	0,  // 16: anduril.entitymanager.v1.Predicate.comparator:type_name -> anduril.entitymanager.v1.Comparator
	11, // 17: anduril.entitymanager.v1.Value.boolean_type:type_name -> anduril.entitymanager.v1.BooleanType
	12, // 18: anduril.entitymanager.v1.Value.numeric_type:type_name -> anduril.entitymanager.v1.NumericType
	13, // 19: anduril.entitymanager.v1.Value.string_type:type_name -> anduril.entitymanager.v1.StringType
	14, // 20: anduril.entitymanager.v1.Value.enum_type:type_name -> anduril.entitymanager.v1.EnumType
	16, // 21: anduril.entitymanager.v1.Value.timestamp_type:type_name -> anduril.entitymanager.v1.TimestampType
	18, // 22: anduril.entitymanager.v1.Value.bounded_shape_type:type_name -> anduril.entitymanager.v1.BoundedShapeType
	17, // 23: anduril.entitymanager.v1.Value.position_type:type_name -> anduril.entitymanager.v1.PositionType
	19, // 24: anduril.entitymanager.v1.Value.heading_type:type_name -> anduril.entitymanager.v1.HeadingType
	15, // 25: anduril.entitymanager.v1.Value.list_type:type_name -> anduril.entitymanager.v1.ListType
	20, // 26: anduril.entitymanager.v1.Value.range_type:type_name -> anduril.entitymanager.v1.RangeType
	10, // 27: anduril.entitymanager.v1.ListType.values:type_name -> anduril.entitymanager.v1.Value
	21, // 28: anduril.entitymanager.v1.TimestampType.value:type_name -> google.protobuf.Timestamp
	22, // 29: anduril.entitymanager.v1.PositionType.value:type_name -> anduril.entitymanager.v1.Position
	23, // 30: anduril.entitymanager.v1.BoundedShapeType.polygon_value:type_name -> anduril.entitymanager.v1.GeoPolygon
	12, // 31: anduril.entitymanager.v1.RangeType.start:type_name -> anduril.entitymanager.v1.NumericType
	12, // 32: anduril.entitymanager.v1.RangeType.end:type_name -> anduril.entitymanager.v1.NumericType
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_anduril_entitymanager_v1_filter_pub_proto_init() }
func file_anduril_entitymanager_v1_filter_pub_proto_init() {
	if File_anduril_entitymanager_v1_filter_pub_proto != nil {
		return
	}
	file_anduril_entitymanager_v1_geoentity_pub_proto_init()
	file_anduril_entitymanager_v1_location_pub_proto_init()
	file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[0].OneofWrappers = []any{
		(*Statement_And)(nil),
		(*Statement_Or)(nil),
		(*Statement_Not)(nil),
		(*Statement_List)(nil),
		(*Statement_Predicate)(nil),
	}
	file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[1].OneofWrappers = []any{
		(*AndOperation_PredicateSet)(nil),
		(*AndOperation_StatementSet)(nil),
	}
	file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[2].OneofWrappers = []any{
		(*OrOperation_PredicateSet)(nil),
		(*OrOperation_StatementSet)(nil),
	}
	file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[3].OneofWrappers = []any{
		(*NotOperation_Predicate)(nil),
		(*NotOperation_Statement)(nil),
	}
	file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[8].OneofWrappers = []any{
		(*Value_BooleanType)(nil),
		(*Value_NumericType)(nil),
		(*Value_StringType)(nil),
		(*Value_EnumType)(nil),
		(*Value_TimestampType)(nil),
		(*Value_BoundedShapeType)(nil),
		(*Value_PositionType)(nil),
		(*Value_HeadingType)(nil),
		(*Value_ListType)(nil),
		(*Value_RangeType)(nil),
	}
	file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[10].OneofWrappers = []any{
		(*NumericType_DoubleValue)(nil),
		(*NumericType_FloatValue)(nil),
		(*NumericType_Int32Value)(nil),
		(*NumericType_Int64Value)(nil),
		(*NumericType_Uint32Value)(nil),
		(*NumericType_Uint64Value)(nil),
	}
	file_anduril_entitymanager_v1_filter_pub_proto_msgTypes[16].OneofWrappers = []any{
		(*BoundedShapeType_PolygonValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_anduril_entitymanager_v1_filter_pub_proto_rawDesc), len(file_anduril_entitymanager_v1_filter_pub_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_anduril_entitymanager_v1_filter_pub_proto_goTypes,
		DependencyIndexes: file_anduril_entitymanager_v1_filter_pub_proto_depIdxs,
		EnumInfos:         file_anduril_entitymanager_v1_filter_pub_proto_enumTypes,
		MessageInfos:      file_anduril_entitymanager_v1_filter_pub_proto_msgTypes,
	}.Build()
	File_anduril_entitymanager_v1_filter_pub_proto = out.File
	file_anduril_entitymanager_v1_filter_pub_proto_goTypes = nil
	file_anduril_entitymanager_v1_filter_pub_proto_depIdxs = nil
}
