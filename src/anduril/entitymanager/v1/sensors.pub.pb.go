// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: anduril/entitymanager/v1/sensors.pub.proto

package entitymanagerv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes the current operational state of a system.
type OperationalState int32

const (
	OperationalState_OPERATIONAL_STATE_INVALID OperationalState = 0
	// sensor exists but is deliberately turned off
	OperationalState_OPERATIONAL_STATE_OFF OperationalState = 1
	// sensor is not operational but some reason other than being "Off" (e.g., equipment malfunction)
	OperationalState_OPERATIONAL_STATE_NON_OPERATIONAL OperationalState = 2
	// sensor is receiving information but in some reduced status (e.g., off calibration)
	OperationalState_OPERATIONAL_STATE_DEGRADED OperationalState = 3
	// fully functional
	OperationalState_OPERATIONAL_STATE_OPERATIONAL OperationalState = 4
	// sensor is being actively denied
	OperationalState_OPERATIONAL_STATE_DENIED OperationalState = 5
)

// Enum value maps for OperationalState.
var (
	OperationalState_name = map[int32]string{
		0: "OPERATIONAL_STATE_INVALID",
		1: "OPERATIONAL_STATE_OFF",
		2: "OPERATIONAL_STATE_NON_OPERATIONAL",
		3: "OPERATIONAL_STATE_DEGRADED",
		4: "OPERATIONAL_STATE_OPERATIONAL",
		5: "OPERATIONAL_STATE_DENIED",
	}
	OperationalState_value = map[string]int32{
		"OPERATIONAL_STATE_INVALID":         0,
		"OPERATIONAL_STATE_OFF":             1,
		"OPERATIONAL_STATE_NON_OPERATIONAL": 2,
		"OPERATIONAL_STATE_DEGRADED":        3,
		"OPERATIONAL_STATE_OPERATIONAL":     4,
		"OPERATIONAL_STATE_DENIED":          5,
	}
)

func (x OperationalState) Enum() *OperationalState {
	p := new(OperationalState)
	*p = x
	return p
}

func (x OperationalState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationalState) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_sensors_pub_proto_enumTypes[0].Descriptor()
}

func (OperationalState) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_sensors_pub_proto_enumTypes[0]
}

func (x OperationalState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationalState.Descriptor instead.
func (OperationalState) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_sensors_pub_proto_rawDescGZIP(), []int{0}
}

// Enumerates the possible sensor modes which were active for this sensor field of view.
type SensorMode int32

const (
	SensorMode_SENSOR_MODE_INVALID        SensorMode = 0
	SensorMode_SENSOR_MODE_SEARCH         SensorMode = 1
	SensorMode_SENSOR_MODE_TRACK          SensorMode = 2
	SensorMode_SENSOR_MODE_WEAPON_SUPPORT SensorMode = 3
	SensorMode_SENSOR_MODE_AUTO           SensorMode = 4
	SensorMode_SENSOR_MODE_MUTE           SensorMode = 5
)

// Enum value maps for SensorMode.
var (
	SensorMode_name = map[int32]string{
		0: "SENSOR_MODE_INVALID",
		1: "SENSOR_MODE_SEARCH",
		2: "SENSOR_MODE_TRACK",
		3: "SENSOR_MODE_WEAPON_SUPPORT",
		4: "SENSOR_MODE_AUTO",
		5: "SENSOR_MODE_MUTE",
	}
	SensorMode_value = map[string]int32{
		"SENSOR_MODE_INVALID":        0,
		"SENSOR_MODE_SEARCH":         1,
		"SENSOR_MODE_TRACK":          2,
		"SENSOR_MODE_WEAPON_SUPPORT": 3,
		"SENSOR_MODE_AUTO":           4,
		"SENSOR_MODE_MUTE":           5,
	}
)

func (x SensorMode) Enum() *SensorMode {
	p := new(SensorMode)
	*p = x
	return p
}

func (x SensorMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SensorMode) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_sensors_pub_proto_enumTypes[1].Descriptor()
}

func (SensorMode) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_sensors_pub_proto_enumTypes[1]
}

func (x SensorMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SensorMode.Descriptor instead.
func (SensorMode) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_sensors_pub_proto_rawDescGZIP(), []int{1}
}

type SensorType int32

const (
	SensorType_SENSOR_TYPE_INVALID     SensorType = 0
	SensorType_SENSOR_TYPE_RADAR       SensorType = 1
	SensorType_SENSOR_TYPE_CAMERA      SensorType = 2
	SensorType_SENSOR_TYPE_TRANSPONDER SensorType = 3
	SensorType_SENSOR_TYPE_RF          SensorType = 4
	SensorType_SENSOR_TYPE_GPS         SensorType = 5
	SensorType_SENSOR_TYPE_PTU_POS     SensorType = 6
	SensorType_SENSOR_TYPE_WISP        SensorType = 7
	SensorType_SENSOR_TYPE_PERIMETER   SensorType = 8
	SensorType_SENSOR_TYPE_SONAR       SensorType = 9
)

// Enum value maps for SensorType.
var (
	SensorType_name = map[int32]string{
		0: "SENSOR_TYPE_INVALID",
		1: "SENSOR_TYPE_RADAR",
		2: "SENSOR_TYPE_CAMERA",
		3: "SENSOR_TYPE_TRANSPONDER",
		4: "SENSOR_TYPE_RF",
		5: "SENSOR_TYPE_GPS",
		6: "SENSOR_TYPE_PTU_POS",
		7: "SENSOR_TYPE_WISP",
		8: "SENSOR_TYPE_PERIMETER",
		9: "SENSOR_TYPE_SONAR",
	}
	SensorType_value = map[string]int32{
		"SENSOR_TYPE_INVALID":     0,
		"SENSOR_TYPE_RADAR":       1,
		"SENSOR_TYPE_CAMERA":      2,
		"SENSOR_TYPE_TRANSPONDER": 3,
		"SENSOR_TYPE_RF":          4,
		"SENSOR_TYPE_GPS":         5,
		"SENSOR_TYPE_PTU_POS":     6,
		"SENSOR_TYPE_WISP":        7,
		"SENSOR_TYPE_PERIMETER":   8,
		"SENSOR_TYPE_SONAR":       9,
	}
)

func (x SensorType) Enum() *SensorType {
	p := new(SensorType)
	*p = x
	return p
}

func (x SensorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SensorType) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_sensors_pub_proto_enumTypes[2].Descriptor()
}

func (SensorType) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_sensors_pub_proto_enumTypes[2]
}

func (x SensorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SensorType.Descriptor instead.
func (SensorType) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_sensors_pub_proto_rawDescGZIP(), []int{2}
}

// List of sensors available for an entity.
type Sensors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sensors []*Sensor `protobuf:"bytes,1,rep,name=sensors,proto3" json:"sensors,omitempty"`
}

func (x *Sensors) Reset() {
	*x = Sensors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_sensors_pub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sensors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sensors) ProtoMessage() {}

func (x *Sensors) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_sensors_pub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sensors.ProtoReflect.Descriptor instead.
func (*Sensors) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_sensors_pub_proto_rawDescGZIP(), []int{0}
}

func (x *Sensors) GetSensors() []*Sensor {
	if x != nil {
		return x.Sensors
	}
	return nil
}

// Individual sensor configuration.
type Sensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This generally is used to indicate a specific type at a more detailed granularity. E.g. COMInt, LWIR or Echodyne
	SensorId         string           `protobuf:"bytes,1,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	OperationalState OperationalState `protobuf:"varint,3,opt,name=operational_state,json=operationalState,proto3,enum=anduril.entitymanager.v1.OperationalState" json:"operational_state,omitempty"`
	// DEPRECATED -- use `fields_of_view` instead. This field will be marked deprecated and no longer populated by 11/26/2023.
	FieldOfView *FieldOfView `protobuf:"bytes,4,opt,name=field_of_view,json=fieldOfView,proto3" json:"field_of_view,omitempty"`
	// The type of sensor
	SensorType SensorType `protobuf:"varint,5,opt,name=sensor_type,json=sensorType,proto3,enum=anduril.entitymanager.v1.SensorType" json:"sensor_type,omitempty"`
	// A human readable description of the sensor
	SensorDescription string `protobuf:"bytes,6,opt,name=sensor_description,json=sensorDescription,proto3" json:"sensor_description,omitempty"`
	// RF configuration details of the sensor
	RfConfiguraton *RFConfiguration `protobuf:"bytes,7,opt,name=rf_configuraton,json=rfConfiguraton,proto3" json:"rf_configuraton,omitempty"`
	// Time of the latest detection from the sensor
	LastDetectionTimestamp *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_detection_timestamp,json=lastDetectionTimestamp,proto3" json:"last_detection_timestamp,omitempty"`
	// Multiple fields of view for a single sensor component
	FieldsOfView []*FieldOfView `protobuf:"bytes,9,rep,name=fields_of_view,json=fieldsOfView,proto3" json:"fields_of_view,omitempty"`
}

func (x *Sensor) Reset() {
	*x = Sensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_sensors_pub_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sensor) ProtoMessage() {}

func (x *Sensor) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_sensors_pub_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sensor.ProtoReflect.Descriptor instead.
func (*Sensor) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_sensors_pub_proto_rawDescGZIP(), []int{1}
}

func (x *Sensor) GetSensorId() string {
	if x != nil {
		return x.SensorId
	}
	return ""
}

func (x *Sensor) GetOperationalState() OperationalState {
	if x != nil {
		return x.OperationalState
	}
	return OperationalState_OPERATIONAL_STATE_INVALID
}

func (x *Sensor) GetFieldOfView() *FieldOfView {
	if x != nil {
		return x.FieldOfView
	}
	return nil
}

func (x *Sensor) GetSensorType() SensorType {
	if x != nil {
		return x.SensorType
	}
	return SensorType_SENSOR_TYPE_INVALID
}

func (x *Sensor) GetSensorDescription() string {
	if x != nil {
		return x.SensorDescription
	}
	return ""
}

func (x *Sensor) GetRfConfiguraton() *RFConfiguration {
	if x != nil {
		return x.RfConfiguraton
	}
	return nil
}

func (x *Sensor) GetLastDetectionTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastDetectionTimestamp
	}
	return nil
}

func (x *Sensor) GetFieldsOfView() []*FieldOfView {
	if x != nil {
		return x.FieldsOfView
	}
	return nil
}

// Sensor Field Of View closely resembling fov.proto SensorFieldOfView.
type FieldOfView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Id for one instance of a FieldOfView, persisted across multiple updates to provide continuity during
	// smoothing. This is relevant for sensors like an ESM or Radar where the dwell schedule is on the order of
	// milliseconds, making multiple FOVs a requirement for proper display of search and weapon support beams.
	FovId int32 `protobuf:"varint,1,opt,name=fov_id,json=fovId,proto3" json:"fov_id,omitempty"`
	// The Id of the mount the sensor is on.
	MountId string `protobuf:"bytes,2,opt,name=mount_id,json=mountId,proto3" json:"mount_id,omitempty"`
	// The field of view the sensor projected onto the ground.
	ProjectedFrustum *ProjectedFrustum `protobuf:"bytes,3,opt,name=projected_frustum,json=projectedFrustum,proto3" json:"projected_frustum,omitempty"`
	// Center ray of the frustum projected onto the ground.
	ProjectedCenterRay *Position `protobuf:"bytes,4,opt,name=projected_center_ray,json=projectedCenterRay,proto3" json:"projected_center_ray,omitempty"`
	// The origin and direction of the center ray for this sensor relative to the ENU frame. A ray which is aligned with
	// the positive X axis in the sensor frame will be transformed into the ray along the sensor direction in the ENU
	// frame when transformed by the quaternion contained in this pose.
	CenterRayPose *Pose `protobuf:"bytes,5,opt,name=center_ray_pose,json=centerRayPose,proto3" json:"center_ray_pose,omitempty"`
	// Horizontal field of view in radians.
	HorizontalFov float32 `protobuf:"fixed32,6,opt,name=horizontal_fov,json=horizontalFov,proto3" json:"horizontal_fov,omitempty"`
	// Vertical field of view in radians.
	VerticalFov float32 `protobuf:"fixed32,7,opt,name=vertical_fov,json=verticalFov,proto3" json:"vertical_fov,omitempty"`
	// Sensor range in meters.
	Range *wrapperspb.FloatValue `protobuf:"bytes,8,opt,name=range,proto3" json:"range,omitempty"`
	// The mode that this sensor is currently in, used to display for context in the UI. Some sensors can emit multiple
	// sensor field of views with different modes, for example a radar can simultaneously search broadly and perform
	// tighter bounded tracking.
	Mode SensorMode `protobuf:"varint,9,opt,name=mode,proto3,enum=anduril.entitymanager.v1.SensorMode" json:"mode,omitempty"`
}

func (x *FieldOfView) Reset() {
	*x = FieldOfView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_sensors_pub_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldOfView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldOfView) ProtoMessage() {}

func (x *FieldOfView) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_sensors_pub_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldOfView.ProtoReflect.Descriptor instead.
func (*FieldOfView) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_sensors_pub_proto_rawDescGZIP(), []int{2}
}

func (x *FieldOfView) GetFovId() int32 {
	if x != nil {
		return x.FovId
	}
	return 0
}

func (x *FieldOfView) GetMountId() string {
	if x != nil {
		return x.MountId
	}
	return ""
}

func (x *FieldOfView) GetProjectedFrustum() *ProjectedFrustum {
	if x != nil {
		return x.ProjectedFrustum
	}
	return nil
}

func (x *FieldOfView) GetProjectedCenterRay() *Position {
	if x != nil {
		return x.ProjectedCenterRay
	}
	return nil
}

func (x *FieldOfView) GetCenterRayPose() *Pose {
	if x != nil {
		return x.CenterRayPose
	}
	return nil
}

func (x *FieldOfView) GetHorizontalFov() float32 {
	if x != nil {
		return x.HorizontalFov
	}
	return 0
}

func (x *FieldOfView) GetVerticalFov() float32 {
	if x != nil {
		return x.VerticalFov
	}
	return 0
}

func (x *FieldOfView) GetRange() *wrapperspb.FloatValue {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *FieldOfView) GetMode() SensorMode {
	if x != nil {
		return x.Mode
	}
	return SensorMode_SENSOR_MODE_INVALID
}

// Represents a frustum in which which all four corner points project onto the ground. All points in this message
// are optional, if the projection to the ground fails then they will not be populated.
type ProjectedFrustum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Upper left point of the frustum.
	UpperLeft *Position `protobuf:"bytes,1,opt,name=upper_left,json=upperLeft,proto3" json:"upper_left,omitempty"`
	// Upper right point of the frustum.
	UpperRight *Position `protobuf:"bytes,2,opt,name=upper_right,json=upperRight,proto3" json:"upper_right,omitempty"`
	// Bottom right point of the frustum.
	BottomRight *Position `protobuf:"bytes,3,opt,name=bottom_right,json=bottomRight,proto3" json:"bottom_right,omitempty"`
	// Bottom left point of the frustum.
	BottomLeft *Position `protobuf:"bytes,4,opt,name=bottom_left,json=bottomLeft,proto3" json:"bottom_left,omitempty"`
}

func (x *ProjectedFrustum) Reset() {
	*x = ProjectedFrustum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_sensors_pub_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectedFrustum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectedFrustum) ProtoMessage() {}

func (x *ProjectedFrustum) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_sensors_pub_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectedFrustum.ProtoReflect.Descriptor instead.
func (*ProjectedFrustum) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_sensors_pub_proto_rawDescGZIP(), []int{3}
}

func (x *ProjectedFrustum) GetUpperLeft() *Position {
	if x != nil {
		return x.UpperLeft
	}
	return nil
}

func (x *ProjectedFrustum) GetUpperRight() *Position {
	if x != nil {
		return x.UpperRight
	}
	return nil
}

func (x *ProjectedFrustum) GetBottomRight() *Position {
	if x != nil {
		return x.BottomRight
	}
	return nil
}

func (x *ProjectedFrustum) GetBottomLeft() *Position {
	if x != nil {
		return x.BottomLeft
	}
	return nil
}

// Represents RF configurations supported on this sensor.
type RFConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Frequency ranges that are available for this sensor.
	//
	// Deprecated: Marked as deprecated in anduril/entitymanager/v1/sensors.pub.proto.
	FrequencyRange []*FloatRange `protobuf:"bytes,1,rep,name=frequency_range,json=frequencyRange,proto3" json:"frequency_range,omitempty"`
	// Bandwidth ranges that are available for this sensor.
	//
	// Deprecated: Marked as deprecated in anduril/entitymanager/v1/sensors.pub.proto.
	BandwidthRange []*FloatRange `protobuf:"bytes,2,rep,name=bandwidth_range,json=bandwidthRange,proto3" json:"bandwidth_range,omitempty"`
	// Frequency ranges that are available for this sensor.
	FrequencyRangeHz []*FrequencyRange `protobuf:"bytes,3,rep,name=frequency_range_hz,json=frequencyRangeHz,proto3" json:"frequency_range_hz,omitempty"`
	// Bandwidth ranges that are available for this sensor.
	BandwidthRangeHz []*BandwidthRange `protobuf:"bytes,4,rep,name=bandwidth_range_hz,json=bandwidthRangeHz,proto3" json:"bandwidth_range_hz,omitempty"`
}

func (x *RFConfiguration) Reset() {
	*x = RFConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_sensors_pub_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RFConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RFConfiguration) ProtoMessage() {}

func (x *RFConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_sensors_pub_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RFConfiguration.ProtoReflect.Descriptor instead.
func (*RFConfiguration) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_sensors_pub_proto_rawDescGZIP(), []int{4}
}

// Deprecated: Marked as deprecated in anduril/entitymanager/v1/sensors.pub.proto.
func (x *RFConfiguration) GetFrequencyRange() []*FloatRange {
	if x != nil {
		return x.FrequencyRange
	}
	return nil
}

// Deprecated: Marked as deprecated in anduril/entitymanager/v1/sensors.pub.proto.
func (x *RFConfiguration) GetBandwidthRange() []*FloatRange {
	if x != nil {
		return x.BandwidthRange
	}
	return nil
}

func (x *RFConfiguration) GetFrequencyRangeHz() []*FrequencyRange {
	if x != nil {
		return x.FrequencyRangeHz
	}
	return nil
}

func (x *RFConfiguration) GetBandwidthRangeHz() []*BandwidthRange {
	if x != nil {
		return x.BandwidthRangeHz
	}
	return nil
}

// A component that describes the min and max bandwidths of a sensor
type BandwidthRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinimumBandwidth *Bandwidth `protobuf:"bytes,1,opt,name=minimum_bandwidth,json=minimumBandwidth,proto3" json:"minimum_bandwidth,omitempty"`
	MaximumBandwidth *Bandwidth `protobuf:"bytes,2,opt,name=maximum_bandwidth,json=maximumBandwidth,proto3" json:"maximum_bandwidth,omitempty"`
}

func (x *BandwidthRange) Reset() {
	*x = BandwidthRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_sensors_pub_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BandwidthRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BandwidthRange) ProtoMessage() {}

func (x *BandwidthRange) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_sensors_pub_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BandwidthRange.ProtoReflect.Descriptor instead.
func (*BandwidthRange) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_sensors_pub_proto_rawDescGZIP(), []int{5}
}

func (x *BandwidthRange) GetMinimumBandwidth() *Bandwidth {
	if x != nil {
		return x.MinimumBandwidth
	}
	return nil
}

func (x *BandwidthRange) GetMaximumBandwidth() *Bandwidth {
	if x != nil {
		return x.MaximumBandwidth
	}
	return nil
}

// Describes the bandwidth of a signal
type Bandwidth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BandwidthHz *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=bandwidth_hz,json=bandwidthHz,proto3" json:"bandwidth_hz,omitempty"`
}

func (x *Bandwidth) Reset() {
	*x = Bandwidth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_sensors_pub_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bandwidth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bandwidth) ProtoMessage() {}

func (x *Bandwidth) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_sensors_pub_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bandwidth.ProtoReflect.Descriptor instead.
func (*Bandwidth) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_sensors_pub_proto_rawDescGZIP(), []int{6}
}

func (x *Bandwidth) GetBandwidthHz() *wrapperspb.DoubleValue {
	if x != nil {
		return x.BandwidthHz
	}
	return nil
}

var File_anduril_entitymanager_v1_sensors_pub_proto protoreflect.FileDescriptor

var file_anduril_entitymanager_v1_sensors_pub_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x2b, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x29, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x45, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73,
	0x12, 0x3a, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x22, 0xbb, 0x04, 0x0a,
	0x06, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xd0, 0x3e, 0x01, 0x52,
	0x08, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x11, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x66, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x66, 0x56, 0x69, 0x65, 0x77, 0x12, 0x45, 0x0a,
	0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0f, 0x72, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x46, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4b, 0x0a,
	0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x66, 0x56, 0x69, 0x65, 0x77, 0x52, 0x0c, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x4f, 0x66, 0x56, 0x69, 0x65, 0x77, 0x22, 0xed, 0x03, 0x0a, 0x0b, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x66, 0x56, 0x69, 0x65, 0x77, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x6f,
	0x76, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6f, 0x76, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x11,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x75, 0x73, 0x74, 0x75,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x72, 0x75, 0x73,
	0x74, 0x75, 0x6d, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x72,
	0x75, 0x73, 0x74, 0x75, 0x6d, 0x12, 0x54, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x61, 0x79, 0x12, 0x46, 0x0a, 0x0f, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x65, 0x52, 0x0d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x61, 0x79, 0x50,
	0x6f, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
	0x6c, 0x5f, 0x66, 0x6f, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x46, 0x6f, 0x76, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x6f, 0x76, 0x12, 0x31, 0x0a,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x38, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xa6, 0x02, 0x0a, 0x10, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x72, 0x75, 0x73, 0x74, 0x75, 0x6d, 0x12,
	0x41, 0x0a, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x65,
	0x66, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x75, 0x70, 0x70,
	0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x62, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x43,
	0x0a, 0x0b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x4c,
	0x65, 0x66, 0x74, 0x22, 0xe7, 0x02, 0x0a, 0x0f, 0x52, 0x46, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0f, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x0f, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x56, 0x0a,
	0x12, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x68, 0x7a, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x10, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x7a, 0x12, 0x56, 0x0a, 0x12, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x68, 0x7a, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x10, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x7a, 0x22, 0xb4, 0x01,
	0x0a, 0x0e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x50, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x52, 0x10, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x50, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x22, 0x4c, 0x0a, 0x09, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x3f, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x68,
	0x7a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x48, 0x7a, 0x2a, 0xd4, 0x01, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10,
	0x01, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45,
	0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x05, 0x2a, 0xa0, 0x01, 0x0a, 0x0a, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x4e, 0x53,
	0x4f, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x4e,
	0x53, 0x4f, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x10, 0x02,
	0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x54, 0x45, 0x10, 0x05, 0x2a, 0xfb, 0x01, 0x0a,
	0x0a, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x41, 0x52, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52,
	0x41, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x46, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x50, 0x53, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x4e,
	0x53, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x54, 0x55, 0x5f, 0x50, 0x4f, 0x53,
	0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x49, 0x53, 0x50, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x4e, 0x53,
	0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x54, 0x45,
	0x52, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x4f, 0x4e, 0x41, 0x52, 0x10, 0x09, 0x42, 0x87, 0x02, 0x0a, 0x1c, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x50, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x54,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x67, 0x75, 0x6e,
	0x2d, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x45, 0x58, 0xaa, 0x02, 0x18, 0x41, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x18, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x5c,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x24, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x5c, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x3a, 0x3a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_anduril_entitymanager_v1_sensors_pub_proto_rawDescOnce sync.Once
	file_anduril_entitymanager_v1_sensors_pub_proto_rawDescData = file_anduril_entitymanager_v1_sensors_pub_proto_rawDesc
)

func file_anduril_entitymanager_v1_sensors_pub_proto_rawDescGZIP() []byte {
	file_anduril_entitymanager_v1_sensors_pub_proto_rawDescOnce.Do(func() {
		file_anduril_entitymanager_v1_sensors_pub_proto_rawDescData = protoimpl.X.CompressGZIP(file_anduril_entitymanager_v1_sensors_pub_proto_rawDescData)
	})
	return file_anduril_entitymanager_v1_sensors_pub_proto_rawDescData
}

var file_anduril_entitymanager_v1_sensors_pub_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_anduril_entitymanager_v1_sensors_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_anduril_entitymanager_v1_sensors_pub_proto_goTypes = []any{
	(OperationalState)(0),          // 0: anduril.entitymanager.v1.OperationalState
	(SensorMode)(0),                // 1: anduril.entitymanager.v1.SensorMode
	(SensorType)(0),                // 2: anduril.entitymanager.v1.SensorType
	(*Sensors)(nil),                // 3: anduril.entitymanager.v1.Sensors
	(*Sensor)(nil),                 // 4: anduril.entitymanager.v1.Sensor
	(*FieldOfView)(nil),            // 5: anduril.entitymanager.v1.FieldOfView
	(*ProjectedFrustum)(nil),       // 6: anduril.entitymanager.v1.ProjectedFrustum
	(*RFConfiguration)(nil),        // 7: anduril.entitymanager.v1.RFConfiguration
	(*BandwidthRange)(nil),         // 8: anduril.entitymanager.v1.BandwidthRange
	(*Bandwidth)(nil),              // 9: anduril.entitymanager.v1.Bandwidth
	(*timestamppb.Timestamp)(nil),  // 10: google.protobuf.Timestamp
	(*Position)(nil),               // 11: anduril.entitymanager.v1.Position
	(*Pose)(nil),                   // 12: anduril.entitymanager.v1.Pose
	(*wrapperspb.FloatValue)(nil),  // 13: google.protobuf.FloatValue
	(*FloatRange)(nil),             // 14: anduril.entitymanager.v1.FloatRange
	(*FrequencyRange)(nil),         // 15: anduril.entitymanager.v1.FrequencyRange
	(*wrapperspb.DoubleValue)(nil), // 16: google.protobuf.DoubleValue
}
var file_anduril_entitymanager_v1_sensors_pub_proto_depIdxs = []int32{
	4,  // 0: anduril.entitymanager.v1.Sensors.sensors:type_name -> anduril.entitymanager.v1.Sensor
	0,  // 1: anduril.entitymanager.v1.Sensor.operational_state:type_name -> anduril.entitymanager.v1.OperationalState
	5,  // 2: anduril.entitymanager.v1.Sensor.field_of_view:type_name -> anduril.entitymanager.v1.FieldOfView
	2,  // 3: anduril.entitymanager.v1.Sensor.sensor_type:type_name -> anduril.entitymanager.v1.SensorType
	7,  // 4: anduril.entitymanager.v1.Sensor.rf_configuraton:type_name -> anduril.entitymanager.v1.RFConfiguration
	10, // 5: anduril.entitymanager.v1.Sensor.last_detection_timestamp:type_name -> google.protobuf.Timestamp
	5,  // 6: anduril.entitymanager.v1.Sensor.fields_of_view:type_name -> anduril.entitymanager.v1.FieldOfView
	6,  // 7: anduril.entitymanager.v1.FieldOfView.projected_frustum:type_name -> anduril.entitymanager.v1.ProjectedFrustum
	11, // 8: anduril.entitymanager.v1.FieldOfView.projected_center_ray:type_name -> anduril.entitymanager.v1.Position
	12, // 9: anduril.entitymanager.v1.FieldOfView.center_ray_pose:type_name -> anduril.entitymanager.v1.Pose
	13, // 10: anduril.entitymanager.v1.FieldOfView.range:type_name -> google.protobuf.FloatValue
	1,  // 11: anduril.entitymanager.v1.FieldOfView.mode:type_name -> anduril.entitymanager.v1.SensorMode
	11, // 12: anduril.entitymanager.v1.ProjectedFrustum.upper_left:type_name -> anduril.entitymanager.v1.Position
	11, // 13: anduril.entitymanager.v1.ProjectedFrustum.upper_right:type_name -> anduril.entitymanager.v1.Position
	11, // 14: anduril.entitymanager.v1.ProjectedFrustum.bottom_right:type_name -> anduril.entitymanager.v1.Position
	11, // 15: anduril.entitymanager.v1.ProjectedFrustum.bottom_left:type_name -> anduril.entitymanager.v1.Position
	14, // 16: anduril.entitymanager.v1.RFConfiguration.frequency_range:type_name -> anduril.entitymanager.v1.FloatRange
	14, // 17: anduril.entitymanager.v1.RFConfiguration.bandwidth_range:type_name -> anduril.entitymanager.v1.FloatRange
	15, // 18: anduril.entitymanager.v1.RFConfiguration.frequency_range_hz:type_name -> anduril.entitymanager.v1.FrequencyRange
	8,  // 19: anduril.entitymanager.v1.RFConfiguration.bandwidth_range_hz:type_name -> anduril.entitymanager.v1.BandwidthRange
	9,  // 20: anduril.entitymanager.v1.BandwidthRange.minimum_bandwidth:type_name -> anduril.entitymanager.v1.Bandwidth
	9,  // 21: anduril.entitymanager.v1.BandwidthRange.maximum_bandwidth:type_name -> anduril.entitymanager.v1.Bandwidth
	16, // 22: anduril.entitymanager.v1.Bandwidth.bandwidth_hz:type_name -> google.protobuf.DoubleValue
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_anduril_entitymanager_v1_sensors_pub_proto_init() }
func file_anduril_entitymanager_v1_sensors_pub_proto_init() {
	if File_anduril_entitymanager_v1_sensors_pub_proto != nil {
		return
	}
	file_anduril_entitymanager_v1_location_pub_proto_init()
	file_anduril_entitymanager_v1_options_pub_proto_init()
	file_anduril_entitymanager_v1_signal_pub_proto_init()
	file_anduril_entitymanager_v1_types_pub_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_anduril_entitymanager_v1_sensors_pub_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Sensors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_sensors_pub_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Sensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_sensors_pub_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*FieldOfView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_sensors_pub_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ProjectedFrustum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_sensors_pub_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*RFConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_sensors_pub_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*BandwidthRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_sensors_pub_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Bandwidth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_anduril_entitymanager_v1_sensors_pub_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_anduril_entitymanager_v1_sensors_pub_proto_goTypes,
		DependencyIndexes: file_anduril_entitymanager_v1_sensors_pub_proto_depIdxs,
		EnumInfos:         file_anduril_entitymanager_v1_sensors_pub_proto_enumTypes,
		MessageInfos:      file_anduril_entitymanager_v1_sensors_pub_proto_msgTypes,
	}.Build()
	File_anduril_entitymanager_v1_sensors_pub_proto = out.File
	file_anduril_entitymanager_v1_sensors_pub_proto_rawDesc = nil
	file_anduril_entitymanager_v1_sensors_pub_proto_goTypes = nil
	file_anduril_entitymanager_v1_sensors_pub_proto_depIdxs = nil
}
