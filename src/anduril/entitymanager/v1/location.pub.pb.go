// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: anduril/entitymanager/v1/location.pub.proto

package entitymanagerv1

import (
	_type "github.com/anduril/anduril-go/src/anduril/type"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Available for Entities that have a single or primary Location.
type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// see Position definition for details. We opt not to use anduril type for altitude clarity.
	Position *Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	// Velocity in an ENU reference frame centered on the corresponding position. All units are meters per second.
	VelocityEnu *_type.ENU `protobuf:"bytes,2,opt,name=velocity_enu,json=velocityEnu,proto3" json:"velocity_enu,omitempty"`
	// Speed is the magnitude of velocity_enu vector [sqrt(e^2 + n^2 + u^2)] when present, measured in m/s.
	SpeedMps *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=speed_mps,json=speedMps,proto3" json:"speed_mps,omitempty"`
	// The entity's acceleration in meters/s^2.
	Acceleration *_type.ENU `protobuf:"bytes,4,opt,name=acceleration,proto3" json:"acceleration,omitempty"`
	// quaternion to translate from entity body frame to it's ENU frame
	AttitudeEnu *_type.Quaternion `protobuf:"bytes,3,opt,name=attitude_enu,json=attitudeEnu,proto3" json:"attitude_enu,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_location_pub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_location_pub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_location_pub_proto_rawDescGZIP(), []int{0}
}

func (x *Location) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Location) GetVelocityEnu() *_type.ENU {
	if x != nil {
		return x.VelocityEnu
	}
	return nil
}

func (x *Location) GetSpeedMps() *wrapperspb.DoubleValue {
	if x != nil {
		return x.SpeedMps
	}
	return nil
}

func (x *Location) GetAcceleration() *_type.ENU {
	if x != nil {
		return x.Acceleration
	}
	return nil
}

func (x *Location) GetAttitudeEnu() *_type.Quaternion {
	if x != nil {
		return x.AttitudeEnu
	}
	return nil
}

// WGS84 position.
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// WGS84 geodetic latitude in decimal degrees.
	LatitudeDegrees float64 `protobuf:"fixed64,1,opt,name=latitude_degrees,json=latitudeDegrees,proto3" json:"latitude_degrees,omitempty"`
	// WGS84 longitude in decimal degrees.
	LongitudeDegrees float64 `protobuf:"fixed64,2,opt,name=longitude_degrees,json=longitudeDegrees,proto3" json:"longitude_degrees,omitempty"`
	// altitude as height above ellipsoid (WGS84) in meters. DoubleValue wrapper is used to distinguish optional from
	// default 0.
	AltitudeHaeMeters *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=altitude_hae_meters,json=altitudeHaeMeters,proto3" json:"altitude_hae_meters,omitempty"`
	// Altitude as AGL (Above Ground Level) if the upstream data source has this value set. If the value is not set from the upstream, this value is
	// not set.
	AltitudeAglMeters *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=altitude_agl_meters,json=altitudeAglMeters,proto3" json:"altitude_agl_meters,omitempty"`
	// Altitude as ASF (Above Sea Floor) if the upstream data source has this value set. If the value is not set from the upstream, this value is
	// not set.
	AltitudeAsfMeters *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=altitude_asf_meters,json=altitudeAsfMeters,proto3" json:"altitude_asf_meters,omitempty"`
	// Depth in meters measures the depth of the entity from the surface of the water through sensor measurements based on differential pressure
	// between the interior and exterior of the vessel. If the value is not set from the upstream, this value is not set.
	PressureDepthMeters *wrapperspb.DoubleValue `protobuf:"bytes,6,opt,name=pressure_depth_meters,json=pressureDepthMeters,proto3" json:"pressure_depth_meters,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_location_pub_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_location_pub_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_location_pub_proto_rawDescGZIP(), []int{1}
}

func (x *Position) GetLatitudeDegrees() float64 {
	if x != nil {
		return x.LatitudeDegrees
	}
	return 0
}

func (x *Position) GetLongitudeDegrees() float64 {
	if x != nil {
		return x.LongitudeDegrees
	}
	return 0
}

func (x *Position) GetAltitudeHaeMeters() *wrapperspb.DoubleValue {
	if x != nil {
		return x.AltitudeHaeMeters
	}
	return nil
}

func (x *Position) GetAltitudeAglMeters() *wrapperspb.DoubleValue {
	if x != nil {
		return x.AltitudeAglMeters
	}
	return nil
}

func (x *Position) GetAltitudeAsfMeters() *wrapperspb.DoubleValue {
	if x != nil {
		return x.AltitudeAsfMeters
	}
	return nil
}

func (x *Position) GetPressureDepthMeters() *wrapperspb.DoubleValue {
	if x != nil {
		return x.PressureDepthMeters
	}
	return nil
}

// Uncertainty of entity position and velocity, if available.
type LocationUncertainty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Positional covariance represented by the upper triangle of the covariance matrix.
	PositionEnuCov *TMat3 `protobuf:"bytes,1,opt,name=position_enu_cov,json=positionEnuCov,proto3" json:"position_enu_cov,omitempty"`
	// Velocity covariance represented by the upper triangle of the covariance matrix.
	VelocityEnuCov *TMat3 `protobuf:"bytes,2,opt,name=velocity_enu_cov,json=velocityEnuCov,proto3" json:"velocity_enu_cov,omitempty"`
	// An ellipse that describes the certainty probability and error boundary for a given geolocation.
	PositionErrorEllipse *ErrorEllipse `protobuf:"bytes,3,opt,name=position_error_ellipse,json=positionErrorEllipse,proto3" json:"position_error_ellipse,omitempty"`
}

func (x *LocationUncertainty) Reset() {
	*x = LocationUncertainty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_location_pub_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationUncertainty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationUncertainty) ProtoMessage() {}

func (x *LocationUncertainty) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_location_pub_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationUncertainty.ProtoReflect.Descriptor instead.
func (*LocationUncertainty) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_location_pub_proto_rawDescGZIP(), []int{2}
}

func (x *LocationUncertainty) GetPositionEnuCov() *TMat3 {
	if x != nil {
		return x.PositionEnuCov
	}
	return nil
}

func (x *LocationUncertainty) GetVelocityEnuCov() *TMat3 {
	if x != nil {
		return x.VelocityEnuCov
	}
	return nil
}

func (x *LocationUncertainty) GetPositionErrorEllipse() *ErrorEllipse {
	if x != nil {
		return x.PositionErrorEllipse
	}
	return nil
}

// Indicates ellipse characteristics and probability that an entity lies within the defined ellipse.
type ErrorEllipse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines the probability in percentage that an entity lies within the given ellipse: 0-1.
	Probability *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=probability,proto3" json:"probability,omitempty"`
	// Defines the distance from the center point of the ellipse to the furthest distance on the perimeter in meters.
	SemiMajorAxisM *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=semi_major_axis_m,json=semiMajorAxisM,proto3" json:"semi_major_axis_m,omitempty"`
	// Defines the distance from the center point of the ellipse to the shortest distance on the perimeter in meters.
	SemiMinorAxisM *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=semi_minor_axis_m,json=semiMinorAxisM,proto3" json:"semi_minor_axis_m,omitempty"`
	// The orientation of the semi-major relative to true north in degrees from clockwise: 0-180 due to symmetry across the semi-minor axis.
	OrientationD *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=orientation_d,json=orientationD,proto3" json:"orientation_d,omitempty"`
}

func (x *ErrorEllipse) Reset() {
	*x = ErrorEllipse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_location_pub_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorEllipse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorEllipse) ProtoMessage() {}

func (x *ErrorEllipse) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_location_pub_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorEllipse.ProtoReflect.Descriptor instead.
func (*ErrorEllipse) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_location_pub_proto_rawDescGZIP(), []int{3}
}

func (x *ErrorEllipse) GetProbability() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Probability
	}
	return nil
}

func (x *ErrorEllipse) GetSemiMajorAxisM() *wrapperspb.DoubleValue {
	if x != nil {
		return x.SemiMajorAxisM
	}
	return nil
}

func (x *ErrorEllipse) GetSemiMinorAxisM() *wrapperspb.DoubleValue {
	if x != nil {
		return x.SemiMinorAxisM
	}
	return nil
}

func (x *ErrorEllipse) GetOrientationD() *wrapperspb.DoubleValue {
	if x != nil {
		return x.OrientationD
	}
	return nil
}

// Overrides anduril.type.Pose.
type Pose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Geospatial location defined by this Pose.
	Pos *Position `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	// The quaternion to transform a point in the Pose frame to the ENU frame. The Pose frame could be Body, Turret,
	// etc and is determined by the context in which this Pose is used.
	// The normal convention for defining orientation is to list the frames of transformation, for example
	// att_gimbal_to_enu is the quaternion which transforms a point in the gimbal frame to the body frame, but
	// in this case we truncate to att_enu because the Pose frame isn't defined. A potentially better name for this
	// field would have been att_pose_to_enu.
	//
	// Implementations of this quaternion should left multiply this quaternion to transform a point from the Pose frame
	// to the enu frame.
	Orientation *_type.Quaternion `protobuf:"bytes,2,opt,name=orientation,proto3" json:"orientation,omitempty"`
}

func (x *Pose) Reset() {
	*x = Pose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_location_pub_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pose) ProtoMessage() {}

func (x *Pose) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_location_pub_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pose.ProtoReflect.Descriptor instead.
func (*Pose) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_location_pub_proto_rawDescGZIP(), []int{4}
}

func (x *Pose) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Pose) GetOrientation() *_type.Quaternion {
	if x != nil {
		return x.Orientation
	}
	return nil
}

// Symmetric 3d matrix only representing the upper right triangle.
type TMat3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mxx float32 `protobuf:"fixed32,1,opt,name=mxx,proto3" json:"mxx,omitempty"`
	Mxy float32 `protobuf:"fixed32,2,opt,name=mxy,proto3" json:"mxy,omitempty"`
	Mxz float32 `protobuf:"fixed32,3,opt,name=mxz,proto3" json:"mxz,omitempty"`
	Myy float32 `protobuf:"fixed32,4,opt,name=myy,proto3" json:"myy,omitempty"`
	Myz float32 `protobuf:"fixed32,5,opt,name=myz,proto3" json:"myz,omitempty"`
	Mzz float32 `protobuf:"fixed32,6,opt,name=mzz,proto3" json:"mzz,omitempty"`
}

func (x *TMat3) Reset() {
	*x = TMat3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_location_pub_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TMat3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMat3) ProtoMessage() {}

func (x *TMat3) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_location_pub_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TMat3.ProtoReflect.Descriptor instead.
func (*TMat3) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_location_pub_proto_rawDescGZIP(), []int{5}
}

func (x *TMat3) GetMxx() float32 {
	if x != nil {
		return x.Mxx
	}
	return 0
}

func (x *TMat3) GetMxy() float32 {
	if x != nil {
		return x.Mxy
	}
	return 0
}

func (x *TMat3) GetMxz() float32 {
	if x != nil {
		return x.Mxz
	}
	return 0
}

func (x *TMat3) GetMyy() float32 {
	if x != nil {
		return x.Myy
	}
	return 0
}

func (x *TMat3) GetMyz() float32 {
	if x != nil {
		return x.Myz
	}
	return 0
}

func (x *TMat3) GetMzz() float32 {
	if x != nil {
		return x.Mzz
	}
	return 0
}

var File_anduril_entitymanager_v1_location_pub_proto protoreflect.FileDescriptor

var file_anduril_entitymanager_v1_location_pub_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1d, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x70, 0x75, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x02, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0c, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x65, 0x6e, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x4e, 0x55, 0x52, 0x0b, 0x76, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x6d, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x4d, 0x70, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x4e, 0x55, 0x52, 0x0c, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x61,
	0x74, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x74, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x45, 0x6e, 0x75, 0x22, 0x9e, 0x03, 0x0a, 0x08, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65,
	0x67, 0x72, 0x65, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x12, 0x4c, 0x0a,
	0x13, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x48, 0x61, 0x65, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x61,
	0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x67, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x41, 0x67, 0x6c, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x61, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x73, 0x66, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x41, 0x73,
	0x66, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x89, 0x02, 0x0a, 0x13, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74,
	0x79, 0x12, 0x49, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e,
	0x75, 0x5f, 0x63, 0x6f, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x74, 0x33, 0x52, 0x0e, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x43, 0x6f, 0x76, 0x12, 0x49, 0x0a, 0x10,
	0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x75, 0x5f, 0x63, 0x6f, 0x76,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x4d, 0x61, 0x74, 0x33, 0x52, 0x0e, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74,
	0x79, 0x45, 0x6e, 0x75, 0x43, 0x6f, 0x76, 0x12, 0x5c, 0x0a, 0x16, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x65, 0x6c, 0x6c, 0x69, 0x70, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6c, 0x6c, 0x69, 0x70, 0x73, 0x65, 0x52,
	0x14, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6c,
	0x6c, 0x69, 0x70, 0x73, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45,
	0x6c, 0x6c, 0x69, 0x70, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x65, 0x6d, 0x69, 0x5f, 0x6d,
	0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0e, 0x73, 0x65, 0x6d, 0x69, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x41, 0x78, 0x69, 0x73, 0x4d, 0x12,
	0x47, 0x0a, 0x11, 0x73, 0x65, 0x6d, 0x69, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x61, 0x78,
	0x69, 0x73, 0x5f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x6d, 0x69, 0x4d, 0x69,
	0x6e, 0x6f, 0x72, 0x41, 0x78, 0x69, 0x73, 0x4d, 0x12, 0x41, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6f,
	0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x22, 0x78, 0x0a, 0x04, 0x50,
	0x6f, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x6f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x51, 0x75,
	0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a, 0x05, 0x54, 0x4d, 0x61, 0x74, 0x33, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x78, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x78, 0x78,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x78, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d,
	0x78, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x78, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x6d, 0x78, 0x7a, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x79, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x6d, 0x79, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x79, 0x7a, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x79, 0x7a, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x7a, 0x7a, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x7a, 0x7a, 0x42, 0xfe, 0x01, 0x0a, 0x1c, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2d, 0x67, 0x6f, 0x2f, 0x73,
	0x72, 0x63, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x45,
	0x58, 0xaa, 0x02, 0x18, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x18, 0x41,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x5c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x24, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x5c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x1a, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x3a, 0x3a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_anduril_entitymanager_v1_location_pub_proto_rawDescOnce sync.Once
	file_anduril_entitymanager_v1_location_pub_proto_rawDescData = file_anduril_entitymanager_v1_location_pub_proto_rawDesc
)

func file_anduril_entitymanager_v1_location_pub_proto_rawDescGZIP() []byte {
	file_anduril_entitymanager_v1_location_pub_proto_rawDescOnce.Do(func() {
		file_anduril_entitymanager_v1_location_pub_proto_rawDescData = protoimpl.X.CompressGZIP(file_anduril_entitymanager_v1_location_pub_proto_rawDescData)
	})
	return file_anduril_entitymanager_v1_location_pub_proto_rawDescData
}

var file_anduril_entitymanager_v1_location_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_anduril_entitymanager_v1_location_pub_proto_goTypes = []any{
	(*Location)(nil),               // 0: anduril.entitymanager.v1.Location
	(*Position)(nil),               // 1: anduril.entitymanager.v1.Position
	(*LocationUncertainty)(nil),    // 2: anduril.entitymanager.v1.LocationUncertainty
	(*ErrorEllipse)(nil),           // 3: anduril.entitymanager.v1.ErrorEllipse
	(*Pose)(nil),                   // 4: anduril.entitymanager.v1.Pose
	(*TMat3)(nil),                  // 5: anduril.entitymanager.v1.TMat3
	(*_type.ENU)(nil),              // 6: anduril.type.ENU
	(*wrapperspb.DoubleValue)(nil), // 7: google.protobuf.DoubleValue
	(*_type.Quaternion)(nil),       // 8: anduril.type.Quaternion
}
var file_anduril_entitymanager_v1_location_pub_proto_depIdxs = []int32{
	1,  // 0: anduril.entitymanager.v1.Location.position:type_name -> anduril.entitymanager.v1.Position
	6,  // 1: anduril.entitymanager.v1.Location.velocity_enu:type_name -> anduril.type.ENU
	7,  // 2: anduril.entitymanager.v1.Location.speed_mps:type_name -> google.protobuf.DoubleValue
	6,  // 3: anduril.entitymanager.v1.Location.acceleration:type_name -> anduril.type.ENU
	8,  // 4: anduril.entitymanager.v1.Location.attitude_enu:type_name -> anduril.type.Quaternion
	7,  // 5: anduril.entitymanager.v1.Position.altitude_hae_meters:type_name -> google.protobuf.DoubleValue
	7,  // 6: anduril.entitymanager.v1.Position.altitude_agl_meters:type_name -> google.protobuf.DoubleValue
	7,  // 7: anduril.entitymanager.v1.Position.altitude_asf_meters:type_name -> google.protobuf.DoubleValue
	7,  // 8: anduril.entitymanager.v1.Position.pressure_depth_meters:type_name -> google.protobuf.DoubleValue
	5,  // 9: anduril.entitymanager.v1.LocationUncertainty.position_enu_cov:type_name -> anduril.entitymanager.v1.TMat3
	5,  // 10: anduril.entitymanager.v1.LocationUncertainty.velocity_enu_cov:type_name -> anduril.entitymanager.v1.TMat3
	3,  // 11: anduril.entitymanager.v1.LocationUncertainty.position_error_ellipse:type_name -> anduril.entitymanager.v1.ErrorEllipse
	7,  // 12: anduril.entitymanager.v1.ErrorEllipse.probability:type_name -> google.protobuf.DoubleValue
	7,  // 13: anduril.entitymanager.v1.ErrorEllipse.semi_major_axis_m:type_name -> google.protobuf.DoubleValue
	7,  // 14: anduril.entitymanager.v1.ErrorEllipse.semi_minor_axis_m:type_name -> google.protobuf.DoubleValue
	7,  // 15: anduril.entitymanager.v1.ErrorEllipse.orientation_d:type_name -> google.protobuf.DoubleValue
	1,  // 16: anduril.entitymanager.v1.Pose.pos:type_name -> anduril.entitymanager.v1.Position
	8,  // 17: anduril.entitymanager.v1.Pose.orientation:type_name -> anduril.type.Quaternion
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_anduril_entitymanager_v1_location_pub_proto_init() }
func file_anduril_entitymanager_v1_location_pub_proto_init() {
	if File_anduril_entitymanager_v1_location_pub_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_anduril_entitymanager_v1_location_pub_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_location_pub_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_location_pub_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*LocationUncertainty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_location_pub_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ErrorEllipse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_location_pub_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Pose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_location_pub_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*TMat3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_anduril_entitymanager_v1_location_pub_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_anduril_entitymanager_v1_location_pub_proto_goTypes,
		DependencyIndexes: file_anduril_entitymanager_v1_location_pub_proto_depIdxs,
		MessageInfos:      file_anduril_entitymanager_v1_location_pub_proto_msgTypes,
	}.Build()
	File_anduril_entitymanager_v1_location_pub_proto = out.File
	file_anduril_entitymanager_v1_location_pub_proto_rawDesc = nil
	file_anduril_entitymanager_v1_location_pub_proto_goTypes = nil
	file_anduril_entitymanager_v1_location_pub_proto_depIdxs = nil
}
