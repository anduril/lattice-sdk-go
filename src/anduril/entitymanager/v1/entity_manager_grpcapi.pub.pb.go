// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: anduril/entitymanager/v1/entity_manager_grpcapi.pub.proto

package entitymanagerv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of entity event.
type EventType int32

const (
	EventType_EVENT_TYPE_INVALID EventType = 0
	// entity was created.
	EventType_EVENT_TYPE_CREATED EventType = 1
	// entity was updated.
	EventType_EVENT_TYPE_UPDATE EventType = 2
	// entity was deleted.
	EventType_EVENT_TYPE_DELETED EventType = 3
	// entity already existed, but sent on a new stream connection.
	EventType_EVENT_TYPE_PREEXISTING EventType = 4
	// entity override was set after the entity expiration.
	EventType_EVENT_TYPE_POST_EXPIRY_OVERRIDE EventType = 5
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EVENT_TYPE_INVALID",
		1: "EVENT_TYPE_CREATED",
		2: "EVENT_TYPE_UPDATE",
		3: "EVENT_TYPE_DELETED",
		4: "EVENT_TYPE_PREEXISTING",
		5: "EVENT_TYPE_POST_EXPIRY_OVERRIDE",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_INVALID":              0,
		"EVENT_TYPE_CREATED":              1,
		"EVENT_TYPE_UPDATE":               2,
		"EVENT_TYPE_DELETED":              3,
		"EVENT_TYPE_PREEXISTING":          4,
		"EVENT_TYPE_POST_EXPIRY_OVERRIDE": 5,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDescGZIP(), []int{0}
}

type PublishEntityRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Create or update an entity.
	// Required fields:
	//   - entity_id: Unique string identifier. Can be a Globally Unique Identifier (GUID).
	//   - expiry_time: Expiration time that must be greater than the current time and less than 30 days in the future. The Entities API will reject any entity update with an expiry_time in the past. When the expiry_time has passed, the Entities API will delete the entity from the COP and send a DELETE event.
	//   - is_live: Boolean that when true, creates or updates the entity. If false and the entity is still live, triggers a DELETE event.
	//   - provenance.integration_name: String that uniquely identifies the integration responsible for publishing the entity.
	//   - provenance.data_type.
	//   - provenance.source_update_time. This can be earlier than the RPC call if the data entered is older.
	//   - aliases.name: Human-readable string that represents the name of an entity.
	//   - ontology.template
	//
	// For additional required fields that are determined by template, see com.anduril.entitymanager.v1.Template.
	// if an entity_id is provided, Entity Manager updates the entity. If no entity_id is provided, it creates an entity.
	Entity        *Entity `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishEntityRequest) Reset() {
	*x = PublishEntityRequest{}
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishEntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishEntityRequest) ProtoMessage() {}

func (x *PublishEntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishEntityRequest.ProtoReflect.Descriptor instead.
func (*PublishEntityRequest) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDescGZIP(), []int{0}
}

func (x *PublishEntityRequest) GetEntity() *Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

type PublishEntityResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishEntityResponse) Reset() {
	*x = PublishEntityResponse{}
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishEntityResponse) ProtoMessage() {}

func (x *PublishEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishEntityResponse.ProtoReflect.Descriptor instead.
func (*PublishEntityResponse) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDescGZIP(), []int{1}
}

type PublishEntitiesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Sends a stream of entity objects to create or update.
	// Each entity requires the following fields:
	//   - entity_id: Unique string identifier. Can be a Globally Unique Identifier (GUID).
	//   - expiry_time: Expiration time that must be greater than the current time and less than 30 days in the future. The Entities API will reject any entity update with an expiry_time in the past. When the expiry_time has passed, the Entities API will delete the entity from the COP and send a DELETE event.
	//   - is_live: Boolean that when true, creates or updates the entity. If false and the entity is still live, triggers a DELETE event.
	//   - provenance.integration_name: String that uniquely identifies the integration responsible for publishing the entity.
	//   - provenance.data_type.
	//   - provenance.source_update_time. This can be earlier than the RPC call if the data entered is older.
	//   - aliases.name: Human-readable string that represents the name of an entity.
	//   - ontology.template
	//
	// For additional required fields that are determined by template, see com.anduril.entitymanager.v1.Template.
	// If an entity_id is provided, the entity updates. If no entity_id is provided, the entity is created.
	Entity        *Entity `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishEntitiesRequest) Reset() {
	*x = PublishEntitiesRequest{}
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishEntitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishEntitiesRequest) ProtoMessage() {}

func (x *PublishEntitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishEntitiesRequest.ProtoReflect.Descriptor instead.
func (*PublishEntitiesRequest) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDescGZIP(), []int{2}
}

func (x *PublishEntitiesRequest) GetEntity() *Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

// After the stream closes, the server returns an empty message indicating success. The server will silently
// drop invalid entities from the client stream. The client must reopen the stream if it's canceled due to
// an End of File (EOF) or timeout.
type PublishEntitiesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishEntitiesResponse) Reset() {
	*x = PublishEntitiesResponse{}
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishEntitiesResponse) ProtoMessage() {}

func (x *PublishEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishEntitiesResponse.ProtoReflect.Descriptor instead.
func (*PublishEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDescGZIP(), []int{3}
}

type GetEntityRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The GUID of this entity to query.
	EntityId      string `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEntityRequest) Reset() {
	*x = GetEntityRequest{}
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntityRequest) ProtoMessage() {}

func (x *GetEntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntityRequest.ProtoReflect.Descriptor instead.
func (*GetEntityRequest) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDescGZIP(), []int{4}
}

func (x *GetEntityRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

type GetEntityResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An Entity object that corresponds with the requested entityId.
	Entity        *Entity `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEntityResponse) Reset() {
	*x = GetEntityResponse{}
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntityResponse) ProtoMessage() {}

func (x *GetEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntityResponse.ProtoReflect.Descriptor instead.
func (*GetEntityResponse) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDescGZIP(), []int{5}
}

func (x *GetEntityResponse) GetEntity() *Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

type OverrideEntityRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The entity containing the overridden fields. The service will extract the overridable fields from the entity
	// object and ignore any other fields.
	Entity *Entity `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	// The field paths that will be extracted from the Entity and saved as an override. Only fields marked overridable can
	// be overridden.
	FieldPath []string `protobuf:"bytes,2,rep,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	// Additional information about the source of the override.
	Provenance    *Provenance `protobuf:"bytes,3,opt,name=provenance,proto3" json:"provenance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OverrideEntityRequest) Reset() {
	*x = OverrideEntityRequest{}
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OverrideEntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverrideEntityRequest) ProtoMessage() {}

func (x *OverrideEntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverrideEntityRequest.ProtoReflect.Descriptor instead.
func (*OverrideEntityRequest) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDescGZIP(), []int{6}
}

func (x *OverrideEntityRequest) GetEntity() *Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *OverrideEntityRequest) GetFieldPath() []string {
	if x != nil {
		return x.FieldPath
	}
	return nil
}

func (x *OverrideEntityRequest) GetProvenance() *Provenance {
	if x != nil {
		return x.Provenance
	}
	return nil
}

type OverrideEntityResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The status of the override request.
	Status        OverrideStatus `protobuf:"varint,1,opt,name=status,proto3,enum=anduril.entitymanager.v1.OverrideStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OverrideEntityResponse) Reset() {
	*x = OverrideEntityResponse{}
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OverrideEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverrideEntityResponse) ProtoMessage() {}

func (x *OverrideEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverrideEntityResponse.ProtoReflect.Descriptor instead.
func (*OverrideEntityResponse) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDescGZIP(), []int{7}
}

func (x *OverrideEntityResponse) GetStatus() OverrideStatus {
	if x != nil {
		return x.Status
	}
	return OverrideStatus_OVERRIDE_STATUS_INVALID
}

type RemoveEntityOverrideRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The entity ID that the override will be removed from.
	EntityId string `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	// The field paths to remove from the override store for the provided entityId.
	FieldPath     []string `protobuf:"bytes,2,rep,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveEntityOverrideRequest) Reset() {
	*x = RemoveEntityOverrideRequest{}
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveEntityOverrideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveEntityOverrideRequest) ProtoMessage() {}

func (x *RemoveEntityOverrideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveEntityOverrideRequest.ProtoReflect.Descriptor instead.
func (*RemoveEntityOverrideRequest) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveEntityOverrideRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *RemoveEntityOverrideRequest) GetFieldPath() []string {
	if x != nil {
		return x.FieldPath
	}
	return nil
}

// void response but with placeholder for future optional fields.
type RemoveEntityOverrideResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveEntityOverrideResponse) Reset() {
	*x = RemoveEntityOverrideResponse{}
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveEntityOverrideResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveEntityOverrideResponse) ProtoMessage() {}

func (x *RemoveEntityOverrideResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveEntityOverrideResponse.ProtoReflect.Descriptor instead.
func (*RemoveEntityOverrideResponse) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDescGZIP(), []int{9}
}

type StreamEntityComponentsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// lower_snake_case component names to include in response events, e.g. location. Only included components will
	// populate.
	ComponentsToInclude []string `protobuf:"bytes,1,rep,name=components_to_include,json=componentsToInclude,proto3" json:"components_to_include,omitempty"`
	// Subscribe to all components. This should only be used in cases where you want all components.
	// Setting both components_to_include and include_all_components is invalid and will be rejected.
	IncludeAllComponents bool `protobuf:"varint,2,opt,name=include_all_components,json=includeAllComponents,proto3" json:"include_all_components,omitempty"`
	// The root node of a statement filter "tree".
	// If provided, only entities matching the filter criteria will be streamed. The filter is applied dynamically so if a
	// new entity matches, it will be included, and if an entity updates to no longer match, it will be excluded.
	Filter *Statement `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional rate-limiting / down-sampling parameters, see RateLimit message for details.
	RateLimit *RateLimit `protobuf:"bytes,4,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	// The period (in milliseconds) at which a Heartbeat message will be sent on the
	// message stream. If this field is set to 0 then no Heartbeat messages are sent.
	HeartbeatPeriodMillis uint32 `protobuf:"varint,5,opt,name=heartbeat_period_millis,json=heartbeatPeriodMillis,proto3" json:"heartbeat_period_millis,omitempty"`
	// Subscribe to a finite stream of preexisting events which closes when there are no additional pre-existing events to
	// process. Respects the filter specified on the StreamEntityComponentsRequest.
	PreexistingOnly bool `protobuf:"varint,6,opt,name=preexisting_only,json=preexistingOnly,proto3" json:"preexisting_only,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StreamEntityComponentsRequest) Reset() {
	*x = StreamEntityComponentsRequest{}
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamEntityComponentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEntityComponentsRequest) ProtoMessage() {}

func (x *StreamEntityComponentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEntityComponentsRequest.ProtoReflect.Descriptor instead.
func (*StreamEntityComponentsRequest) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDescGZIP(), []int{10}
}

func (x *StreamEntityComponentsRequest) GetComponentsToInclude() []string {
	if x != nil {
		return x.ComponentsToInclude
	}
	return nil
}

func (x *StreamEntityComponentsRequest) GetIncludeAllComponents() bool {
	if x != nil {
		return x.IncludeAllComponents
	}
	return false
}

func (x *StreamEntityComponentsRequest) GetFilter() *Statement {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *StreamEntityComponentsRequest) GetRateLimit() *RateLimit {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

func (x *StreamEntityComponentsRequest) GetHeartbeatPeriodMillis() uint32 {
	if x != nil {
		return x.HeartbeatPeriodMillis
	}
	return 0
}

func (x *StreamEntityComponentsRequest) GetPreexistingOnly() bool {
	if x != nil {
		return x.PreexistingOnly
	}
	return false
}

// response stream will be fed all matching pre-existing live entities as CREATED, plus any new events ongoing.
type StreamEntityComponentsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityEvent   *EntityEvent           `protobuf:"bytes,1,opt,name=entity_event,json=entityEvent,proto3" json:"entity_event,omitempty"`
	Heartbeat     *Heartbeat             `protobuf:"bytes,2,opt,name=heartbeat,proto3" json:"heartbeat,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamEntityComponentsResponse) Reset() {
	*x = StreamEntityComponentsResponse{}
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamEntityComponentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEntityComponentsResponse) ProtoMessage() {}

func (x *StreamEntityComponentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEntityComponentsResponse.ProtoReflect.Descriptor instead.
func (*StreamEntityComponentsResponse) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDescGZIP(), []int{11}
}

func (x *StreamEntityComponentsResponse) GetEntityEvent() *EntityEvent {
	if x != nil {
		return x.EntityEvent
	}
	return nil
}

func (x *StreamEntityComponentsResponse) GetHeartbeat() *Heartbeat {
	if x != nil {
		return x.Heartbeat
	}
	return nil
}

// Event representing some type of entity change.
type EntityEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventType     EventType              `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=anduril.entitymanager.v1.EventType" json:"event_type,omitempty"`
	Time          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Entity        *Entity                `protobuf:"bytes,3,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityEvent) Reset() {
	*x = EntityEvent{}
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityEvent) ProtoMessage() {}

func (x *EntityEvent) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityEvent.ProtoReflect.Descriptor instead.
func (*EntityEvent) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDescGZIP(), []int{12}
}

func (x *EntityEvent) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EVENT_TYPE_INVALID
}

func (x *EntityEvent) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *EntityEvent) GetEntity() *Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

// A message that is periodically sent on the stream for keep-alive behaviour.
type Heartbeat struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The timestamp at which the heartbeat message was sent.
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDescGZIP(), []int{13}
}

func (x *Heartbeat) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

var File_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto protoreflect.FileDescriptor

var file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDesc = []byte{
	0x0a, 0x39, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x29, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x29, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x14, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x17, 0x0a, 0x15, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x52, 0x0a, 0x16, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x22, 0x19, 0x0a, 0x17, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x22, 0x4d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22,
	0xb6, 0x01, 0x0a, 0x15, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x5a, 0x0a, 0x16, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x59, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x22,
	0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xed, 0x02, 0x0a, 0x1d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c,
	0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x17,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x70, 0x72, 0x65, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x6c, 0x79, 0x22,
	0xad, 0x01, 0x0a, 0x1e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x09,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x22,
	0xbb, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x42, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x45, 0x0a,
	0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2a, 0xab, 0x01, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x52, 0x45, 0x45, 0x58, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x23, 0x0a,
	0x1f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54,
	0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x59, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45,
	0x10, 0x05, 0x32, 0xf1, 0x05, 0x0a, 0x10, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x41, 0x50, 0x49, 0x12, 0x70, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x0f, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x28, 0x01, 0x12, 0x64, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x2a, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x0e, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x2e, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85,
	0x01, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x35, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x37, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x8e, 0x02, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x1c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x50, 0x75, 0x62,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x6c, 0x61, 0x74, 0x74,
	0x69, 0x63, 0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x45, 0x58, 0xaa, 0x02, 0x18,
	0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x18, 0x41, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x5c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x24, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x5c, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x41, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x3a, 0x3a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDescOnce sync.Once
	file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDescData = file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDesc
)

func file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDescGZIP() []byte {
	file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDescOnce.Do(func() {
		file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDescData = protoimpl.X.CompressGZIP(file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDescData)
	})
	return file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDescData
}

var file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_goTypes = []any{
	(EventType)(0),                         // 0: anduril.entitymanager.v1.EventType
	(*PublishEntityRequest)(nil),           // 1: anduril.entitymanager.v1.PublishEntityRequest
	(*PublishEntityResponse)(nil),          // 2: anduril.entitymanager.v1.PublishEntityResponse
	(*PublishEntitiesRequest)(nil),         // 3: anduril.entitymanager.v1.PublishEntitiesRequest
	(*PublishEntitiesResponse)(nil),        // 4: anduril.entitymanager.v1.PublishEntitiesResponse
	(*GetEntityRequest)(nil),               // 5: anduril.entitymanager.v1.GetEntityRequest
	(*GetEntityResponse)(nil),              // 6: anduril.entitymanager.v1.GetEntityResponse
	(*OverrideEntityRequest)(nil),          // 7: anduril.entitymanager.v1.OverrideEntityRequest
	(*OverrideEntityResponse)(nil),         // 8: anduril.entitymanager.v1.OverrideEntityResponse
	(*RemoveEntityOverrideRequest)(nil),    // 9: anduril.entitymanager.v1.RemoveEntityOverrideRequest
	(*RemoveEntityOverrideResponse)(nil),   // 10: anduril.entitymanager.v1.RemoveEntityOverrideResponse
	(*StreamEntityComponentsRequest)(nil),  // 11: anduril.entitymanager.v1.StreamEntityComponentsRequest
	(*StreamEntityComponentsResponse)(nil), // 12: anduril.entitymanager.v1.StreamEntityComponentsResponse
	(*EntityEvent)(nil),                    // 13: anduril.entitymanager.v1.EntityEvent
	(*Heartbeat)(nil),                      // 14: anduril.entitymanager.v1.Heartbeat
	(*Entity)(nil),                         // 15: anduril.entitymanager.v1.Entity
	(*Provenance)(nil),                     // 16: anduril.entitymanager.v1.Provenance
	(OverrideStatus)(0),                    // 17: anduril.entitymanager.v1.OverrideStatus
	(*Statement)(nil),                      // 18: anduril.entitymanager.v1.Statement
	(*RateLimit)(nil),                      // 19: anduril.entitymanager.v1.RateLimit
	(*timestamppb.Timestamp)(nil),          // 20: google.protobuf.Timestamp
}
var file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_depIdxs = []int32{
	15, // 0: anduril.entitymanager.v1.PublishEntityRequest.entity:type_name -> anduril.entitymanager.v1.Entity
	15, // 1: anduril.entitymanager.v1.PublishEntitiesRequest.entity:type_name -> anduril.entitymanager.v1.Entity
	15, // 2: anduril.entitymanager.v1.GetEntityResponse.entity:type_name -> anduril.entitymanager.v1.Entity
	15, // 3: anduril.entitymanager.v1.OverrideEntityRequest.entity:type_name -> anduril.entitymanager.v1.Entity
	16, // 4: anduril.entitymanager.v1.OverrideEntityRequest.provenance:type_name -> anduril.entitymanager.v1.Provenance
	17, // 5: anduril.entitymanager.v1.OverrideEntityResponse.status:type_name -> anduril.entitymanager.v1.OverrideStatus
	18, // 6: anduril.entitymanager.v1.StreamEntityComponentsRequest.filter:type_name -> anduril.entitymanager.v1.Statement
	19, // 7: anduril.entitymanager.v1.StreamEntityComponentsRequest.rate_limit:type_name -> anduril.entitymanager.v1.RateLimit
	13, // 8: anduril.entitymanager.v1.StreamEntityComponentsResponse.entity_event:type_name -> anduril.entitymanager.v1.EntityEvent
	14, // 9: anduril.entitymanager.v1.StreamEntityComponentsResponse.heartbeat:type_name -> anduril.entitymanager.v1.Heartbeat
	0,  // 10: anduril.entitymanager.v1.EntityEvent.event_type:type_name -> anduril.entitymanager.v1.EventType
	20, // 11: anduril.entitymanager.v1.EntityEvent.time:type_name -> google.protobuf.Timestamp
	15, // 12: anduril.entitymanager.v1.EntityEvent.entity:type_name -> anduril.entitymanager.v1.Entity
	20, // 13: anduril.entitymanager.v1.Heartbeat.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 14: anduril.entitymanager.v1.EntityManagerAPI.PublishEntity:input_type -> anduril.entitymanager.v1.PublishEntityRequest
	3,  // 15: anduril.entitymanager.v1.EntityManagerAPI.PublishEntities:input_type -> anduril.entitymanager.v1.PublishEntitiesRequest
	5,  // 16: anduril.entitymanager.v1.EntityManagerAPI.GetEntity:input_type -> anduril.entitymanager.v1.GetEntityRequest
	7,  // 17: anduril.entitymanager.v1.EntityManagerAPI.OverrideEntity:input_type -> anduril.entitymanager.v1.OverrideEntityRequest
	9,  // 18: anduril.entitymanager.v1.EntityManagerAPI.RemoveEntityOverride:input_type -> anduril.entitymanager.v1.RemoveEntityOverrideRequest
	11, // 19: anduril.entitymanager.v1.EntityManagerAPI.StreamEntityComponents:input_type -> anduril.entitymanager.v1.StreamEntityComponentsRequest
	2,  // 20: anduril.entitymanager.v1.EntityManagerAPI.PublishEntity:output_type -> anduril.entitymanager.v1.PublishEntityResponse
	4,  // 21: anduril.entitymanager.v1.EntityManagerAPI.PublishEntities:output_type -> anduril.entitymanager.v1.PublishEntitiesResponse
	6,  // 22: anduril.entitymanager.v1.EntityManagerAPI.GetEntity:output_type -> anduril.entitymanager.v1.GetEntityResponse
	8,  // 23: anduril.entitymanager.v1.EntityManagerAPI.OverrideEntity:output_type -> anduril.entitymanager.v1.OverrideEntityResponse
	10, // 24: anduril.entitymanager.v1.EntityManagerAPI.RemoveEntityOverride:output_type -> anduril.entitymanager.v1.RemoveEntityOverrideResponse
	12, // 25: anduril.entitymanager.v1.EntityManagerAPI.StreamEntityComponents:output_type -> anduril.entitymanager.v1.StreamEntityComponentsResponse
	20, // [20:26] is the sub-list for method output_type
	14, // [14:20] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_init() }
func file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_init() {
	if File_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto != nil {
		return
	}
	file_anduril_entitymanager_v1_entity_pub_proto_init()
	file_anduril_entitymanager_v1_filter_pub_proto_init()
	file_anduril_entitymanager_v1_rate_limit_pub_proto_init()
	file_anduril_entitymanager_v1_types_pub_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_goTypes,
		DependencyIndexes: file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_depIdxs,
		EnumInfos:         file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_enumTypes,
		MessageInfos:      file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_msgTypes,
	}.Build()
	File_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto = out.File
	file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_rawDesc = nil
	file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_goTypes = nil
	file_anduril_entitymanager_v1_entity_manager_grpcapi_pub_proto_depIdxs = nil
}
