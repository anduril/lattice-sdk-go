// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: anduril/entitymanager/v1/entity_manager_grpcapi.pub.proto

package entitymanagerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EntityManagerAPI_PublishEntity_FullMethodName          = "/anduril.entitymanager.v1.EntityManagerAPI/PublishEntity"
	EntityManagerAPI_PublishEntities_FullMethodName        = "/anduril.entitymanager.v1.EntityManagerAPI/PublishEntities"
	EntityManagerAPI_GetEntity_FullMethodName              = "/anduril.entitymanager.v1.EntityManagerAPI/GetEntity"
	EntityManagerAPI_OverrideEntity_FullMethodName         = "/anduril.entitymanager.v1.EntityManagerAPI/OverrideEntity"
	EntityManagerAPI_RemoveEntityOverride_FullMethodName   = "/anduril.entitymanager.v1.EntityManagerAPI/RemoveEntityOverride"
	EntityManagerAPI_StreamEntityComponents_FullMethodName = "/anduril.entitymanager.v1.EntityManagerAPI/StreamEntityComponents"
)

// EntityManagerAPIClient is the client API for EntityManagerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Entity Manager manages the lifecycle of the entities that comprise the common operational picture (COP).
//
// Every object in the COP is represented as an "Entity." Each Entity is essentially an ID, with a lifecycle
// and a collection of data components. Each data component is a separate protobuf message definition.
//
// Entity Manager provides a way to query the currently live set of entities within a set of filter constraints,
// as well as a limited set of management APIs to change the grouping or relationships between entities.
type EntityManagerAPIClient interface {
	// Create or update an entity and get a response confirming whether the Entity Manager API succesfully processes
	// the entity. Ideal for testing environments.
	// When publishing an entity, only your integration can modify or delete that entity; other sources, such as the
	// UI or other integrations, can't. If you're pushing entity updates so fast that your publish task can't keep
	// up with your update rate (a rough estimate of >= 1 Hz), use the PublishEntities request instead.
	PublishEntity(ctx context.Context, in *PublishEntityRequest, opts ...grpc.CallOption) (*PublishEntityResponse, error)
	// Create or update one or more entities rapidly using PublishEntities, which doesn't return error messages
	// for invalid entities or provide server feedback. When publishing entities, only your integration can
	// modify or delete those entities; other sources, such as the UI or other integrations, can't.
	// When you use PublishEntities, you gain higher throughput at the expense of receiving no server responses or
	// validation. In addition, due to gRPC stream mechanics, you risk losing messages queued on the outgoing gRPC
	// buffer if the stream connection is lost prior to the messages being sent. If you need validation responses,
	// are developing in testing environments, or have lower entity update rates, use PublishEntity.
	PublishEntities(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PublishEntitiesRequest, PublishEntitiesResponse], error)
	// Get an entity using its entityId.
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error)
	// Override an Entity Component. An override is a definitive change to entity data. Any authorized user of service
	// can override overridable components on any entity. Only fields marked with overridable can be overridden.
	// When setting an override, the user or service setting the override is asserting that they are certain of the change
	// and the truth behind it.
	OverrideEntity(ctx context.Context, in *OverrideEntityRequest, opts ...grpc.CallOption) (*OverrideEntityResponse, error)
	// Remove an override for an Entity component.
	RemoveEntityOverride(ctx context.Context, in *RemoveEntityOverrideRequest, opts ...grpc.CallOption) (*RemoveEntityOverrideResponse, error)
	// Returns a stream of entities with specified components populated.
	StreamEntityComponents(ctx context.Context, in *StreamEntityComponentsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamEntityComponentsResponse], error)
}

type entityManagerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityManagerAPIClient(cc grpc.ClientConnInterface) EntityManagerAPIClient {
	return &entityManagerAPIClient{cc}
}

func (c *entityManagerAPIClient) PublishEntity(ctx context.Context, in *PublishEntityRequest, opts ...grpc.CallOption) (*PublishEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishEntityResponse)
	err := c.cc.Invoke(ctx, EntityManagerAPI_PublishEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityManagerAPIClient) PublishEntities(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PublishEntitiesRequest, PublishEntitiesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EntityManagerAPI_ServiceDesc.Streams[0], EntityManagerAPI_PublishEntities_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PublishEntitiesRequest, PublishEntitiesResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EntityManagerAPI_PublishEntitiesClient = grpc.ClientStreamingClient[PublishEntitiesRequest, PublishEntitiesResponse]

func (c *entityManagerAPIClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntityResponse)
	err := c.cc.Invoke(ctx, EntityManagerAPI_GetEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityManagerAPIClient) OverrideEntity(ctx context.Context, in *OverrideEntityRequest, opts ...grpc.CallOption) (*OverrideEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OverrideEntityResponse)
	err := c.cc.Invoke(ctx, EntityManagerAPI_OverrideEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityManagerAPIClient) RemoveEntityOverride(ctx context.Context, in *RemoveEntityOverrideRequest, opts ...grpc.CallOption) (*RemoveEntityOverrideResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveEntityOverrideResponse)
	err := c.cc.Invoke(ctx, EntityManagerAPI_RemoveEntityOverride_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityManagerAPIClient) StreamEntityComponents(ctx context.Context, in *StreamEntityComponentsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamEntityComponentsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EntityManagerAPI_ServiceDesc.Streams[1], EntityManagerAPI_StreamEntityComponents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamEntityComponentsRequest, StreamEntityComponentsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EntityManagerAPI_StreamEntityComponentsClient = grpc.ServerStreamingClient[StreamEntityComponentsResponse]

// EntityManagerAPIServer is the server API for EntityManagerAPI service.
// All implementations must embed UnimplementedEntityManagerAPIServer
// for forward compatibility.
//
// Entity Manager manages the lifecycle of the entities that comprise the common operational picture (COP).
//
// Every object in the COP is represented as an "Entity." Each Entity is essentially an ID, with a lifecycle
// and a collection of data components. Each data component is a separate protobuf message definition.
//
// Entity Manager provides a way to query the currently live set of entities within a set of filter constraints,
// as well as a limited set of management APIs to change the grouping or relationships between entities.
type EntityManagerAPIServer interface {
	// Create or update an entity and get a response confirming whether the Entity Manager API succesfully processes
	// the entity. Ideal for testing environments.
	// When publishing an entity, only your integration can modify or delete that entity; other sources, such as the
	// UI or other integrations, can't. If you're pushing entity updates so fast that your publish task can't keep
	// up with your update rate (a rough estimate of >= 1 Hz), use the PublishEntities request instead.
	PublishEntity(context.Context, *PublishEntityRequest) (*PublishEntityResponse, error)
	// Create or update one or more entities rapidly using PublishEntities, which doesn't return error messages
	// for invalid entities or provide server feedback. When publishing entities, only your integration can
	// modify or delete those entities; other sources, such as the UI or other integrations, can't.
	// When you use PublishEntities, you gain higher throughput at the expense of receiving no server responses or
	// validation. In addition, due to gRPC stream mechanics, you risk losing messages queued on the outgoing gRPC
	// buffer if the stream connection is lost prior to the messages being sent. If you need validation responses,
	// are developing in testing environments, or have lower entity update rates, use PublishEntity.
	PublishEntities(grpc.ClientStreamingServer[PublishEntitiesRequest, PublishEntitiesResponse]) error
	// Get an entity using its entityId.
	GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error)
	// Override an Entity Component. An override is a definitive change to entity data. Any authorized user of service
	// can override overridable components on any entity. Only fields marked with overridable can be overridden.
	// When setting an override, the user or service setting the override is asserting that they are certain of the change
	// and the truth behind it.
	OverrideEntity(context.Context, *OverrideEntityRequest) (*OverrideEntityResponse, error)
	// Remove an override for an Entity component.
	RemoveEntityOverride(context.Context, *RemoveEntityOverrideRequest) (*RemoveEntityOverrideResponse, error)
	// Returns a stream of entities with specified components populated.
	StreamEntityComponents(*StreamEntityComponentsRequest, grpc.ServerStreamingServer[StreamEntityComponentsResponse]) error
	mustEmbedUnimplementedEntityManagerAPIServer()
}

// UnimplementedEntityManagerAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEntityManagerAPIServer struct{}

func (UnimplementedEntityManagerAPIServer) PublishEntity(context.Context, *PublishEntityRequest) (*PublishEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishEntity not implemented")
}
func (UnimplementedEntityManagerAPIServer) PublishEntities(grpc.ClientStreamingServer[PublishEntitiesRequest, PublishEntitiesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PublishEntities not implemented")
}
func (UnimplementedEntityManagerAPIServer) GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (UnimplementedEntityManagerAPIServer) OverrideEntity(context.Context, *OverrideEntityRequest) (*OverrideEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverrideEntity not implemented")
}
func (UnimplementedEntityManagerAPIServer) RemoveEntityOverride(context.Context, *RemoveEntityOverrideRequest) (*RemoveEntityOverrideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEntityOverride not implemented")
}
func (UnimplementedEntityManagerAPIServer) StreamEntityComponents(*StreamEntityComponentsRequest, grpc.ServerStreamingServer[StreamEntityComponentsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEntityComponents not implemented")
}
func (UnimplementedEntityManagerAPIServer) mustEmbedUnimplementedEntityManagerAPIServer() {}
func (UnimplementedEntityManagerAPIServer) testEmbeddedByValue()                          {}

// UnsafeEntityManagerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntityManagerAPIServer will
// result in compilation errors.
type UnsafeEntityManagerAPIServer interface {
	mustEmbedUnimplementedEntityManagerAPIServer()
}

func RegisterEntityManagerAPIServer(s grpc.ServiceRegistrar, srv EntityManagerAPIServer) {
	// If the following call pancis, it indicates UnimplementedEntityManagerAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EntityManagerAPI_ServiceDesc, srv)
}

func _EntityManagerAPI_PublishEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityManagerAPIServer).PublishEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityManagerAPI_PublishEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityManagerAPIServer).PublishEntity(ctx, req.(*PublishEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityManagerAPI_PublishEntities_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EntityManagerAPIServer).PublishEntities(&grpc.GenericServerStream[PublishEntitiesRequest, PublishEntitiesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EntityManagerAPI_PublishEntitiesServer = grpc.ClientStreamingServer[PublishEntitiesRequest, PublishEntitiesResponse]

func _EntityManagerAPI_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityManagerAPIServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityManagerAPI_GetEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityManagerAPIServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityManagerAPI_OverrideEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverrideEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityManagerAPIServer).OverrideEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityManagerAPI_OverrideEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityManagerAPIServer).OverrideEntity(ctx, req.(*OverrideEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityManagerAPI_RemoveEntityOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEntityOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityManagerAPIServer).RemoveEntityOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityManagerAPI_RemoveEntityOverride_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityManagerAPIServer).RemoveEntityOverride(ctx, req.(*RemoveEntityOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityManagerAPI_StreamEntityComponents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEntityComponentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EntityManagerAPIServer).StreamEntityComponents(m, &grpc.GenericServerStream[StreamEntityComponentsRequest, StreamEntityComponentsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EntityManagerAPI_StreamEntityComponentsServer = grpc.ServerStreamingServer[StreamEntityComponentsResponse]

// EntityManagerAPI_ServiceDesc is the grpc.ServiceDesc for EntityManagerAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntityManagerAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "anduril.entitymanager.v1.EntityManagerAPI",
	HandlerType: (*EntityManagerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishEntity",
			Handler:    _EntityManagerAPI_PublishEntity_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _EntityManagerAPI_GetEntity_Handler,
		},
		{
			MethodName: "OverrideEntity",
			Handler:    _EntityManagerAPI_OverrideEntity_Handler,
		},
		{
			MethodName: "RemoveEntityOverride",
			Handler:    _EntityManagerAPI_RemoveEntityOverride_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PublishEntities",
			Handler:       _EntityManagerAPI_PublishEntities_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamEntityComponents",
			Handler:       _EntityManagerAPI_StreamEntityComponents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "anduril/entitymanager/v1/entity_manager_grpcapi.pub.proto",
}
