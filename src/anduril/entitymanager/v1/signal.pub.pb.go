// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: anduril/entitymanager/v1/signal.pub.proto

package entitymanagerv1

import (
	_type "github.com/anduril/lattice-sdk-go/src/anduril/type"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumerates the possible scan types
type ScanType int32

const (
	ScanType_SCAN_TYPE_INVALID                          ScanType = 0
	ScanType_SCAN_TYPE_CIRCULAR                         ScanType = 1
	ScanType_SCAN_TYPE_BIDIRECTIONAL_HORIZONTAL_SECTOR  ScanType = 2
	ScanType_SCAN_TYPE_BIDIRECTIONAL_VERTICAL_SECTOR    ScanType = 3
	ScanType_SCAN_TYPE_NON_SCANNING                     ScanType = 4
	ScanType_SCAN_TYPE_IRREGULAR                        ScanType = 5
	ScanType_SCAN_TYPE_CONICAL                          ScanType = 6
	ScanType_SCAN_TYPE_LOBE_SWITCHING                   ScanType = 7
	ScanType_SCAN_TYPE_RASTER                           ScanType = 8
	ScanType_SCAN_TYPE_CIRCULAR_VERTICAL_SECTOR         ScanType = 9
	ScanType_SCAN_TYPE_CIRCULAR_CONICAL                 ScanType = 10
	ScanType_SCAN_TYPE_SECTOR_CONICAL                   ScanType = 11
	ScanType_SCAN_TYPE_AGILE_BEAM                       ScanType = 12
	ScanType_SCAN_TYPE_UNIDIRECTIONAL_VERTICAL_SECTOR   ScanType = 13
	ScanType_SCAN_TYPE_UNIDIRECTIONAL_HORIZONTAL_SECTOR ScanType = 14
	ScanType_SCAN_TYPE_UNIDIRECTIONAL_SECTOR            ScanType = 15
	ScanType_SCAN_TYPE_BIDIRECTIONAL_SECTOR             ScanType = 16
)

// Enum value maps for ScanType.
var (
	ScanType_name = map[int32]string{
		0:  "SCAN_TYPE_INVALID",
		1:  "SCAN_TYPE_CIRCULAR",
		2:  "SCAN_TYPE_BIDIRECTIONAL_HORIZONTAL_SECTOR",
		3:  "SCAN_TYPE_BIDIRECTIONAL_VERTICAL_SECTOR",
		4:  "SCAN_TYPE_NON_SCANNING",
		5:  "SCAN_TYPE_IRREGULAR",
		6:  "SCAN_TYPE_CONICAL",
		7:  "SCAN_TYPE_LOBE_SWITCHING",
		8:  "SCAN_TYPE_RASTER",
		9:  "SCAN_TYPE_CIRCULAR_VERTICAL_SECTOR",
		10: "SCAN_TYPE_CIRCULAR_CONICAL",
		11: "SCAN_TYPE_SECTOR_CONICAL",
		12: "SCAN_TYPE_AGILE_BEAM",
		13: "SCAN_TYPE_UNIDIRECTIONAL_VERTICAL_SECTOR",
		14: "SCAN_TYPE_UNIDIRECTIONAL_HORIZONTAL_SECTOR",
		15: "SCAN_TYPE_UNIDIRECTIONAL_SECTOR",
		16: "SCAN_TYPE_BIDIRECTIONAL_SECTOR",
	}
	ScanType_value = map[string]int32{
		"SCAN_TYPE_INVALID":                          0,
		"SCAN_TYPE_CIRCULAR":                         1,
		"SCAN_TYPE_BIDIRECTIONAL_HORIZONTAL_SECTOR":  2,
		"SCAN_TYPE_BIDIRECTIONAL_VERTICAL_SECTOR":    3,
		"SCAN_TYPE_NON_SCANNING":                     4,
		"SCAN_TYPE_IRREGULAR":                        5,
		"SCAN_TYPE_CONICAL":                          6,
		"SCAN_TYPE_LOBE_SWITCHING":                   7,
		"SCAN_TYPE_RASTER":                           8,
		"SCAN_TYPE_CIRCULAR_VERTICAL_SECTOR":         9,
		"SCAN_TYPE_CIRCULAR_CONICAL":                 10,
		"SCAN_TYPE_SECTOR_CONICAL":                   11,
		"SCAN_TYPE_AGILE_BEAM":                       12,
		"SCAN_TYPE_UNIDIRECTIONAL_VERTICAL_SECTOR":   13,
		"SCAN_TYPE_UNIDIRECTIONAL_HORIZONTAL_SECTOR": 14,
		"SCAN_TYPE_UNIDIRECTIONAL_SECTOR":            15,
		"SCAN_TYPE_BIDIRECTIONAL_SECTOR":             16,
	}
)

func (x ScanType) Enum() *ScanType {
	p := new(ScanType)
	*p = x
	return p
}

func (x ScanType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScanType) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_signal_pub_proto_enumTypes[0].Descriptor()
}

func (ScanType) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_signal_pub_proto_enumTypes[0]
}

func (x ScanType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScanType.Descriptor instead.
func (ScanType) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{0}
}

// A component that describes an entity's signal characteristics.
type Signal struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates either a frequency range or a center frequency of this signal.
	//
	// Types that are valid to be assigned to FrequencyMeasurement:
	//
	//	*Signal_FrequencyCenter
	//	*Signal_FrequencyRange
	FrequencyMeasurement isSignal_FrequencyMeasurement `protobuf_oneof:"frequency_measurement"`
	// Indicates the bandwidth of a signal (Hz).
	BandwidthHz *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=bandwidth_hz,json=bandwidthHz,proto3" json:"bandwidth_hz,omitempty"`
	// Indicates the signal to noise (SNR) of this signal.
	SignalToNoiseRatio *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=signal_to_noise_ratio,json=signalToNoiseRatio,proto3" json:"signal_to_noise_ratio,omitempty"`
	// Indicates the signal report.
	//
	// Types that are valid to be assigned to Report:
	//
	//	*Signal_LineOfBearing
	//	*Signal_Fixed
	Report isSignal_Report `protobuf_oneof:"report"`
	// Emitter notations associated with this entity.
	EmitterNotations []*EmitterNotation `protobuf:"bytes,7,rep,name=emitter_notations,json=emitterNotations,proto3" json:"emitter_notations,omitempty"`
	// length in time of a single pulse
	PulseWidthS *wrapperspb.DoubleValue `protobuf:"bytes,8,opt,name=pulse_width_s,json=pulseWidthS,proto3" json:"pulse_width_s,omitempty"`
	// length in time between the start of two pulses
	PulseRepetitionInterval *PulseRepetitionInterval `protobuf:"bytes,9,opt,name=pulse_repetition_interval,json=pulseRepetitionInterval,proto3" json:"pulse_repetition_interval,omitempty"`
	// describes how a signal is observing the environment
	ScanCharacteristics *ScanCharacteristics `protobuf:"bytes,11,opt,name=scan_characteristics,json=scanCharacteristics,proto3" json:"scan_characteristics,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Signal) Reset() {
	*x = Signal{}
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal) ProtoMessage() {}

func (x *Signal) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal.ProtoReflect.Descriptor instead.
func (*Signal) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{0}
}

func (x *Signal) GetFrequencyMeasurement() isSignal_FrequencyMeasurement {
	if x != nil {
		return x.FrequencyMeasurement
	}
	return nil
}

func (x *Signal) GetFrequencyCenter() *Frequency {
	if x != nil {
		if x, ok := x.FrequencyMeasurement.(*Signal_FrequencyCenter); ok {
			return x.FrequencyCenter
		}
	}
	return nil
}

func (x *Signal) GetFrequencyRange() *FrequencyRange {
	if x != nil {
		if x, ok := x.FrequencyMeasurement.(*Signal_FrequencyRange); ok {
			return x.FrequencyRange
		}
	}
	return nil
}

func (x *Signal) GetBandwidthHz() *wrapperspb.DoubleValue {
	if x != nil {
		return x.BandwidthHz
	}
	return nil
}

func (x *Signal) GetSignalToNoiseRatio() *wrapperspb.DoubleValue {
	if x != nil {
		return x.SignalToNoiseRatio
	}
	return nil
}

func (x *Signal) GetReport() isSignal_Report {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *Signal) GetLineOfBearing() *LineOfBearing {
	if x != nil {
		if x, ok := x.Report.(*Signal_LineOfBearing); ok {
			return x.LineOfBearing
		}
	}
	return nil
}

func (x *Signal) GetFixed() *Fixed {
	if x != nil {
		if x, ok := x.Report.(*Signal_Fixed); ok {
			return x.Fixed
		}
	}
	return nil
}

func (x *Signal) GetEmitterNotations() []*EmitterNotation {
	if x != nil {
		return x.EmitterNotations
	}
	return nil
}

func (x *Signal) GetPulseWidthS() *wrapperspb.DoubleValue {
	if x != nil {
		return x.PulseWidthS
	}
	return nil
}

func (x *Signal) GetPulseRepetitionInterval() *PulseRepetitionInterval {
	if x != nil {
		return x.PulseRepetitionInterval
	}
	return nil
}

func (x *Signal) GetScanCharacteristics() *ScanCharacteristics {
	if x != nil {
		return x.ScanCharacteristics
	}
	return nil
}

type isSignal_FrequencyMeasurement interface {
	isSignal_FrequencyMeasurement()
}

type Signal_FrequencyCenter struct {
	FrequencyCenter *Frequency `protobuf:"bytes,1,opt,name=frequency_center,json=frequencyCenter,proto3,oneof"`
}

type Signal_FrequencyRange struct {
	FrequencyRange *FrequencyRange `protobuf:"bytes,2,opt,name=frequency_range,json=frequencyRange,proto3,oneof"`
}

func (*Signal_FrequencyCenter) isSignal_FrequencyMeasurement() {}

func (*Signal_FrequencyRange) isSignal_FrequencyMeasurement() {}

type isSignal_Report interface {
	isSignal_Report()
}

type Signal_LineOfBearing struct {
	LineOfBearing *LineOfBearing `protobuf:"bytes,5,opt,name=line_of_bearing,json=lineOfBearing,proto3,oneof"`
}

type Signal_Fixed struct {
	Fixed *Fixed `protobuf:"bytes,6,opt,name=fixed,proto3,oneof"`
}

func (*Signal_LineOfBearing) isSignal_Report() {}

func (*Signal_Fixed) isSignal_Report() {}

// A representation of a single emitter notation.
type EmitterNotation struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	EmitterNotation string                 `protobuf:"bytes,1,opt,name=emitter_notation,json=emitterNotation,proto3" json:"emitter_notation,omitempty"`
	// confidence as a percentage that the emitter notation in this component is accurate
	Confidence    *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmitterNotation) Reset() {
	*x = EmitterNotation{}
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmitterNotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmitterNotation) ProtoMessage() {}

func (x *EmitterNotation) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmitterNotation.ProtoReflect.Descriptor instead.
func (*EmitterNotation) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{1}
}

func (x *EmitterNotation) GetEmitterNotation() string {
	if x != nil {
		return x.EmitterNotation
	}
	return ""
}

func (x *EmitterNotation) GetConfidence() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Confidence
	}
	return nil
}

// A component that describes some measured value with error.
type Measurement struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The value of the measurement.
	Value *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Estimated one standard deviation in same unit as the value.
	Sigma         *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=sigma,proto3" json:"sigma,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Measurement) Reset() {
	*x = Measurement{}
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Measurement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Measurement) ProtoMessage() {}

func (x *Measurement) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Measurement.ProtoReflect.Descriptor instead.
func (*Measurement) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{2}
}

func (x *Measurement) GetValue() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Measurement) GetSigma() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Sigma
	}
	return nil
}

// A component for describing frequency.
type Frequency struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates a frequency of a signal (Hz) with its standard deviation.
	FrequencyHz   *Measurement `protobuf:"bytes,1,opt,name=frequency_hz,json=frequencyHz,proto3" json:"frequency_hz,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Frequency) Reset() {
	*x = Frequency{}
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Frequency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frequency) ProtoMessage() {}

func (x *Frequency) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frequency.ProtoReflect.Descriptor instead.
func (*Frequency) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{3}
}

func (x *Frequency) GetFrequencyHz() *Measurement {
	if x != nil {
		return x.FrequencyHz
	}
	return nil
}

// A component to represent a frequency range.
type FrequencyRange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates the lowest measured frequency of a signal (Hz).
	MinimumFrequencyHz *Frequency `protobuf:"bytes,1,opt,name=minimum_frequency_hz,json=minimumFrequencyHz,proto3" json:"minimum_frequency_hz,omitempty"`
	// Indicates the maximum measured frequency of a signal (Hz).
	MaximumFrequencyHz *Frequency `protobuf:"bytes,2,opt,name=maximum_frequency_hz,json=maximumFrequencyHz,proto3" json:"maximum_frequency_hz,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FrequencyRange) Reset() {
	*x = FrequencyRange{}
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrequencyRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequencyRange) ProtoMessage() {}

func (x *FrequencyRange) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequencyRange.ProtoReflect.Descriptor instead.
func (*FrequencyRange) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{4}
}

func (x *FrequencyRange) GetMinimumFrequencyHz() *Frequency {
	if x != nil {
		return x.MinimumFrequencyHz
	}
	return nil
}

func (x *FrequencyRange) GetMaximumFrequencyHz() *Frequency {
	if x != nil {
		return x.MaximumFrequencyHz
	}
	return nil
}

// A line of bearing of a signal.
type LineOfBearing struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The direction pointing from this entity to the detection
	AngleOfArrival *AngleOfArrival `protobuf:"bytes,3,opt,name=angle_of_arrival,json=angleOfArrival,proto3" json:"angle_of_arrival,omitempty"`
	// The range of the detection in the direction defined by the angle of arrival
	//
	// Types that are valid to be assigned to DetectionRange:
	//
	//	*LineOfBearing_RangeEstimateM
	//	*LineOfBearing_MaxRangeM
	DetectionRange isLineOfBearing_DetectionRange `protobuf_oneof:"detection_range"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LineOfBearing) Reset() {
	*x = LineOfBearing{}
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LineOfBearing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineOfBearing) ProtoMessage() {}

func (x *LineOfBearing) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineOfBearing.ProtoReflect.Descriptor instead.
func (*LineOfBearing) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{5}
}

func (x *LineOfBearing) GetAngleOfArrival() *AngleOfArrival {
	if x != nil {
		return x.AngleOfArrival
	}
	return nil
}

func (x *LineOfBearing) GetDetectionRange() isLineOfBearing_DetectionRange {
	if x != nil {
		return x.DetectionRange
	}
	return nil
}

func (x *LineOfBearing) GetRangeEstimateM() *Measurement {
	if x != nil {
		if x, ok := x.DetectionRange.(*LineOfBearing_RangeEstimateM); ok {
			return x.RangeEstimateM
		}
	}
	return nil
}

func (x *LineOfBearing) GetMaxRangeM() *Measurement {
	if x != nil {
		if x, ok := x.DetectionRange.(*LineOfBearing_MaxRangeM); ok {
			return x.MaxRangeM
		}
	}
	return nil
}

type isLineOfBearing_DetectionRange interface {
	isLineOfBearing_DetectionRange()
}

type LineOfBearing_RangeEstimateM struct {
	// The estimated distance of the detection
	RangeEstimateM *Measurement `protobuf:"bytes,4,opt,name=range_estimate_m,json=rangeEstimateM,proto3,oneof"`
}

type LineOfBearing_MaxRangeM struct {
	// The maximum distance of the detection
	MaxRangeM *Measurement `protobuf:"bytes,5,opt,name=max_range_m,json=maxRangeM,proto3,oneof"`
}

func (*LineOfBearing_RangeEstimateM) isLineOfBearing_DetectionRange() {}

func (*LineOfBearing_MaxRangeM) isLineOfBearing_DetectionRange() {}

// The direction from which the signal is received
type AngleOfArrival struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Origin (LLA) and attitude (relative to ENU) of a ray pointing towards the detection. The attitude represents a
	// forward-left-up (FLU) frame where the x-axis (1, 0, 0) is pointing towards the target.
	RelativePose *_type.Pose `protobuf:"bytes,1,opt,name=relative_pose,json=relativePose,proto3" json:"relative_pose,omitempty"`
	// Bearing/elevation covariance matrix where bearing is defined in radians CCW+ about the z-axis from the x-axis of FLU frame
	// and elevation is positive down from the FL/XY plane.
	// mxx = bearing variance in rad^2
	// mxy = bearing/elevation covariance in rad^2
	// myy = elevation variance in rad^2
	BearingElevationCovarianceRad2 *_type.TMat2 `protobuf:"bytes,2,opt,name=bearing_elevation_covariance_rad2,json=bearingElevationCovarianceRad2,proto3" json:"bearing_elevation_covariance_rad2,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *AngleOfArrival) Reset() {
	*x = AngleOfArrival{}
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AngleOfArrival) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AngleOfArrival) ProtoMessage() {}

func (x *AngleOfArrival) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AngleOfArrival.ProtoReflect.Descriptor instead.
func (*AngleOfArrival) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{6}
}

func (x *AngleOfArrival) GetRelativePose() *_type.Pose {
	if x != nil {
		return x.RelativePose
	}
	return nil
}

func (x *AngleOfArrival) GetBearingElevationCovarianceRad2() *_type.TMat2 {
	if x != nil {
		return x.BearingElevationCovarianceRad2
	}
	return nil
}

// A fix of a signal. No extra fields but it is expected that location should be populated when using this report.
type Fixed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Fixed) Reset() {
	*x = Fixed{}
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fixed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fixed) ProtoMessage() {}

func (x *Fixed) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fixed.ProtoReflect.Descriptor instead.
func (*Fixed) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{7}
}

// A component that describe the length in time between two pulses
type PulseRepetitionInterval struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	PulseRepetitionIntervalS *Measurement           `protobuf:"bytes,1,opt,name=pulse_repetition_interval_s,json=pulseRepetitionIntervalS,proto3" json:"pulse_repetition_interval_s,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *PulseRepetitionInterval) Reset() {
	*x = PulseRepetitionInterval{}
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PulseRepetitionInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulseRepetitionInterval) ProtoMessage() {}

func (x *PulseRepetitionInterval) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulseRepetitionInterval.ProtoReflect.Descriptor instead.
func (*PulseRepetitionInterval) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{8}
}

func (x *PulseRepetitionInterval) GetPulseRepetitionIntervalS() *Measurement {
	if x != nil {
		return x.PulseRepetitionIntervalS
	}
	return nil
}

// A component that describes the scanning characteristics of a signal
type ScanCharacteristics struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	ScanType      ScanType                `protobuf:"varint,1,opt,name=scan_type,json=scanType,proto3,enum=anduril.entitymanager.v1.ScanType" json:"scan_type,omitempty"`
	ScanPeriodS   *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=scan_period_s,json=scanPeriodS,proto3" json:"scan_period_s,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScanCharacteristics) Reset() {
	*x = ScanCharacteristics{}
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScanCharacteristics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanCharacteristics) ProtoMessage() {}

func (x *ScanCharacteristics) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanCharacteristics.ProtoReflect.Descriptor instead.
func (*ScanCharacteristics) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{9}
}

func (x *ScanCharacteristics) GetScanType() ScanType {
	if x != nil {
		return x.ScanType
	}
	return ScanType_SCAN_TYPE_INVALID
}

func (x *ScanCharacteristics) GetScanPeriodS() *wrapperspb.DoubleValue {
	if x != nil {
		return x.ScanPeriodS
	}
	return nil
}

var File_anduril_entitymanager_v1_signal_pub_proto protoreflect.FileDescriptor

const file_anduril_entitymanager_v1_signal_pub_proto_rawDesc = "" +
	"\n" +
	")anduril/entitymanager/v1/signal.pub.proto\x12\x18anduril.entitymanager.v1\x1a*anduril/entitymanager/v1/options.pub.proto\x1a\x1danduril/type/coords.pub.proto\x1a\x1egoogle/protobuf/wrappers.proto\"\xff\x06\n" +
	"\x06Signal\x12U\n" +
	"\x10frequency_center\x18\x01 \x01(\v2#.anduril.entitymanager.v1.FrequencyB\x03\xc8>\x01H\x00R\x0ffrequencyCenter\x12X\n" +
	"\x0ffrequency_range\x18\x02 \x01(\v2(.anduril.entitymanager.v1.FrequencyRangeB\x03\xc8>\x01H\x00R\x0efrequencyRange\x12D\n" +
	"\fbandwidth_hz\x18\x03 \x01(\v2\x1c.google.protobuf.DoubleValueB\x03\xc8>\x01R\vbandwidthHz\x12O\n" +
	"\x15signal_to_noise_ratio\x18\x04 \x01(\v2\x1c.google.protobuf.DoubleValueR\x12signalToNoiseRatio\x12Q\n" +
	"\x0fline_of_bearing\x18\x05 \x01(\v2'.anduril.entitymanager.v1.LineOfBearingH\x01R\rlineOfBearing\x127\n" +
	"\x05fixed\x18\x06 \x01(\v2\x1f.anduril.entitymanager.v1.FixedH\x01R\x05fixed\x12[\n" +
	"\x11emitter_notations\x18\a \x03(\v2).anduril.entitymanager.v1.EmitterNotationB\x03\xc8>\x01R\x10emitterNotations\x12E\n" +
	"\rpulse_width_s\x18\b \x01(\v2\x1c.google.protobuf.DoubleValueB\x03\xc8>\x01R\vpulseWidthS\x12r\n" +
	"\x19pulse_repetition_interval\x18\t \x01(\v21.anduril.entitymanager.v1.PulseRepetitionIntervalB\x03\xc8>\x01R\x17pulseRepetitionInterval\x12`\n" +
	"\x14scan_characteristics\x18\v \x01(\v2-.anduril.entitymanager.v1.ScanCharacteristicsR\x13scanCharacteristicsB\x17\n" +
	"\x15frequency_measurementB\b\n" +
	"\x06reportJ\x04\b\n" +
	"\x10\v\"z\n" +
	"\x0fEmitterNotation\x12)\n" +
	"\x10emitter_notation\x18\x01 \x01(\tR\x0femitterNotation\x12<\n" +
	"\n" +
	"confidence\x18\x02 \x01(\v2\x1c.google.protobuf.DoubleValueR\n" +
	"confidence\"u\n" +
	"\vMeasurement\x122\n" +
	"\x05value\x18\x01 \x01(\v2\x1c.google.protobuf.DoubleValueR\x05value\x122\n" +
	"\x05sigma\x18\x02 \x01(\v2\x1c.google.protobuf.DoubleValueR\x05sigma\"U\n" +
	"\tFrequency\x12H\n" +
	"\ffrequency_hz\x18\x01 \x01(\v2%.anduril.entitymanager.v1.MeasurementR\vfrequencyHz\"\xbe\x01\n" +
	"\x0eFrequencyRange\x12U\n" +
	"\x14minimum_frequency_hz\x18\x01 \x01(\v2#.anduril.entitymanager.v1.FrequencyR\x12minimumFrequencyHz\x12U\n" +
	"\x14maximum_frequency_hz\x18\x02 \x01(\v2#.anduril.entitymanager.v1.FrequencyR\x12maximumFrequencyHz\"\x9e\x02\n" +
	"\rLineOfBearing\x12R\n" +
	"\x10angle_of_arrival\x18\x03 \x01(\v2(.anduril.entitymanager.v1.AngleOfArrivalR\x0eangleOfArrival\x12Q\n" +
	"\x10range_estimate_m\x18\x04 \x01(\v2%.anduril.entitymanager.v1.MeasurementH\x00R\x0erangeEstimateM\x12G\n" +
	"\vmax_range_m\x18\x05 \x01(\v2%.anduril.entitymanager.v1.MeasurementH\x00R\tmaxRangeMB\x11\n" +
	"\x0fdetection_rangeJ\x04\b\x01\x10\x02J\x04\b\x02\x10\x03\"\xa9\x01\n" +
	"\x0eAngleOfArrival\x127\n" +
	"\rrelative_pose\x18\x01 \x01(\v2\x12.anduril.type.PoseR\frelativePose\x12^\n" +
	"!bearing_elevation_covariance_rad2\x18\x02 \x01(\v2\x13.anduril.type.TMat2R\x1ebearingElevationCovarianceRad2\"\a\n" +
	"\x05Fixed\"\x7f\n" +
	"\x17PulseRepetitionInterval\x12d\n" +
	"\x1bpulse_repetition_interval_s\x18\x01 \x01(\v2%.anduril.entitymanager.v1.MeasurementR\x18pulseRepetitionIntervalS\"\x98\x01\n" +
	"\x13ScanCharacteristics\x12?\n" +
	"\tscan_type\x18\x01 \x01(\x0e2\".anduril.entitymanager.v1.ScanTypeR\bscanType\x12@\n" +
	"\rscan_period_s\x18\x02 \x01(\v2\x1c.google.protobuf.DoubleValueR\vscanPeriodS*\xbc\x04\n" +
	"\bScanType\x12\x15\n" +
	"\x11SCAN_TYPE_INVALID\x10\x00\x12\x16\n" +
	"\x12SCAN_TYPE_CIRCULAR\x10\x01\x12-\n" +
	")SCAN_TYPE_BIDIRECTIONAL_HORIZONTAL_SECTOR\x10\x02\x12+\n" +
	"'SCAN_TYPE_BIDIRECTIONAL_VERTICAL_SECTOR\x10\x03\x12\x1a\n" +
	"\x16SCAN_TYPE_NON_SCANNING\x10\x04\x12\x17\n" +
	"\x13SCAN_TYPE_IRREGULAR\x10\x05\x12\x15\n" +
	"\x11SCAN_TYPE_CONICAL\x10\x06\x12\x1c\n" +
	"\x18SCAN_TYPE_LOBE_SWITCHING\x10\a\x12\x14\n" +
	"\x10SCAN_TYPE_RASTER\x10\b\x12&\n" +
	"\"SCAN_TYPE_CIRCULAR_VERTICAL_SECTOR\x10\t\x12\x1e\n" +
	"\x1aSCAN_TYPE_CIRCULAR_CONICAL\x10\n" +
	"\x12\x1c\n" +
	"\x18SCAN_TYPE_SECTOR_CONICAL\x10\v\x12\x18\n" +
	"\x14SCAN_TYPE_AGILE_BEAM\x10\f\x12,\n" +
	"(SCAN_TYPE_UNIDIRECTIONAL_VERTICAL_SECTOR\x10\r\x12.\n" +
	"*SCAN_TYPE_UNIDIRECTIONAL_HORIZONTAL_SECTOR\x10\x0e\x12#\n" +
	"\x1fSCAN_TYPE_UNIDIRECTIONAL_SECTOR\x10\x0f\x12\"\n" +
	"\x1eSCAN_TYPE_BIDIRECTIONAL_SECTOR\x10\x10B\x80\x02\n" +
	"\x1ccom.anduril.entitymanager.v1B\x0eSignalPubProtoP\x01ZNgithub.com/anduril/lattice-sdk-go/src/anduril/entitymanager/v1;entitymanagerv1\xa2\x02\x03AEX\xaa\x02\x18Anduril.Entitymanager.V1\xca\x02\x18Anduril\\Entitymanager\\V1\xe2\x02$Anduril\\Entitymanager\\V1\\GPBMetadata\xea\x02\x1aAnduril::Entitymanager::V1b\x06proto3"

var (
	file_anduril_entitymanager_v1_signal_pub_proto_rawDescOnce sync.Once
	file_anduril_entitymanager_v1_signal_pub_proto_rawDescData []byte
)

func file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP() []byte {
	file_anduril_entitymanager_v1_signal_pub_proto_rawDescOnce.Do(func() {
		file_anduril_entitymanager_v1_signal_pub_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_anduril_entitymanager_v1_signal_pub_proto_rawDesc), len(file_anduril_entitymanager_v1_signal_pub_proto_rawDesc)))
	})
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescData
}

var file_anduril_entitymanager_v1_signal_pub_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_anduril_entitymanager_v1_signal_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_anduril_entitymanager_v1_signal_pub_proto_goTypes = []any{
	(ScanType)(0),                   // 0: anduril.entitymanager.v1.ScanType
	(*Signal)(nil),                  // 1: anduril.entitymanager.v1.Signal
	(*EmitterNotation)(nil),         // 2: anduril.entitymanager.v1.EmitterNotation
	(*Measurement)(nil),             // 3: anduril.entitymanager.v1.Measurement
	(*Frequency)(nil),               // 4: anduril.entitymanager.v1.Frequency
	(*FrequencyRange)(nil),          // 5: anduril.entitymanager.v1.FrequencyRange
	(*LineOfBearing)(nil),           // 6: anduril.entitymanager.v1.LineOfBearing
	(*AngleOfArrival)(nil),          // 7: anduril.entitymanager.v1.AngleOfArrival
	(*Fixed)(nil),                   // 8: anduril.entitymanager.v1.Fixed
	(*PulseRepetitionInterval)(nil), // 9: anduril.entitymanager.v1.PulseRepetitionInterval
	(*ScanCharacteristics)(nil),     // 10: anduril.entitymanager.v1.ScanCharacteristics
	(*wrapperspb.DoubleValue)(nil),  // 11: google.protobuf.DoubleValue
	(*_type.Pose)(nil),              // 12: anduril.type.Pose
	(*_type.TMat2)(nil),             // 13: anduril.type.TMat2
}
var file_anduril_entitymanager_v1_signal_pub_proto_depIdxs = []int32{
	4,  // 0: anduril.entitymanager.v1.Signal.frequency_center:type_name -> anduril.entitymanager.v1.Frequency
	5,  // 1: anduril.entitymanager.v1.Signal.frequency_range:type_name -> anduril.entitymanager.v1.FrequencyRange
	11, // 2: anduril.entitymanager.v1.Signal.bandwidth_hz:type_name -> google.protobuf.DoubleValue
	11, // 3: anduril.entitymanager.v1.Signal.signal_to_noise_ratio:type_name -> google.protobuf.DoubleValue
	6,  // 4: anduril.entitymanager.v1.Signal.line_of_bearing:type_name -> anduril.entitymanager.v1.LineOfBearing
	8,  // 5: anduril.entitymanager.v1.Signal.fixed:type_name -> anduril.entitymanager.v1.Fixed
	2,  // 6: anduril.entitymanager.v1.Signal.emitter_notations:type_name -> anduril.entitymanager.v1.EmitterNotation
	11, // 7: anduril.entitymanager.v1.Signal.pulse_width_s:type_name -> google.protobuf.DoubleValue
	9,  // 8: anduril.entitymanager.v1.Signal.pulse_repetition_interval:type_name -> anduril.entitymanager.v1.PulseRepetitionInterval
	10, // 9: anduril.entitymanager.v1.Signal.scan_characteristics:type_name -> anduril.entitymanager.v1.ScanCharacteristics
	11, // 10: anduril.entitymanager.v1.EmitterNotation.confidence:type_name -> google.protobuf.DoubleValue
	11, // 11: anduril.entitymanager.v1.Measurement.value:type_name -> google.protobuf.DoubleValue
	11, // 12: anduril.entitymanager.v1.Measurement.sigma:type_name -> google.protobuf.DoubleValue
	3,  // 13: anduril.entitymanager.v1.Frequency.frequency_hz:type_name -> anduril.entitymanager.v1.Measurement
	4,  // 14: anduril.entitymanager.v1.FrequencyRange.minimum_frequency_hz:type_name -> anduril.entitymanager.v1.Frequency
	4,  // 15: anduril.entitymanager.v1.FrequencyRange.maximum_frequency_hz:type_name -> anduril.entitymanager.v1.Frequency
	7,  // 16: anduril.entitymanager.v1.LineOfBearing.angle_of_arrival:type_name -> anduril.entitymanager.v1.AngleOfArrival
	3,  // 17: anduril.entitymanager.v1.LineOfBearing.range_estimate_m:type_name -> anduril.entitymanager.v1.Measurement
	3,  // 18: anduril.entitymanager.v1.LineOfBearing.max_range_m:type_name -> anduril.entitymanager.v1.Measurement
	12, // 19: anduril.entitymanager.v1.AngleOfArrival.relative_pose:type_name -> anduril.type.Pose
	13, // 20: anduril.entitymanager.v1.AngleOfArrival.bearing_elevation_covariance_rad2:type_name -> anduril.type.TMat2
	3,  // 21: anduril.entitymanager.v1.PulseRepetitionInterval.pulse_repetition_interval_s:type_name -> anduril.entitymanager.v1.Measurement
	0,  // 22: anduril.entitymanager.v1.ScanCharacteristics.scan_type:type_name -> anduril.entitymanager.v1.ScanType
	11, // 23: anduril.entitymanager.v1.ScanCharacteristics.scan_period_s:type_name -> google.protobuf.DoubleValue
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_anduril_entitymanager_v1_signal_pub_proto_init() }
func file_anduril_entitymanager_v1_signal_pub_proto_init() {
	if File_anduril_entitymanager_v1_signal_pub_proto != nil {
		return
	}
	file_anduril_entitymanager_v1_options_pub_proto_init()
	file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[0].OneofWrappers = []any{
		(*Signal_FrequencyCenter)(nil),
		(*Signal_FrequencyRange)(nil),
		(*Signal_LineOfBearing)(nil),
		(*Signal_Fixed)(nil),
	}
	file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[5].OneofWrappers = []any{
		(*LineOfBearing_RangeEstimateM)(nil),
		(*LineOfBearing_MaxRangeM)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_anduril_entitymanager_v1_signal_pub_proto_rawDesc), len(file_anduril_entitymanager_v1_signal_pub_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_anduril_entitymanager_v1_signal_pub_proto_goTypes,
		DependencyIndexes: file_anduril_entitymanager_v1_signal_pub_proto_depIdxs,
		EnumInfos:         file_anduril_entitymanager_v1_signal_pub_proto_enumTypes,
		MessageInfos:      file_anduril_entitymanager_v1_signal_pub_proto_msgTypes,
	}.Build()
	File_anduril_entitymanager_v1_signal_pub_proto = out.File
	file_anduril_entitymanager_v1_signal_pub_proto_goTypes = nil
	file_anduril_entitymanager_v1_signal_pub_proto_depIdxs = nil
}
