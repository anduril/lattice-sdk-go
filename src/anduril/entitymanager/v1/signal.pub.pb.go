// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: anduril/entitymanager/v1/signal.pub.proto

package entitymanagerv1

import (
	_type "github.com/anduril/anduril-go/src/anduril/type"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumerates the possible modulation types
type ModulationType int32

const (
	ModulationType_MODULATION_TYPE_INVALID                                              ModulationType = 0
	ModulationType_MODULATION_TYPE_AMPLITUDE                                            ModulationType = 1
	ModulationType_MODULATION_TYPE_FREQUENCY                                            ModulationType = 2
	ModulationType_MODULATION_TYPE_PHASE                                                ModulationType = 3
	ModulationType_MODULATION_TYPE_SPACED                                               ModulationType = 4
	ModulationType_MODULATION_TYPE_AMPLITUDE_SHIFT_KEYING                               ModulationType = 5
	ModulationType_MODULATION_TYPE_FREQUENCY_SHIFT_KEYING                               ModulationType = 6
	ModulationType_MODULATION_TYPE_PHASE_SHIFT_KEYING                                   ModulationType = 7
	ModulationType_MODULATION_TYPE_MINIMUM_SHIFT_KEYING                                 ModulationType = 8
	ModulationType_MODULATION_TYPE_MINIMUM_SHIFT_KEYING_GAUSSIAN                        ModulationType = 9
	ModulationType_MODULATION_TYPE_SINGLE_SIDE_BAND_UPPER                               ModulationType = 10
	ModulationType_MODULATION_TYPE_SINGLE_SIDE_BAND_LOWER                               ModulationType = 11
	ModulationType_MODULATION_TYPE_SINGLE_SIDE_BAND_FULL_CARRIER                        ModulationType = 12
	ModulationType_MODULATION_TYPE_SINGLE_SIDE_BAND_SUPPRESSED_CARRIER                  ModulationType = 13
	ModulationType_MODULATION_TYPE_SINGLE_SIDE_BAND_REDUCED_CARRIER                     ModulationType = 14
	ModulationType_MODULATION_TYPE_SINGLE_SIDE_BAND_WITHOUT_CARRIER                     ModulationType = 15
	ModulationType_MODULATION_TYPE_DUAL_SIDE_BAND_FULL_CARRIER                          ModulationType = 16
	ModulationType_MODULATION_TYPE_DUAL_SIDE_BAND_SUPPRESSED_CARRIER                    ModulationType = 17
	ModulationType_MODULATION_TYPE_DUAL_SIDE_BAND_REDUCED_CARRIER                       ModulationType = 18
	ModulationType_MODULATION_TYPE_DUAL_SIDE_BAND_WITHOUT_CARRIER                       ModulationType = 19
	ModulationType_MODULATION_TYPE_INDEPENDENT_SIDE_BAND                                ModulationType = 20
	ModulationType_MODULATION_TYPE_VESTIGIAL_SIDE_BAND                                  ModulationType = 21
	ModulationType_MODULATION_TYPE_ON_OFF_KEYING                                        ModulationType = 22
	ModulationType_MODULATION_TYPE_MULTI_FREQUENCY_SHIFT_KEYING                         ModulationType = 23
	ModulationType_MODULATION_TYPE_AUDIO_FREQUENCY_SHIFT_KEYING                         ModulationType = 24
	ModulationType_MODULATION_TYPE_CONTINUOUS_PHASE_FREQUENCY_SHIFT_KEYING              ModulationType = 25
	ModulationType_MODULATION_TYPE_C_PHASE_SHIFT_KEYING                                 ModulationType = 26
	ModulationType_MODULATION_TYPE_DIFFERENTIALLY_ENCODED_BINARY_PHASE_SHIFT_KEYING     ModulationType = 27
	ModulationType_MODULATION_TYPE_DIFFERENTIALLY_ENCODED_QUADRATURE_PHASE_SHIFT_KEYING ModulationType = 28
	ModulationType_MODULATION_TYPE_OFFSET_QUADRATURE_PHASE_SHIFT_KEYING                 ModulationType = 29
	ModulationType_MODULATION_TYPE_DIFFERENTIAL_PHASE_SHIFT_KEYING                      ModulationType = 30
	ModulationType_MODULATION_TYPE_PI_4_QUADRATURE_PHASE_SHIFT_KEYING                   ModulationType = 31
	ModulationType_MODULATION_TYPE_STACKED_OVERLAPPING_QUADRATURE_PHASE_SHIFT_KEYING    ModulationType = 32
	ModulationType_MODULATION_TYPE_F_QUADRATURE_PHASE_SHIFT_KEYING                      ModulationType = 33
	ModulationType_MODULATION_TYPE_QUADRATURE_AMPLITUDE_ANALOG                          ModulationType = 34
	ModulationType_MODULATION_TYPE_QUADRATURE_AMPLITUDE_DIGITAL                         ModulationType = 35
	ModulationType_MODULATION_TYPE_CONTINUOUS_PHASE                                     ModulationType = 36
	ModulationType_MODULATION_TYPE_PULSE_POSITION                                       ModulationType = 37
	ModulationType_MODULATION_TYPE_TRELLIS_CODE                                         ModulationType = 38
	ModulationType_MODULATION_TYPE_ORTHOGONAL_FREQUENCY_DIVISION_MULTIPLEXING           ModulationType = 39
	ModulationType_MODULATION_TYPE_FREQUENCY_HOPPING_SPREAD_SPECTRUM                    ModulationType = 40
	ModulationType_MODULATION_TYPE_DIGITAL_SEQUENCE_SPREAD_SPECTRUM                     ModulationType = 41
)

// Enum value maps for ModulationType.
var (
	ModulationType_name = map[int32]string{
		0:  "MODULATION_TYPE_INVALID",
		1:  "MODULATION_TYPE_AMPLITUDE",
		2:  "MODULATION_TYPE_FREQUENCY",
		3:  "MODULATION_TYPE_PHASE",
		4:  "MODULATION_TYPE_SPACED",
		5:  "MODULATION_TYPE_AMPLITUDE_SHIFT_KEYING",
		6:  "MODULATION_TYPE_FREQUENCY_SHIFT_KEYING",
		7:  "MODULATION_TYPE_PHASE_SHIFT_KEYING",
		8:  "MODULATION_TYPE_MINIMUM_SHIFT_KEYING",
		9:  "MODULATION_TYPE_MINIMUM_SHIFT_KEYING_GAUSSIAN",
		10: "MODULATION_TYPE_SINGLE_SIDE_BAND_UPPER",
		11: "MODULATION_TYPE_SINGLE_SIDE_BAND_LOWER",
		12: "MODULATION_TYPE_SINGLE_SIDE_BAND_FULL_CARRIER",
		13: "MODULATION_TYPE_SINGLE_SIDE_BAND_SUPPRESSED_CARRIER",
		14: "MODULATION_TYPE_SINGLE_SIDE_BAND_REDUCED_CARRIER",
		15: "MODULATION_TYPE_SINGLE_SIDE_BAND_WITHOUT_CARRIER",
		16: "MODULATION_TYPE_DUAL_SIDE_BAND_FULL_CARRIER",
		17: "MODULATION_TYPE_DUAL_SIDE_BAND_SUPPRESSED_CARRIER",
		18: "MODULATION_TYPE_DUAL_SIDE_BAND_REDUCED_CARRIER",
		19: "MODULATION_TYPE_DUAL_SIDE_BAND_WITHOUT_CARRIER",
		20: "MODULATION_TYPE_INDEPENDENT_SIDE_BAND",
		21: "MODULATION_TYPE_VESTIGIAL_SIDE_BAND",
		22: "MODULATION_TYPE_ON_OFF_KEYING",
		23: "MODULATION_TYPE_MULTI_FREQUENCY_SHIFT_KEYING",
		24: "MODULATION_TYPE_AUDIO_FREQUENCY_SHIFT_KEYING",
		25: "MODULATION_TYPE_CONTINUOUS_PHASE_FREQUENCY_SHIFT_KEYING",
		26: "MODULATION_TYPE_C_PHASE_SHIFT_KEYING",
		27: "MODULATION_TYPE_DIFFERENTIALLY_ENCODED_BINARY_PHASE_SHIFT_KEYING",
		28: "MODULATION_TYPE_DIFFERENTIALLY_ENCODED_QUADRATURE_PHASE_SHIFT_KEYING",
		29: "MODULATION_TYPE_OFFSET_QUADRATURE_PHASE_SHIFT_KEYING",
		30: "MODULATION_TYPE_DIFFERENTIAL_PHASE_SHIFT_KEYING",
		31: "MODULATION_TYPE_PI_4_QUADRATURE_PHASE_SHIFT_KEYING",
		32: "MODULATION_TYPE_STACKED_OVERLAPPING_QUADRATURE_PHASE_SHIFT_KEYING",
		33: "MODULATION_TYPE_F_QUADRATURE_PHASE_SHIFT_KEYING",
		34: "MODULATION_TYPE_QUADRATURE_AMPLITUDE_ANALOG",
		35: "MODULATION_TYPE_QUADRATURE_AMPLITUDE_DIGITAL",
		36: "MODULATION_TYPE_CONTINUOUS_PHASE",
		37: "MODULATION_TYPE_PULSE_POSITION",
		38: "MODULATION_TYPE_TRELLIS_CODE",
		39: "MODULATION_TYPE_ORTHOGONAL_FREQUENCY_DIVISION_MULTIPLEXING",
		40: "MODULATION_TYPE_FREQUENCY_HOPPING_SPREAD_SPECTRUM",
		41: "MODULATION_TYPE_DIGITAL_SEQUENCE_SPREAD_SPECTRUM",
	}
	ModulationType_value = map[string]int32{
		"MODULATION_TYPE_INVALID":                                              0,
		"MODULATION_TYPE_AMPLITUDE":                                            1,
		"MODULATION_TYPE_FREQUENCY":                                            2,
		"MODULATION_TYPE_PHASE":                                                3,
		"MODULATION_TYPE_SPACED":                                               4,
		"MODULATION_TYPE_AMPLITUDE_SHIFT_KEYING":                               5,
		"MODULATION_TYPE_FREQUENCY_SHIFT_KEYING":                               6,
		"MODULATION_TYPE_PHASE_SHIFT_KEYING":                                   7,
		"MODULATION_TYPE_MINIMUM_SHIFT_KEYING":                                 8,
		"MODULATION_TYPE_MINIMUM_SHIFT_KEYING_GAUSSIAN":                        9,
		"MODULATION_TYPE_SINGLE_SIDE_BAND_UPPER":                               10,
		"MODULATION_TYPE_SINGLE_SIDE_BAND_LOWER":                               11,
		"MODULATION_TYPE_SINGLE_SIDE_BAND_FULL_CARRIER":                        12,
		"MODULATION_TYPE_SINGLE_SIDE_BAND_SUPPRESSED_CARRIER":                  13,
		"MODULATION_TYPE_SINGLE_SIDE_BAND_REDUCED_CARRIER":                     14,
		"MODULATION_TYPE_SINGLE_SIDE_BAND_WITHOUT_CARRIER":                     15,
		"MODULATION_TYPE_DUAL_SIDE_BAND_FULL_CARRIER":                          16,
		"MODULATION_TYPE_DUAL_SIDE_BAND_SUPPRESSED_CARRIER":                    17,
		"MODULATION_TYPE_DUAL_SIDE_BAND_REDUCED_CARRIER":                       18,
		"MODULATION_TYPE_DUAL_SIDE_BAND_WITHOUT_CARRIER":                       19,
		"MODULATION_TYPE_INDEPENDENT_SIDE_BAND":                                20,
		"MODULATION_TYPE_VESTIGIAL_SIDE_BAND":                                  21,
		"MODULATION_TYPE_ON_OFF_KEYING":                                        22,
		"MODULATION_TYPE_MULTI_FREQUENCY_SHIFT_KEYING":                         23,
		"MODULATION_TYPE_AUDIO_FREQUENCY_SHIFT_KEYING":                         24,
		"MODULATION_TYPE_CONTINUOUS_PHASE_FREQUENCY_SHIFT_KEYING":              25,
		"MODULATION_TYPE_C_PHASE_SHIFT_KEYING":                                 26,
		"MODULATION_TYPE_DIFFERENTIALLY_ENCODED_BINARY_PHASE_SHIFT_KEYING":     27,
		"MODULATION_TYPE_DIFFERENTIALLY_ENCODED_QUADRATURE_PHASE_SHIFT_KEYING": 28,
		"MODULATION_TYPE_OFFSET_QUADRATURE_PHASE_SHIFT_KEYING":                 29,
		"MODULATION_TYPE_DIFFERENTIAL_PHASE_SHIFT_KEYING":                      30,
		"MODULATION_TYPE_PI_4_QUADRATURE_PHASE_SHIFT_KEYING":                   31,
		"MODULATION_TYPE_STACKED_OVERLAPPING_QUADRATURE_PHASE_SHIFT_KEYING":    32,
		"MODULATION_TYPE_F_QUADRATURE_PHASE_SHIFT_KEYING":                      33,
		"MODULATION_TYPE_QUADRATURE_AMPLITUDE_ANALOG":                          34,
		"MODULATION_TYPE_QUADRATURE_AMPLITUDE_DIGITAL":                         35,
		"MODULATION_TYPE_CONTINUOUS_PHASE":                                     36,
		"MODULATION_TYPE_PULSE_POSITION":                                       37,
		"MODULATION_TYPE_TRELLIS_CODE":                                         38,
		"MODULATION_TYPE_ORTHOGONAL_FREQUENCY_DIVISION_MULTIPLEXING":           39,
		"MODULATION_TYPE_FREQUENCY_HOPPING_SPREAD_SPECTRUM":                    40,
		"MODULATION_TYPE_DIGITAL_SEQUENCE_SPREAD_SPECTRUM":                     41,
	}
)

func (x ModulationType) Enum() *ModulationType {
	p := new(ModulationType)
	*p = x
	return p
}

func (x ModulationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModulationType) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_signal_pub_proto_enumTypes[0].Descriptor()
}

func (ModulationType) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_signal_pub_proto_enumTypes[0]
}

func (x ModulationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModulationType.Descriptor instead.
func (ModulationType) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{0}
}

// Enumerates the possible scan types
type ScanType int32

const (
	ScanType_SCAN_TYPE_INVALID                          ScanType = 0
	ScanType_SCAN_TYPE_CIRCULAR                         ScanType = 1
	ScanType_SCAN_TYPE_BIDIRECTIONAL_HORIZONTAL_SECTOR  ScanType = 2
	ScanType_SCAN_TYPE_BIDIRECTIONAL_VERTICAL_SECTOR    ScanType = 3
	ScanType_SCAN_TYPE_NON_SCANNING                     ScanType = 4
	ScanType_SCAN_TYPE_IRREGULAR                        ScanType = 5
	ScanType_SCAN_TYPE_CONICAL                          ScanType = 6
	ScanType_SCAN_TYPE_LOBE_SWITCHING                   ScanType = 7
	ScanType_SCAN_TYPE_RASTER                           ScanType = 8
	ScanType_SCAN_TYPE_CIRCULAR_VERTICAL_SECTOR         ScanType = 9
	ScanType_SCAN_TYPE_CIRCULAR_CONICAL                 ScanType = 10
	ScanType_SCAN_TYPE_SECTOR_CONICAL                   ScanType = 11
	ScanType_SCAN_TYPE_AGILE_BEAM                       ScanType = 12
	ScanType_SCAN_TYPE_UNIDIRECTIONAL_VERTICAL_SECTOR   ScanType = 13
	ScanType_SCAN_TYPE_UNIDIRECTIONAL_HORIZONTAL_SECTOR ScanType = 14
	ScanType_SCAN_TYPE_UNIDIRECTIONAL_SECTOR            ScanType = 15
	ScanType_SCAN_TYPE_BIDIRECTIONAL_SECTOR             ScanType = 16
)

// Enum value maps for ScanType.
var (
	ScanType_name = map[int32]string{
		0:  "SCAN_TYPE_INVALID",
		1:  "SCAN_TYPE_CIRCULAR",
		2:  "SCAN_TYPE_BIDIRECTIONAL_HORIZONTAL_SECTOR",
		3:  "SCAN_TYPE_BIDIRECTIONAL_VERTICAL_SECTOR",
		4:  "SCAN_TYPE_NON_SCANNING",
		5:  "SCAN_TYPE_IRREGULAR",
		6:  "SCAN_TYPE_CONICAL",
		7:  "SCAN_TYPE_LOBE_SWITCHING",
		8:  "SCAN_TYPE_RASTER",
		9:  "SCAN_TYPE_CIRCULAR_VERTICAL_SECTOR",
		10: "SCAN_TYPE_CIRCULAR_CONICAL",
		11: "SCAN_TYPE_SECTOR_CONICAL",
		12: "SCAN_TYPE_AGILE_BEAM",
		13: "SCAN_TYPE_UNIDIRECTIONAL_VERTICAL_SECTOR",
		14: "SCAN_TYPE_UNIDIRECTIONAL_HORIZONTAL_SECTOR",
		15: "SCAN_TYPE_UNIDIRECTIONAL_SECTOR",
		16: "SCAN_TYPE_BIDIRECTIONAL_SECTOR",
	}
	ScanType_value = map[string]int32{
		"SCAN_TYPE_INVALID":                          0,
		"SCAN_TYPE_CIRCULAR":                         1,
		"SCAN_TYPE_BIDIRECTIONAL_HORIZONTAL_SECTOR":  2,
		"SCAN_TYPE_BIDIRECTIONAL_VERTICAL_SECTOR":    3,
		"SCAN_TYPE_NON_SCANNING":                     4,
		"SCAN_TYPE_IRREGULAR":                        5,
		"SCAN_TYPE_CONICAL":                          6,
		"SCAN_TYPE_LOBE_SWITCHING":                   7,
		"SCAN_TYPE_RASTER":                           8,
		"SCAN_TYPE_CIRCULAR_VERTICAL_SECTOR":         9,
		"SCAN_TYPE_CIRCULAR_CONICAL":                 10,
		"SCAN_TYPE_SECTOR_CONICAL":                   11,
		"SCAN_TYPE_AGILE_BEAM":                       12,
		"SCAN_TYPE_UNIDIRECTIONAL_VERTICAL_SECTOR":   13,
		"SCAN_TYPE_UNIDIRECTIONAL_HORIZONTAL_SECTOR": 14,
		"SCAN_TYPE_UNIDIRECTIONAL_SECTOR":            15,
		"SCAN_TYPE_BIDIRECTIONAL_SECTOR":             16,
	}
)

func (x ScanType) Enum() *ScanType {
	p := new(ScanType)
	*p = x
	return p
}

func (x ScanType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScanType) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_signal_pub_proto_enumTypes[1].Descriptor()
}

func (ScanType) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_signal_pub_proto_enumTypes[1]
}

func (x ScanType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScanType.Descriptor instead.
func (ScanType) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{1}
}

// A component that describes an entity's signal characteristics.
type Signal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates either a frequency range or a center frequency of this signal.
	//
	// Types that are assignable to FrequencyMeasurement:
	//
	//	*Signal_FrequencyCenter
	//	*Signal_FrequencyRange
	FrequencyMeasurement isSignal_FrequencyMeasurement `protobuf_oneof:"frequency_measurement"`
	// Indicates the bandwidth of a signal (Hz).
	BandwidthHz *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=bandwidth_hz,json=bandwidthHz,proto3" json:"bandwidth_hz,omitempty"`
	// Indicates the signal to noise (SNR) of this signal.
	SignalToNoiseRatio *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=signal_to_noise_ratio,json=signalToNoiseRatio,proto3" json:"signal_to_noise_ratio,omitempty"`
	// Indicates the signal report.
	//
	// Types that are assignable to Report:
	//
	//	*Signal_LineOfBearing
	//	*Signal_Fixed
	Report isSignal_Report `protobuf_oneof:"report"`
	// Emitter notations associated with this entity.
	EmitterNotations []*EmitterNotation `protobuf:"bytes,7,rep,name=emitter_notations,json=emitterNotations,proto3" json:"emitter_notations,omitempty"`
	// length in time of a single pulse
	PulseWidthS *wrapperspb.DoubleValue `protobuf:"bytes,8,opt,name=pulse_width_s,json=pulseWidthS,proto3" json:"pulse_width_s,omitempty"`
	// length in time between the start of two pulses
	PulseRepetitionInterval *PulseRepetitionInterval `protobuf:"bytes,9,opt,name=pulse_repetition_interval,json=pulseRepetitionInterval,proto3" json:"pulse_repetition_interval,omitempty"`
	// characteristics of the carrier signal to transmit information
	Modulation *Modulation `protobuf:"bytes,10,opt,name=modulation,proto3" json:"modulation,omitempty"`
	// describes how a signal is observing the environment
	ScanCharacteristics *ScanCharacteristics `protobuf:"bytes,11,opt,name=scan_characteristics,json=scanCharacteristics,proto3" json:"scan_characteristics,omitempty"`
}

func (x *Signal) Reset() {
	*x = Signal{}
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal) ProtoMessage() {}

func (x *Signal) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal.ProtoReflect.Descriptor instead.
func (*Signal) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{0}
}

func (m *Signal) GetFrequencyMeasurement() isSignal_FrequencyMeasurement {
	if m != nil {
		return m.FrequencyMeasurement
	}
	return nil
}

func (x *Signal) GetFrequencyCenter() *Frequency {
	if x, ok := x.GetFrequencyMeasurement().(*Signal_FrequencyCenter); ok {
		return x.FrequencyCenter
	}
	return nil
}

func (x *Signal) GetFrequencyRange() *FrequencyRange {
	if x, ok := x.GetFrequencyMeasurement().(*Signal_FrequencyRange); ok {
		return x.FrequencyRange
	}
	return nil
}

func (x *Signal) GetBandwidthHz() *wrapperspb.DoubleValue {
	if x != nil {
		return x.BandwidthHz
	}
	return nil
}

func (x *Signal) GetSignalToNoiseRatio() *wrapperspb.DoubleValue {
	if x != nil {
		return x.SignalToNoiseRatio
	}
	return nil
}

func (m *Signal) GetReport() isSignal_Report {
	if m != nil {
		return m.Report
	}
	return nil
}

func (x *Signal) GetLineOfBearing() *LineOfBearing {
	if x, ok := x.GetReport().(*Signal_LineOfBearing); ok {
		return x.LineOfBearing
	}
	return nil
}

func (x *Signal) GetFixed() *Fixed {
	if x, ok := x.GetReport().(*Signal_Fixed); ok {
		return x.Fixed
	}
	return nil
}

func (x *Signal) GetEmitterNotations() []*EmitterNotation {
	if x != nil {
		return x.EmitterNotations
	}
	return nil
}

func (x *Signal) GetPulseWidthS() *wrapperspb.DoubleValue {
	if x != nil {
		return x.PulseWidthS
	}
	return nil
}

func (x *Signal) GetPulseRepetitionInterval() *PulseRepetitionInterval {
	if x != nil {
		return x.PulseRepetitionInterval
	}
	return nil
}

func (x *Signal) GetModulation() *Modulation {
	if x != nil {
		return x.Modulation
	}
	return nil
}

func (x *Signal) GetScanCharacteristics() *ScanCharacteristics {
	if x != nil {
		return x.ScanCharacteristics
	}
	return nil
}

type isSignal_FrequencyMeasurement interface {
	isSignal_FrequencyMeasurement()
}

type Signal_FrequencyCenter struct {
	FrequencyCenter *Frequency `protobuf:"bytes,1,opt,name=frequency_center,json=frequencyCenter,proto3,oneof"`
}

type Signal_FrequencyRange struct {
	FrequencyRange *FrequencyRange `protobuf:"bytes,2,opt,name=frequency_range,json=frequencyRange,proto3,oneof"`
}

func (*Signal_FrequencyCenter) isSignal_FrequencyMeasurement() {}

func (*Signal_FrequencyRange) isSignal_FrequencyMeasurement() {}

type isSignal_Report interface {
	isSignal_Report()
}

type Signal_LineOfBearing struct {
	LineOfBearing *LineOfBearing `protobuf:"bytes,5,opt,name=line_of_bearing,json=lineOfBearing,proto3,oneof"`
}

type Signal_Fixed struct {
	Fixed *Fixed `protobuf:"bytes,6,opt,name=fixed,proto3,oneof"`
}

func (*Signal_LineOfBearing) isSignal_Report() {}

func (*Signal_Fixed) isSignal_Report() {}

// A representation of a single emitter notation.
type EmitterNotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmitterNotation string `protobuf:"bytes,1,opt,name=emitter_notation,json=emitterNotation,proto3" json:"emitter_notation,omitempty"`
	// confidence as a percentage that the emitter notation in this component is accurate
	Confidence *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (x *EmitterNotation) Reset() {
	*x = EmitterNotation{}
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmitterNotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmitterNotation) ProtoMessage() {}

func (x *EmitterNotation) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmitterNotation.ProtoReflect.Descriptor instead.
func (*EmitterNotation) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{1}
}

func (x *EmitterNotation) GetEmitterNotation() string {
	if x != nil {
		return x.EmitterNotation
	}
	return ""
}

func (x *EmitterNotation) GetConfidence() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Confidence
	}
	return nil
}

// A component that describes some measured value with error.
type Measurement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value of the measurement.
	Value *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Estimated one standard deviation in same unit as the value.
	Sigma *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=sigma,proto3" json:"sigma,omitempty"`
}

func (x *Measurement) Reset() {
	*x = Measurement{}
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Measurement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Measurement) ProtoMessage() {}

func (x *Measurement) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Measurement.ProtoReflect.Descriptor instead.
func (*Measurement) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{2}
}

func (x *Measurement) GetValue() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Measurement) GetSigma() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Sigma
	}
	return nil
}

// A component for describing frequency.
type Frequency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates a frequency of a signal (Hz) with its standard deviation.
	FrequencyHz *Measurement `protobuf:"bytes,1,opt,name=frequency_hz,json=frequencyHz,proto3" json:"frequency_hz,omitempty"`
}

func (x *Frequency) Reset() {
	*x = Frequency{}
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Frequency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frequency) ProtoMessage() {}

func (x *Frequency) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frequency.ProtoReflect.Descriptor instead.
func (*Frequency) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{3}
}

func (x *Frequency) GetFrequencyHz() *Measurement {
	if x != nil {
		return x.FrequencyHz
	}
	return nil
}

// A component to represent a frequency range.
type FrequencyRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates the lowest measured frequency of a signal (Hz).
	MinimumFrequencyHz *Frequency `protobuf:"bytes,1,opt,name=minimum_frequency_hz,json=minimumFrequencyHz,proto3" json:"minimum_frequency_hz,omitempty"`
	// Indicates the maximum measured frequency of a signal (Hz).
	MaximumFrequencyHz *Frequency `protobuf:"bytes,2,opt,name=maximum_frequency_hz,json=maximumFrequencyHz,proto3" json:"maximum_frequency_hz,omitempty"`
}

func (x *FrequencyRange) Reset() {
	*x = FrequencyRange{}
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrequencyRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequencyRange) ProtoMessage() {}

func (x *FrequencyRange) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequencyRange.ProtoReflect.Descriptor instead.
func (*FrequencyRange) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{4}
}

func (x *FrequencyRange) GetMinimumFrequencyHz() *Frequency {
	if x != nil {
		return x.MinimumFrequencyHz
	}
	return nil
}

func (x *FrequencyRange) GetMaximumFrequencyHz() *Frequency {
	if x != nil {
		return x.MaximumFrequencyHz
	}
	return nil
}

// A line of bearing of a signal.
type LineOfBearing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `origin` and `range_bearing` have been deprecated in favor of `angle_of_arrival`
	// The location of the asset at the time of measurement.
	//
	// Deprecated: Marked as deprecated in anduril/entitymanager/v1/signal.pub.proto.
	Origin *Position `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	// Describes the horizontal angle with respect to true north.
	//
	// Deprecated: Marked as deprecated in anduril/entitymanager/v1/signal.pub.proto.
	RangeBearing *RangeBearing `protobuf:"bytes,2,opt,name=range_bearing,json=rangeBearing,proto3" json:"range_bearing,omitempty"`
	// The direction pointing from this entity to the detection
	AngleOfArrival *AngleOfArrival `protobuf:"bytes,3,opt,name=angle_of_arrival,json=angleOfArrival,proto3" json:"angle_of_arrival,omitempty"`
	// The range of the detection in the direction defined by the angle of arrival
	//
	// Types that are assignable to DetectionRange:
	//
	//	*LineOfBearing_RangeEstimateM
	//	*LineOfBearing_MaxRangeM
	DetectionRange isLineOfBearing_DetectionRange `protobuf_oneof:"detection_range"`
}

func (x *LineOfBearing) Reset() {
	*x = LineOfBearing{}
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LineOfBearing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineOfBearing) ProtoMessage() {}

func (x *LineOfBearing) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineOfBearing.ProtoReflect.Descriptor instead.
func (*LineOfBearing) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{5}
}

// Deprecated: Marked as deprecated in anduril/entitymanager/v1/signal.pub.proto.
func (x *LineOfBearing) GetOrigin() *Position {
	if x != nil {
		return x.Origin
	}
	return nil
}

// Deprecated: Marked as deprecated in anduril/entitymanager/v1/signal.pub.proto.
func (x *LineOfBearing) GetRangeBearing() *RangeBearing {
	if x != nil {
		return x.RangeBearing
	}
	return nil
}

func (x *LineOfBearing) GetAngleOfArrival() *AngleOfArrival {
	if x != nil {
		return x.AngleOfArrival
	}
	return nil
}

func (m *LineOfBearing) GetDetectionRange() isLineOfBearing_DetectionRange {
	if m != nil {
		return m.DetectionRange
	}
	return nil
}

func (x *LineOfBearing) GetRangeEstimateM() *Measurement {
	if x, ok := x.GetDetectionRange().(*LineOfBearing_RangeEstimateM); ok {
		return x.RangeEstimateM
	}
	return nil
}

func (x *LineOfBearing) GetMaxRangeM() *Measurement {
	if x, ok := x.GetDetectionRange().(*LineOfBearing_MaxRangeM); ok {
		return x.MaxRangeM
	}
	return nil
}

type isLineOfBearing_DetectionRange interface {
	isLineOfBearing_DetectionRange()
}

type LineOfBearing_RangeEstimateM struct {
	// The estimated distance of the detection
	RangeEstimateM *Measurement `protobuf:"bytes,4,opt,name=range_estimate_m,json=rangeEstimateM,proto3,oneof"`
}

type LineOfBearing_MaxRangeM struct {
	// The maximum distance of the detection
	MaxRangeM *Measurement `protobuf:"bytes,5,opt,name=max_range_m,json=maxRangeM,proto3,oneof"`
}

func (*LineOfBearing_RangeEstimateM) isLineOfBearing_DetectionRange() {}

func (*LineOfBearing_MaxRangeM) isLineOfBearing_DetectionRange() {}

// The direction from which the signal is received
type AngleOfArrival struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Origin (LLA) and attitude (relative to ENU) of a ray pointing towards the detection. The attitude represents a
	// forward-left-up (FLU) frame where the x-axis (1, 0, 0) is pointing towards the target.
	RelativePose *_type.Pose `protobuf:"bytes,1,opt,name=relative_pose,json=relativePose,proto3" json:"relative_pose,omitempty"`
	// Bearing/elevation covariance matrix where bearing is defined in radians CCW+ about the z-axis from the x-axis of FLU frame
	// and elevation is positive down from the FL/XY plane.
	// mxx = bearing variance in rad^2
	// mxy = bearing/elevation covariance in rad^2
	// myy = elevation variance in rad^2
	BearingElevationCovarianceRad2 *_type.TMat2 `protobuf:"bytes,2,opt,name=bearing_elevation_covariance_rad2,json=bearingElevationCovarianceRad2,proto3" json:"bearing_elevation_covariance_rad2,omitempty"`
}

func (x *AngleOfArrival) Reset() {
	*x = AngleOfArrival{}
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AngleOfArrival) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AngleOfArrival) ProtoMessage() {}

func (x *AngleOfArrival) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AngleOfArrival.ProtoReflect.Descriptor instead.
func (*AngleOfArrival) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{6}
}

func (x *AngleOfArrival) GetRelativePose() *_type.Pose {
	if x != nil {
		return x.RelativePose
	}
	return nil
}

func (x *AngleOfArrival) GetBearingElevationCovarianceRad2() *_type.TMat2 {
	if x != nil {
		return x.BearingElevationCovarianceRad2
	}
	return nil
}

// A fix of a signal. No extra fields but it is expected that location should be populated when using this report.
type Fixed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Fixed) Reset() {
	*x = Fixed{}
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fixed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fixed) ProtoMessage() {}

func (x *Fixed) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fixed.ProtoReflect.Descriptor instead.
func (*Fixed) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{7}
}

// Describes range and vertical and horizontal angular measurements of an entity with respect to a target.
type RangeBearing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The range to a target along the measured angle in meters with its one sigma error value.
	RangeM *Measurement `protobuf:"bytes,1,opt,name=range_m,json=rangeM,proto3" json:"range_m,omitempty"`
	// Horizontal angle - degrees rotated clockwise from origin_heading: 0-360.
	// Sigma is the standard deviation of the horizontal angular measurement in decimal degrees: 0-180 degrees.
	RangeAngleD *Measurement `protobuf:"bytes,2,opt,name=range_angle_d,json=rangeAngleD,proto3" json:"range_angle_d,omitempty"`
}

func (x *RangeBearing) Reset() {
	*x = RangeBearing{}
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RangeBearing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeBearing) ProtoMessage() {}

func (x *RangeBearing) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeBearing.ProtoReflect.Descriptor instead.
func (*RangeBearing) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{8}
}

func (x *RangeBearing) GetRangeM() *Measurement {
	if x != nil {
		return x.RangeM
	}
	return nil
}

func (x *RangeBearing) GetRangeAngleD() *Measurement {
	if x != nil {
		return x.RangeAngleD
	}
	return nil
}

// A component that describe the length in time between two pulses
type PulseRepetitionInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PulseRepetitionIntervalS *Measurement `protobuf:"bytes,1,opt,name=pulse_repetition_interval_s,json=pulseRepetitionIntervalS,proto3" json:"pulse_repetition_interval_s,omitempty"`
}

func (x *PulseRepetitionInterval) Reset() {
	*x = PulseRepetitionInterval{}
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PulseRepetitionInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulseRepetitionInterval) ProtoMessage() {}

func (x *PulseRepetitionInterval) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulseRepetitionInterval.ProtoReflect.Descriptor instead.
func (*PulseRepetitionInterval) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{9}
}

func (x *PulseRepetitionInterval) GetPulseRepetitionIntervalS() *Measurement {
	if x != nil {
		return x.PulseRepetitionIntervalS
	}
	return nil
}

// A component that describe how information is encoded in a transmitted signal through a carrier signal
type Modulation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Modifications to the carrier signal
	ModulationType ModulationType `protobuf:"varint,1,opt,name=modulation_type,json=modulationType,proto3,enum=anduril.entitymanager.v1.ModulationType" json:"modulation_type,omitempty"`
	// describes the number of "symbols" that could be communicated with the modulation type
	// if modulation type is ASK and symbol is 4, signal could have 1 of 4 different amplitudes.
	Symbols *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=symbols,proto3" json:"symbols,omitempty"`
	// Variations in the time intervals between pulses and the spacing and number of pulses in a series
	InterpulseModulation string `protobuf:"bytes,3,opt,name=interpulse_modulation,json=interpulseModulation,proto3" json:"interpulse_modulation,omitempty"`
	// describes how information is formatted within the signal during transmission
	Encoding *Encoding `protobuf:"bytes,4,opt,name=encoding,proto3" json:"encoding,omitempty"`
}

func (x *Modulation) Reset() {
	*x = Modulation{}
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Modulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Modulation) ProtoMessage() {}

func (x *Modulation) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Modulation.ProtoReflect.Descriptor instead.
func (*Modulation) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{10}
}

func (x *Modulation) GetModulationType() ModulationType {
	if x != nil {
		return x.ModulationType
	}
	return ModulationType_MODULATION_TYPE_INVALID
}

func (x *Modulation) GetSymbols() *wrapperspb.Int32Value {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *Modulation) GetInterpulseModulation() string {
	if x != nil {
		return x.InterpulseModulation
	}
	return ""
}

func (x *Modulation) GetEncoding() *Encoding {
	if x != nil {
		return x.Encoding
	}
	return nil
}

// A component that describes the formatting of the information in a signal
type Encoding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// rate at which the spreading code is changing
	// a chip is a pulse of a spread spectrum code. Each data bit is spread across multiple chips (smaller time slots) using a spreading code
	ChipHopRateNumSec *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=chip_hop_rate_num_sec,json=chipHopRateNumSec,proto3" json:"chip_hop_rate_num_sec,omitempty"`
	// time a transmitter remains at a particular frequency before hopping to the next on
	HopDwellTimeSec *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=hop_dwell_time_sec,json=hopDwellTimeSec,proto3" json:"hop_dwell_time_sec,omitempty"`
	// symbols per sec. A symbol is distinct from a bit where one symbol could be composed of multiple bits
	BaudRateNumSec *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=baud_rate_num_sec,json=baudRateNumSec,proto3" json:"baud_rate_num_sec,omitempty"`
}

func (x *Encoding) Reset() {
	*x = Encoding{}
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Encoding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encoding) ProtoMessage() {}

func (x *Encoding) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encoding.ProtoReflect.Descriptor instead.
func (*Encoding) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{11}
}

func (x *Encoding) GetChipHopRateNumSec() *wrapperspb.DoubleValue {
	if x != nil {
		return x.ChipHopRateNumSec
	}
	return nil
}

func (x *Encoding) GetHopDwellTimeSec() *wrapperspb.DoubleValue {
	if x != nil {
		return x.HopDwellTimeSec
	}
	return nil
}

func (x *Encoding) GetBaudRateNumSec() *wrapperspb.DoubleValue {
	if x != nil {
		return x.BaudRateNumSec
	}
	return nil
}

// A component that describes the scanning characteristics of a signal
type ScanCharacteristics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanType    ScanType                `protobuf:"varint,1,opt,name=scan_type,json=scanType,proto3,enum=anduril.entitymanager.v1.ScanType" json:"scan_type,omitempty"`
	ScanPeriodS *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=scan_period_s,json=scanPeriodS,proto3" json:"scan_period_s,omitempty"`
}

func (x *ScanCharacteristics) Reset() {
	*x = ScanCharacteristics{}
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScanCharacteristics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanCharacteristics) ProtoMessage() {}

func (x *ScanCharacteristics) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanCharacteristics.ProtoReflect.Descriptor instead.
func (*ScanCharacteristics) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP(), []int{12}
}

func (x *ScanCharacteristics) GetScanType() ScanType {
	if x != nil {
		return x.ScanType
	}
	return ScanType_SCAN_TYPE_INVALID
}

func (x *ScanCharacteristics) GetScanPeriodS() *wrapperspb.DoubleValue {
	if x != nil {
		return x.ScanPeriodS
	}
	return nil
}

var File_anduril_entitymanager_v1_signal_pub_proto protoreflect.FileDescriptor

var file_anduril_entitymanager_v1_signal_pub_proto_rawDesc = []byte{
	0x0a, 0x29, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x2b, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x2f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa1, 0x07, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x50, 0x0a, 0x10,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x53,
	0x0a, 0x0f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x5f, 0x68, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x48, 0x7a, 0x12, 0x4f, 0x0a, 0x15, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x74,
	0x6f, 0x5f, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x6f, 0x4e, 0x6f, 0x69, 0x73, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x51, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x66,
	0x5f, 0x62, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x4f, 0x66,
	0x42, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x01, 0x52, 0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x4f,
	0x66, 0x42, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x48, 0x01, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x12, 0x56, 0x0a, 0x11, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x75, 0x6c,
	0x73, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x70, 0x75, 0x6c, 0x73, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x53, 0x12, 0x6d, 0x0a, 0x19, 0x70,
	0x75, 0x6c, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x52,
	0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x17, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x52, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x0a, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x60, 0x0a, 0x14, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x13, 0x73,
	0x63, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x7a, 0x0a, 0x0f, 0x45, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x75, 0x0a, 0x0b, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x22, 0x55, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x48, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x68, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x7a, 0x22,
	0xbe, 0x01, 0x0a, 0x0e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x68, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x7a, 0x12, 0x55, 0x0a, 0x14, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x68,
	0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x12, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x7a,
	0x22, 0xa3, 0x03, 0x0a, 0x0d, 0x4c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x42, 0x65, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x4f, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x65, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x65, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x65, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x10, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x5f,
	0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x66,
	0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x52, 0x0e, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x66,
	0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x12, 0x51, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x12, 0x47, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x42, 0x11, 0x0a, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x0e, 0x41, 0x6e, 0x67, 0x6c, 0x65,
	0x4f, 0x66, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x0d, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x50, 0x6f, 0x73, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f,
	0x73, 0x65, 0x12, 0x5e, 0x0a, 0x21, 0x62, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6c,
	0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x72, 0x61, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x4d, 0x61,
	0x74, 0x32, 0x52, 0x1e, 0x62, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x65, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x61,
	0x64, 0x32, 0x22, 0x07, 0x0a, 0x05, 0x46, 0x69, 0x78, 0x65, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x0c,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x07,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x12, 0x49, 0x0a, 0x0d,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x22, 0x7f, 0x0a, 0x17, 0x50, 0x75, 0x6c, 0x73, 0x65,
	0x52, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x64, 0x0a, 0x1b, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x18,
	0x70, 0x75, 0x6c, 0x73, 0x65, 0x52, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x22, 0x8b, 0x02, 0x0a, 0x0a, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x12, 0x33, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xee, 0x01, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x15, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x68, 0x6f, 0x70, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x63, 0x68, 0x69, 0x70, 0x48, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d,
	0x53, 0x65, 0x63, 0x12, 0x49, 0x0a, 0x12, 0x68, 0x6f, 0x70, 0x5f, 0x64, 0x77, 0x65, 0x6c, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x68,
	0x6f, 0x70, 0x44, 0x77, 0x65, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x47,
	0x0a, 0x11, 0x62, 0x61, 0x75, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x62, 0x61, 0x75, 0x64, 0x52, 0x61, 0x74,
	0x65, 0x4e, 0x75, 0x6d, 0x53, 0x65, 0x63, 0x22, 0x98, 0x01, 0x0a, 0x13, 0x53, 0x63, 0x61, 0x6e,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x3f, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x40, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x53, 0x2a, 0xf0, 0x0f, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x54, 0x55, 0x44, 0x45, 0x10,
	0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x50, 0x41, 0x43, 0x45, 0x44, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4d, 0x50, 0x4c, 0x49,
	0x54, 0x55, 0x44, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x49, 0x4e,
	0x47, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12,
	0x26, 0x0a, 0x22, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x4b,
	0x45, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d,
	0x55, 0x4d, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x49, 0x4e, 0x47, 0x10,
	0x08, 0x12, 0x31, 0x0a, 0x2d, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x53, 0x48, 0x49,
	0x46, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x49, 0x4e, 0x47, 0x5f, 0x47, 0x41, 0x55, 0x53, 0x53, 0x49,
	0x41, 0x4e, 0x10, 0x09, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x53,
	0x49, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x10, 0x0a,
	0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f,
	0x42, 0x41, 0x4e, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x31, 0x0a, 0x2d,
	0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x44,
	0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x49, 0x45, 0x52, 0x10, 0x0c, 0x12,
	0x37, 0x0a, 0x33, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x42,
	0x41, 0x4e, 0x44, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x43,
	0x41, 0x52, 0x52, 0x49, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x34, 0x0a, 0x30, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47,
	0x4c, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x44,
	0x55, 0x43, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x49, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x34,
	0x0a, 0x30, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x42, 0x41,
	0x4e, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x49,
	0x45, 0x52, 0x10, 0x0f, 0x12, 0x2f, 0x0a, 0x2b, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x53, 0x49, 0x44,
	0x45, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x52, 0x52,
	0x49, 0x45, 0x52, 0x10, 0x10, 0x12, 0x35, 0x0a, 0x31, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x53, 0x49,
	0x44, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x52, 0x45, 0x53, 0x53,
	0x45, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x49, 0x45, 0x52, 0x10, 0x11, 0x12, 0x32, 0x0a, 0x2e,
	0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x55, 0x41, 0x4c, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x52,
	0x45, 0x44, 0x55, 0x43, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x49, 0x45, 0x52, 0x10, 0x12,
	0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x42, 0x41,
	0x4e, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x49,
	0x45, 0x52, 0x10, 0x13, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x10, 0x14, 0x12,
	0x27, 0x0a, 0x23, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x56, 0x45, 0x53, 0x54, 0x49, 0x47, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x49, 0x44,
	0x45, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x10, 0x15, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x4f,
	0x46, 0x46, 0x5f, 0x4b, 0x45, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x16, 0x12, 0x30, 0x0a, 0x2c, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x53,
	0x48, 0x49, 0x46, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x17, 0x12, 0x30, 0x0a,
	0x2c, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x18, 0x12,
	0x3b, 0x0a, 0x37, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53, 0x5f, 0x50, 0x48,
	0x41, 0x53, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x53, 0x48,
	0x49, 0x46, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x19, 0x12, 0x28, 0x0a, 0x24,
	0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x4b, 0x45,
	0x59, 0x49, 0x4e, 0x47, 0x10, 0x1a, 0x12, 0x44, 0x0a, 0x40, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52,
	0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x44,
	0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x48,
	0x49, 0x46, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x1b, 0x12, 0x48, 0x0a, 0x44,
	0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x45,
	0x4e, 0x43, 0x4f, 0x44, 0x45, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x44, 0x52, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x4b, 0x45,
	0x59, 0x49, 0x4e, 0x47, 0x10, 0x1c, 0x12, 0x38, 0x0a, 0x34, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54,
	0x5f, 0x51, 0x55, 0x41, 0x44, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53,
	0x45, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x1d,
	0x12, 0x33, 0x0a, 0x2f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c,
	0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x4b, 0x45, 0x59,
	0x49, 0x4e, 0x47, 0x10, 0x1e, 0x12, 0x36, 0x0a, 0x32, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x49, 0x5f, 0x34, 0x5f, 0x51, 0x55,
	0x41, 0x44, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53,
	0x48, 0x49, 0x46, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x1f, 0x12, 0x45, 0x0a,
	0x41, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x50,
	0x50, 0x49, 0x4e, 0x47, 0x5f, 0x51, 0x55, 0x41, 0x44, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x49,
	0x4e, 0x47, 0x10, 0x20, 0x12, 0x33, 0x0a, 0x2f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x5f, 0x51, 0x55, 0x41, 0x44, 0x52, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x46, 0x54,
	0x5f, 0x4b, 0x45, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x21, 0x12, 0x2f, 0x0a, 0x2b, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x41,
	0x44, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x54, 0x55, 0x44,
	0x45, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x4f, 0x47, 0x10, 0x22, 0x12, 0x30, 0x0a, 0x2c, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55,
	0x41, 0x44, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x54, 0x55,
	0x44, 0x45, 0x5f, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x10, 0x23, 0x12, 0x24, 0x0a, 0x20,
	0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45,
	0x10, 0x24, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x4c, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x25, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x45, 0x4c, 0x4c, 0x49,
	0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x26, 0x12, 0x3e, 0x0a, 0x3a, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x54, 0x48,
	0x4f, 0x47, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50,
	0x4c, 0x45, 0x58, 0x49, 0x4e, 0x47, 0x10, 0x27, 0x12, 0x35, 0x0a, 0x31, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x48, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x50,
	0x52, 0x45, 0x41, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x54, 0x52, 0x55, 0x4d, 0x10, 0x28, 0x12,
	0x34, 0x0a, 0x30, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x53, 0x50, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x54,
	0x52, 0x55, 0x4d, 0x10, 0x29, 0x2a, 0xbc, 0x04, 0x0a, 0x08, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x43, 0x41,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x4c, 0x41, 0x52, 0x10,
	0x01, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x49, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x48, 0x4f, 0x52,
	0x49, 0x5a, 0x4f, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x02,
	0x12, 0x2b, 0x0a, 0x27, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x54,
	0x49, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x1a, 0x0a,
	0x16, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x53,
	0x43, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x41,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x52, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52,
	0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x43, 0x41,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x42, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x43, 0x41, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x08, 0x12, 0x26, 0x0a,
	0x22, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55,
	0x4c, 0x41, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x43,
	0x54, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x49,
	0x43, 0x41, 0x4c, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x47, 0x49, 0x4c, 0x45, 0x5f, 0x42, 0x45, 0x41, 0x4d, 0x10, 0x0c, 0x12, 0x2c, 0x0a,
	0x28, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x0d, 0x12, 0x2e, 0x0a, 0x2a, 0x53,
	0x43, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x54,
	0x41, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x0e, 0x12, 0x23, 0x0a, 0x1f, 0x53,
	0x43, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x0f,
	0x12, 0x22, 0x0a, 0x1e, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x54,
	0x4f, 0x52, 0x10, 0x10, 0x42, 0xfc, 0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x50, 0x75, 0x62,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x3b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x45, 0x58, 0xaa, 0x02, 0x18, 0x41, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x18, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x5c, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x24, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x5c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x3a, 0x3a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_anduril_entitymanager_v1_signal_pub_proto_rawDescOnce sync.Once
	file_anduril_entitymanager_v1_signal_pub_proto_rawDescData = file_anduril_entitymanager_v1_signal_pub_proto_rawDesc
)

func file_anduril_entitymanager_v1_signal_pub_proto_rawDescGZIP() []byte {
	file_anduril_entitymanager_v1_signal_pub_proto_rawDescOnce.Do(func() {
		file_anduril_entitymanager_v1_signal_pub_proto_rawDescData = protoimpl.X.CompressGZIP(file_anduril_entitymanager_v1_signal_pub_proto_rawDescData)
	})
	return file_anduril_entitymanager_v1_signal_pub_proto_rawDescData
}

var file_anduril_entitymanager_v1_signal_pub_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_anduril_entitymanager_v1_signal_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_anduril_entitymanager_v1_signal_pub_proto_goTypes = []any{
	(ModulationType)(0),             // 0: anduril.entitymanager.v1.ModulationType
	(ScanType)(0),                   // 1: anduril.entitymanager.v1.ScanType
	(*Signal)(nil),                  // 2: anduril.entitymanager.v1.Signal
	(*EmitterNotation)(nil),         // 3: anduril.entitymanager.v1.EmitterNotation
	(*Measurement)(nil),             // 4: anduril.entitymanager.v1.Measurement
	(*Frequency)(nil),               // 5: anduril.entitymanager.v1.Frequency
	(*FrequencyRange)(nil),          // 6: anduril.entitymanager.v1.FrequencyRange
	(*LineOfBearing)(nil),           // 7: anduril.entitymanager.v1.LineOfBearing
	(*AngleOfArrival)(nil),          // 8: anduril.entitymanager.v1.AngleOfArrival
	(*Fixed)(nil),                   // 9: anduril.entitymanager.v1.Fixed
	(*RangeBearing)(nil),            // 10: anduril.entitymanager.v1.RangeBearing
	(*PulseRepetitionInterval)(nil), // 11: anduril.entitymanager.v1.PulseRepetitionInterval
	(*Modulation)(nil),              // 12: anduril.entitymanager.v1.Modulation
	(*Encoding)(nil),                // 13: anduril.entitymanager.v1.Encoding
	(*ScanCharacteristics)(nil),     // 14: anduril.entitymanager.v1.ScanCharacteristics
	(*wrapperspb.DoubleValue)(nil),  // 15: google.protobuf.DoubleValue
	(*Position)(nil),                // 16: anduril.entitymanager.v1.Position
	(*_type.Pose)(nil),              // 17: anduril.type.Pose
	(*_type.TMat2)(nil),             // 18: anduril.type.TMat2
	(*wrapperspb.Int32Value)(nil),   // 19: google.protobuf.Int32Value
}
var file_anduril_entitymanager_v1_signal_pub_proto_depIdxs = []int32{
	5,  // 0: anduril.entitymanager.v1.Signal.frequency_center:type_name -> anduril.entitymanager.v1.Frequency
	6,  // 1: anduril.entitymanager.v1.Signal.frequency_range:type_name -> anduril.entitymanager.v1.FrequencyRange
	15, // 2: anduril.entitymanager.v1.Signal.bandwidth_hz:type_name -> google.protobuf.DoubleValue
	15, // 3: anduril.entitymanager.v1.Signal.signal_to_noise_ratio:type_name -> google.protobuf.DoubleValue
	7,  // 4: anduril.entitymanager.v1.Signal.line_of_bearing:type_name -> anduril.entitymanager.v1.LineOfBearing
	9,  // 5: anduril.entitymanager.v1.Signal.fixed:type_name -> anduril.entitymanager.v1.Fixed
	3,  // 6: anduril.entitymanager.v1.Signal.emitter_notations:type_name -> anduril.entitymanager.v1.EmitterNotation
	15, // 7: anduril.entitymanager.v1.Signal.pulse_width_s:type_name -> google.protobuf.DoubleValue
	11, // 8: anduril.entitymanager.v1.Signal.pulse_repetition_interval:type_name -> anduril.entitymanager.v1.PulseRepetitionInterval
	12, // 9: anduril.entitymanager.v1.Signal.modulation:type_name -> anduril.entitymanager.v1.Modulation
	14, // 10: anduril.entitymanager.v1.Signal.scan_characteristics:type_name -> anduril.entitymanager.v1.ScanCharacteristics
	15, // 11: anduril.entitymanager.v1.EmitterNotation.confidence:type_name -> google.protobuf.DoubleValue
	15, // 12: anduril.entitymanager.v1.Measurement.value:type_name -> google.protobuf.DoubleValue
	15, // 13: anduril.entitymanager.v1.Measurement.sigma:type_name -> google.protobuf.DoubleValue
	4,  // 14: anduril.entitymanager.v1.Frequency.frequency_hz:type_name -> anduril.entitymanager.v1.Measurement
	5,  // 15: anduril.entitymanager.v1.FrequencyRange.minimum_frequency_hz:type_name -> anduril.entitymanager.v1.Frequency
	5,  // 16: anduril.entitymanager.v1.FrequencyRange.maximum_frequency_hz:type_name -> anduril.entitymanager.v1.Frequency
	16, // 17: anduril.entitymanager.v1.LineOfBearing.origin:type_name -> anduril.entitymanager.v1.Position
	10, // 18: anduril.entitymanager.v1.LineOfBearing.range_bearing:type_name -> anduril.entitymanager.v1.RangeBearing
	8,  // 19: anduril.entitymanager.v1.LineOfBearing.angle_of_arrival:type_name -> anduril.entitymanager.v1.AngleOfArrival
	4,  // 20: anduril.entitymanager.v1.LineOfBearing.range_estimate_m:type_name -> anduril.entitymanager.v1.Measurement
	4,  // 21: anduril.entitymanager.v1.LineOfBearing.max_range_m:type_name -> anduril.entitymanager.v1.Measurement
	17, // 22: anduril.entitymanager.v1.AngleOfArrival.relative_pose:type_name -> anduril.type.Pose
	18, // 23: anduril.entitymanager.v1.AngleOfArrival.bearing_elevation_covariance_rad2:type_name -> anduril.type.TMat2
	4,  // 24: anduril.entitymanager.v1.RangeBearing.range_m:type_name -> anduril.entitymanager.v1.Measurement
	4,  // 25: anduril.entitymanager.v1.RangeBearing.range_angle_d:type_name -> anduril.entitymanager.v1.Measurement
	4,  // 26: anduril.entitymanager.v1.PulseRepetitionInterval.pulse_repetition_interval_s:type_name -> anduril.entitymanager.v1.Measurement
	0,  // 27: anduril.entitymanager.v1.Modulation.modulation_type:type_name -> anduril.entitymanager.v1.ModulationType
	19, // 28: anduril.entitymanager.v1.Modulation.symbols:type_name -> google.protobuf.Int32Value
	13, // 29: anduril.entitymanager.v1.Modulation.encoding:type_name -> anduril.entitymanager.v1.Encoding
	15, // 30: anduril.entitymanager.v1.Encoding.chip_hop_rate_num_sec:type_name -> google.protobuf.DoubleValue
	15, // 31: anduril.entitymanager.v1.Encoding.hop_dwell_time_sec:type_name -> google.protobuf.DoubleValue
	15, // 32: anduril.entitymanager.v1.Encoding.baud_rate_num_sec:type_name -> google.protobuf.DoubleValue
	1,  // 33: anduril.entitymanager.v1.ScanCharacteristics.scan_type:type_name -> anduril.entitymanager.v1.ScanType
	15, // 34: anduril.entitymanager.v1.ScanCharacteristics.scan_period_s:type_name -> google.protobuf.DoubleValue
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_anduril_entitymanager_v1_signal_pub_proto_init() }
func file_anduril_entitymanager_v1_signal_pub_proto_init() {
	if File_anduril_entitymanager_v1_signal_pub_proto != nil {
		return
	}
	file_anduril_entitymanager_v1_location_pub_proto_init()
	file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[0].OneofWrappers = []any{
		(*Signal_FrequencyCenter)(nil),
		(*Signal_FrequencyRange)(nil),
		(*Signal_LineOfBearing)(nil),
		(*Signal_Fixed)(nil),
	}
	file_anduril_entitymanager_v1_signal_pub_proto_msgTypes[5].OneofWrappers = []any{
		(*LineOfBearing_RangeEstimateM)(nil),
		(*LineOfBearing_MaxRangeM)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_anduril_entitymanager_v1_signal_pub_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_anduril_entitymanager_v1_signal_pub_proto_goTypes,
		DependencyIndexes: file_anduril_entitymanager_v1_signal_pub_proto_depIdxs,
		EnumInfos:         file_anduril_entitymanager_v1_signal_pub_proto_enumTypes,
		MessageInfos:      file_anduril_entitymanager_v1_signal_pub_proto_msgTypes,
	}.Build()
	File_anduril_entitymanager_v1_signal_pub_proto = out.File
	file_anduril_entitymanager_v1_signal_pub_proto_rawDesc = nil
	file_anduril_entitymanager_v1_signal_pub_proto_goTypes = nil
	file_anduril_entitymanager_v1_signal_pub_proto_depIdxs = nil
}
