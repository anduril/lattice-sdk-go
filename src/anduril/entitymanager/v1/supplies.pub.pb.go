// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: anduril/entitymanager/v1/supplies.pub.proto

package entitymanagerv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the state of supplies associated with an entity (available but not in condition to use immediately)
type Supplies struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fuel          []*Fuel                `protobuf:"bytes,2,rep,name=fuel,proto3" json:"fuel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Supplies) Reset() {
	*x = Supplies{}
	mi := &file_anduril_entitymanager_v1_supplies_pub_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Supplies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Supplies) ProtoMessage() {}

func (x *Supplies) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_supplies_pub_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Supplies.ProtoReflect.Descriptor instead.
func (*Supplies) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_supplies_pub_proto_rawDescGZIP(), []int{0}
}

func (x *Supplies) GetFuel() []*Fuel {
	if x != nil {
		return x.Fuel
	}
	return nil
}

// Fuel describes an entity's repository of fuels stores including current amount, operational requirements, and maximum authorized capacity
type Fuel struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// unique fuel identifier
	FuelId string `protobuf:"bytes,1,opt,name=fuel_id,json=fuelId,proto3" json:"fuel_id,omitempty"`
	// long form name of the fuel source.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// timestamp the information was reported
	ReportedDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=reported_date,json=reportedDate,proto3" json:"reported_date,omitempty"`
	// amount of gallons on hand
	AmountGallons uint32 `protobuf:"varint,4,opt,name=amount_gallons,json=amountGallons,proto3" json:"amount_gallons,omitempty"`
	// how much the asset is allowed to have available (in gallons)
	MaxAuthorizedCapacityGallons uint32 `protobuf:"varint,5,opt,name=max_authorized_capacity_gallons,json=maxAuthorizedCapacityGallons,proto3" json:"max_authorized_capacity_gallons,omitempty"`
	// minimum required for operations (in gallons)
	OperationalRequirementGallons uint32 `protobuf:"varint,6,opt,name=operational_requirement_gallons,json=operationalRequirementGallons,proto3" json:"operational_requirement_gallons,omitempty"`
	// fuel in a single asset may have different levels of classification
	// use case: fuel for a SECRET asset while diesel fuel may be UNCLASSIFIED
	DataClassification *Classification `protobuf:"bytes,7,opt,name=data_classification,json=dataClassification,proto3" json:"data_classification,omitempty"`
	// source of information
	DataSource    string `protobuf:"bytes,8,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Fuel) Reset() {
	*x = Fuel{}
	mi := &file_anduril_entitymanager_v1_supplies_pub_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fuel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fuel) ProtoMessage() {}

func (x *Fuel) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_supplies_pub_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fuel.ProtoReflect.Descriptor instead.
func (*Fuel) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_supplies_pub_proto_rawDescGZIP(), []int{1}
}

func (x *Fuel) GetFuelId() string {
	if x != nil {
		return x.FuelId
	}
	return ""
}

func (x *Fuel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Fuel) GetReportedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportedDate
	}
	return nil
}

func (x *Fuel) GetAmountGallons() uint32 {
	if x != nil {
		return x.AmountGallons
	}
	return 0
}

func (x *Fuel) GetMaxAuthorizedCapacityGallons() uint32 {
	if x != nil {
		return x.MaxAuthorizedCapacityGallons
	}
	return 0
}

func (x *Fuel) GetOperationalRequirementGallons() uint32 {
	if x != nil {
		return x.OperationalRequirementGallons
	}
	return 0
}

func (x *Fuel) GetDataClassification() *Classification {
	if x != nil {
		return x.DataClassification
	}
	return nil
}

func (x *Fuel) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

var File_anduril_entitymanager_v1_supplies_pub_proto protoreflect.FileDescriptor

var file_anduril_entitymanager_v1_supplies_pub_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x31, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x75, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x43, 0x0a, 0x08, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x66, 0x75, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x65,
	0x6c, 0x42, 0x03, 0xc8, 0x3e, 0x01, 0x52, 0x04, 0x66, 0x75, 0x65, 0x6c, 0x22, 0xa6, 0x03, 0x0a,
	0x04, 0x46, 0x75, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x75, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x75, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x61,
	0x6c, 0x6c, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x47, 0x61, 0x6c, 0x6c, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x6d, 0x61,
	0x78, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x6c, 0x6c, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1c, 0x6d, 0x61, 0x78, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x47, 0x61, 0x6c, 0x6c, 0x6f, 0x6e,
	0x73, 0x12, 0x46, 0x0a, 0x1f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6c,
	0x6c, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x61, 0x6c, 0x6c, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x13, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x82, 0x02, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73,
	0x50, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x6c,
	0x61, 0x74, 0x74, 0x69, 0x63, 0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x72,
	0x63, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x45, 0x58,
	0xaa, 0x02, 0x18, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x18, 0x41, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x5c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x24, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x5c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a,
	0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x3a, 0x3a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_anduril_entitymanager_v1_supplies_pub_proto_rawDescOnce sync.Once
	file_anduril_entitymanager_v1_supplies_pub_proto_rawDescData = file_anduril_entitymanager_v1_supplies_pub_proto_rawDesc
)

func file_anduril_entitymanager_v1_supplies_pub_proto_rawDescGZIP() []byte {
	file_anduril_entitymanager_v1_supplies_pub_proto_rawDescOnce.Do(func() {
		file_anduril_entitymanager_v1_supplies_pub_proto_rawDescData = protoimpl.X.CompressGZIP(file_anduril_entitymanager_v1_supplies_pub_proto_rawDescData)
	})
	return file_anduril_entitymanager_v1_supplies_pub_proto_rawDescData
}

var file_anduril_entitymanager_v1_supplies_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_anduril_entitymanager_v1_supplies_pub_proto_goTypes = []any{
	(*Supplies)(nil),              // 0: anduril.entitymanager.v1.Supplies
	(*Fuel)(nil),                  // 1: anduril.entitymanager.v1.Fuel
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
	(*Classification)(nil),        // 3: anduril.entitymanager.v1.Classification
}
var file_anduril_entitymanager_v1_supplies_pub_proto_depIdxs = []int32{
	1, // 0: anduril.entitymanager.v1.Supplies.fuel:type_name -> anduril.entitymanager.v1.Fuel
	2, // 1: anduril.entitymanager.v1.Fuel.reported_date:type_name -> google.protobuf.Timestamp
	3, // 2: anduril.entitymanager.v1.Fuel.data_classification:type_name -> anduril.entitymanager.v1.Classification
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_anduril_entitymanager_v1_supplies_pub_proto_init() }
func file_anduril_entitymanager_v1_supplies_pub_proto_init() {
	if File_anduril_entitymanager_v1_supplies_pub_proto != nil {
		return
	}
	file_anduril_entitymanager_v1_classification_pub_proto_init()
	file_anduril_entitymanager_v1_options_pub_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_anduril_entitymanager_v1_supplies_pub_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_anduril_entitymanager_v1_supplies_pub_proto_goTypes,
		DependencyIndexes: file_anduril_entitymanager_v1_supplies_pub_proto_depIdxs,
		MessageInfos:      file_anduril_entitymanager_v1_supplies_pub_proto_msgTypes,
	}.Build()
	File_anduril_entitymanager_v1_supplies_pub_proto = out.File
	file_anduril_entitymanager_v1_supplies_pub_proto_rawDesc = nil
	file_anduril_entitymanager_v1_supplies_pub_proto_goTypes = nil
	file_anduril_entitymanager_v1_supplies_pub_proto_depIdxs = nil
}
