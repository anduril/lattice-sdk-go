// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: anduril/entitymanager/v1/supplies.pub.proto

package entitymanagerv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DOD Condition Codes as documented: DLM 4000.25, Volume 2, April 09, 2022 Change 14. located at https://www.dla.mil/Defense-Data-Standards/Publications/Appendices/
// Please refer to the DLM reference for more details about each condition code
type DODConditionCode int32

const (
	DODConditionCode_DOD_CONDITION_CODE_INVALID DODConditionCode = 0
	// Serviceable issuable without qualification (i.e., ready for use)
	DODConditionCode_DOD_CONDITION_CODE_A DODConditionCode = 1
	// Serviceable issuable with qualification  (e.g., limited shelf life)
	DODConditionCode_DOD_CONDITION_CODE_B DODConditionCode = 2
	// Serviceable priority issue (i.e., use before A or B)
	DODConditionCode_DOD_CONDITION_CODE_C DODConditionCode = 3
	// Serviceable (requires test or modification)
	DODConditionCode_DOD_CONDITION_CODE_D DODConditionCode = 4
	// Unserviceable but limited restoration required
	DODConditionCode_DOD_CONDITION_CODE_E DODConditionCode = 5
	// Unserviceable Repairable (i.e., requires repair before ready for use)
	DODConditionCode_DOD_CONDITION_CODE_F DODConditionCode = 6
	// Unserviceable Incomplete (needs add't parts)
	DODConditionCode_DOD_CONDITION_CODE_G DODConditionCode = 7
	// Unserviceable (Condemned; requires classification or analysis)
	DODConditionCode_DOD_CONDITION_CODE_H DODConditionCode = 8
	// Suspended (Product Deficiency)
	DODConditionCode_DOD_CONDITION_CODE_Q DODConditionCode = 9
	// Scrap. Materiel that has no value except for its basic materiel content
	DODConditionCode_DOD_CONDITION_CODE_S DODConditionCode = 10
	// Suspended (In Stock; requires classification or analysis)
	DODConditionCode_DOD_CONDITION_CODE_J DODConditionCode = 11
	// Suspended (Returns)
	DODConditionCode_DOD_CONDITION_CODE_K DODConditionCode = 12
	// Suspended (Litigation)
	DODConditionCode_DOD_CONDITION_CODE_L DODConditionCode = 13
	// Suspended (In work; undergoing maintenance)
	DODConditionCode_DOD_CONDITION_CODE_M DODConditionCode = 14
	// Suspended (Ammunition Suitable for Emergency Combat Use Only)
	DODConditionCode_DOD_CONDITION_CODE_N DODConditionCode = 15
	// Unserviceable (Contains parts that could be reclaimed)
	DODConditionCode_DOD_CONDITION_CODE_P DODConditionCode = 16
	// Suspended (Reclaimed items, awaiting condition determination)
	DODConditionCode_DOD_CONDITION_CODE_R DODConditionCode = 17
	// Serviceable (Ammunition Suitable for Training Use Only)
	DODConditionCode_DOD_CONDITION_CODE_T DODConditionCode = 18
	// Unserviceable (waste military munitions)
	DODConditionCode_DOD_CONDITION_CODE_V DODConditionCode = 19
	// Suspended (repair decision delayed)
	DODConditionCode_DOD_CONDITION_CODE_X DODConditionCode = 20
)

// Enum value maps for DODConditionCode.
var (
	DODConditionCode_name = map[int32]string{
		0:  "DOD_CONDITION_CODE_INVALID",
		1:  "DOD_CONDITION_CODE_A",
		2:  "DOD_CONDITION_CODE_B",
		3:  "DOD_CONDITION_CODE_C",
		4:  "DOD_CONDITION_CODE_D",
		5:  "DOD_CONDITION_CODE_E",
		6:  "DOD_CONDITION_CODE_F",
		7:  "DOD_CONDITION_CODE_G",
		8:  "DOD_CONDITION_CODE_H",
		9:  "DOD_CONDITION_CODE_Q",
		10: "DOD_CONDITION_CODE_S",
		11: "DOD_CONDITION_CODE_J",
		12: "DOD_CONDITION_CODE_K",
		13: "DOD_CONDITION_CODE_L",
		14: "DOD_CONDITION_CODE_M",
		15: "DOD_CONDITION_CODE_N",
		16: "DOD_CONDITION_CODE_P",
		17: "DOD_CONDITION_CODE_R",
		18: "DOD_CONDITION_CODE_T",
		19: "DOD_CONDITION_CODE_V",
		20: "DOD_CONDITION_CODE_X",
	}
	DODConditionCode_value = map[string]int32{
		"DOD_CONDITION_CODE_INVALID": 0,
		"DOD_CONDITION_CODE_A":       1,
		"DOD_CONDITION_CODE_B":       2,
		"DOD_CONDITION_CODE_C":       3,
		"DOD_CONDITION_CODE_D":       4,
		"DOD_CONDITION_CODE_E":       5,
		"DOD_CONDITION_CODE_F":       6,
		"DOD_CONDITION_CODE_G":       7,
		"DOD_CONDITION_CODE_H":       8,
		"DOD_CONDITION_CODE_Q":       9,
		"DOD_CONDITION_CODE_S":       10,
		"DOD_CONDITION_CODE_J":       11,
		"DOD_CONDITION_CODE_K":       12,
		"DOD_CONDITION_CODE_L":       13,
		"DOD_CONDITION_CODE_M":       14,
		"DOD_CONDITION_CODE_N":       15,
		"DOD_CONDITION_CODE_P":       16,
		"DOD_CONDITION_CODE_R":       17,
		"DOD_CONDITION_CODE_T":       18,
		"DOD_CONDITION_CODE_V":       19,
		"DOD_CONDITION_CODE_X":       20,
	}
)

func (x DODConditionCode) Enum() *DODConditionCode {
	p := new(DODConditionCode)
	*p = x
	return p
}

func (x DODConditionCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DODConditionCode) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_supplies_pub_proto_enumTypes[0].Descriptor()
}

func (DODConditionCode) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_supplies_pub_proto_enumTypes[0]
}

func (x DODConditionCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DODConditionCode.Descriptor instead.
func (DODConditionCode) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_supplies_pub_proto_rawDescGZIP(), []int{0}
}

// Represents the state of supplies associated with an entity (available but not in condition to use immediately)
type Supplies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Munitions []*Munition `protobuf:"bytes,1,rep,name=munitions,proto3" json:"munitions,omitempty"`
	Fuel      []*Fuel     `protobuf:"bytes,2,rep,name=fuel,proto3" json:"fuel,omitempty"`
}

func (x *Supplies) Reset() {
	*x = Supplies{}
	mi := &file_anduril_entitymanager_v1_supplies_pub_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Supplies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Supplies) ProtoMessage() {}

func (x *Supplies) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_supplies_pub_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Supplies.ProtoReflect.Descriptor instead.
func (*Supplies) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_supplies_pub_proto_rawDescGZIP(), []int{0}
}

func (x *Supplies) GetMunitions() []*Munition {
	if x != nil {
		return x.Munitions
	}
	return nil
}

func (x *Supplies) GetFuel() []*Fuel {
	if x != nil {
		return x.Fuel
	}
	return nil
}

// Munition describes an entity's munitions stores of a similar condition, classification, and quantity
type Munition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique munition identifier (for the DoD would be called a munition code). It may be possible munitions with the same identifier
	// but different condition codes or quantities (e.g., qty 4 in condition A but qty 2 in condition F) to be included in the
	// repeated munitions field of the supplies message.
	MunitionId string `protobuf:"bytes,1,opt,name=munition_id,json=munitionId,proto3" json:"munition_id,omitempty"`
	// long form name of the munition
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// condition of the munitions (maintained as a "oneof" condition to accommodate future non-DoD specific condition identifiers)
	//
	// Types that are assignable to Condition:
	//
	//	*Munition_DodConditionCode
	Condition isMunition_Condition `protobuf_oneof:"condition"`
	// number of units
	QuantityUnits uint32 `protobuf:"varint,4,opt,name=quantity_units,json=quantityUnits,proto3" json:"quantity_units,omitempty"`
	// munitions in a single asset may have different levels of classification
	// use case: nukes on ballistic missile submarine may be TS/SCI while torpedoes may be SECRET
	DataClassification *Classification `protobuf:"bytes,5,opt,name=data_classification,json=dataClassification,proto3" json:"data_classification,omitempty"`
	// source of information
	DataSource string `protobuf:"bytes,6,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
}

func (x *Munition) Reset() {
	*x = Munition{}
	mi := &file_anduril_entitymanager_v1_supplies_pub_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Munition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Munition) ProtoMessage() {}

func (x *Munition) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_supplies_pub_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Munition.ProtoReflect.Descriptor instead.
func (*Munition) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_supplies_pub_proto_rawDescGZIP(), []int{1}
}

func (x *Munition) GetMunitionId() string {
	if x != nil {
		return x.MunitionId
	}
	return ""
}

func (x *Munition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Munition) GetCondition() isMunition_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (x *Munition) GetDodConditionCode() DODConditionCode {
	if x, ok := x.GetCondition().(*Munition_DodConditionCode); ok {
		return x.DodConditionCode
	}
	return DODConditionCode_DOD_CONDITION_CODE_INVALID
}

func (x *Munition) GetQuantityUnits() uint32 {
	if x != nil {
		return x.QuantityUnits
	}
	return 0
}

func (x *Munition) GetDataClassification() *Classification {
	if x != nil {
		return x.DataClassification
	}
	return nil
}

func (x *Munition) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

type isMunition_Condition interface {
	isMunition_Condition()
}

type Munition_DodConditionCode struct {
	// status of the munition (U.S. DoD Specific)
	DodConditionCode DODConditionCode `protobuf:"varint,3,opt,name=dod_condition_code,json=dodConditionCode,proto3,enum=anduril.entitymanager.v1.DODConditionCode,oneof"`
}

func (*Munition_DodConditionCode) isMunition_Condition() {}

// Fuel describes an entity's repository of fuels stores including current amount, operational requirements, and maximum authorized capacity
type Fuel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique fuel identifier
	FuelId string `protobuf:"bytes,1,opt,name=fuel_id,json=fuelId,proto3" json:"fuel_id,omitempty"`
	// long form name of the fuel source.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// timestamp the information was reported
	ReportedDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=reported_date,json=reportedDate,proto3" json:"reported_date,omitempty"`
	// amount of gallons on hand
	AmountGallons uint32 `protobuf:"varint,4,opt,name=amount_gallons,json=amountGallons,proto3" json:"amount_gallons,omitempty"`
	// how much the asset is allowed to have available (in gallons)
	MaxAuthorizedCapacityGallons uint32 `protobuf:"varint,5,opt,name=max_authorized_capacity_gallons,json=maxAuthorizedCapacityGallons,proto3" json:"max_authorized_capacity_gallons,omitempty"`
	// minimum required for operations (in gallons)
	OperationalRequirementGallons uint32 `protobuf:"varint,6,opt,name=operational_requirement_gallons,json=operationalRequirementGallons,proto3" json:"operational_requirement_gallons,omitempty"`
	// fuel in a single asset may have different levels of classification
	// use case: fuel for a SECRET asset while diesel fuel may be UNCLASSIFIED
	DataClassification *Classification `protobuf:"bytes,7,opt,name=data_classification,json=dataClassification,proto3" json:"data_classification,omitempty"`
	// source of information
	DataSource string `protobuf:"bytes,8,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
}

func (x *Fuel) Reset() {
	*x = Fuel{}
	mi := &file_anduril_entitymanager_v1_supplies_pub_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fuel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fuel) ProtoMessage() {}

func (x *Fuel) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_supplies_pub_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fuel.ProtoReflect.Descriptor instead.
func (*Fuel) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_supplies_pub_proto_rawDescGZIP(), []int{2}
}

func (x *Fuel) GetFuelId() string {
	if x != nil {
		return x.FuelId
	}
	return ""
}

func (x *Fuel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Fuel) GetReportedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportedDate
	}
	return nil
}

func (x *Fuel) GetAmountGallons() uint32 {
	if x != nil {
		return x.AmountGallons
	}
	return 0
}

func (x *Fuel) GetMaxAuthorizedCapacityGallons() uint32 {
	if x != nil {
		return x.MaxAuthorizedCapacityGallons
	}
	return 0
}

func (x *Fuel) GetOperationalRequirementGallons() uint32 {
	if x != nil {
		return x.OperationalRequirementGallons
	}
	return 0
}

func (x *Fuel) GetDataClassification() *Classification {
	if x != nil {
		return x.DataClassification
	}
	return nil
}

func (x *Fuel) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

var File_anduril_entitymanager_v1_supplies_pub_proto protoreflect.FileDescriptor

var file_anduril_entitymanager_v1_supplies_pub_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x31, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x75, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x08, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xc8, 0x3e, 0x01,
	0x52, 0x09, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x66,
	0x75, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x65, 0x6c, 0x42, 0x03, 0xc8, 0x3e, 0x01, 0x52, 0x04,
	0x66, 0x75, 0x65, 0x6c, 0x22, 0xcb, 0x02, 0x0a, 0x08, 0x4d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x12, 0x64, 0x6f, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x4f,
	0x44, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00,
	0x52, 0x10, 0x64, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x13, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xab, 0x03, 0x0a, 0x04, 0x46, 0x75, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x07, 0x66,
	0x75, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xd0, 0x3e,
	0x01, 0x52, 0x06, 0x66, 0x75, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6c, 0x6c, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x61,
	0x6c, 0x6c, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x67, 0x61, 0x6c, 0x6c, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c,
	0x6d, 0x61, 0x78, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x47, 0x61, 0x6c, 0x6c, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x1f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6c, 0x6c, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6c,
	0x6c, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x64, 0x61, 0x74,
	0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2a, 0xba, 0x04, 0x0a, 0x10, 0x44, 0x4f, 0x44, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x44, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x44,
	0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x10, 0x04, 0x12, 0x18, 0x0a,
	0x14, 0x44, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x45, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x44, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x10,
	0x06, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x44,
	0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x48, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x51, 0x10, 0x09, 0x12,
	0x18, 0x0a, 0x14, 0x44, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x44,
	0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4a, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x10, 0x0c, 0x12, 0x18, 0x0a,
	0x14, 0x44, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x44, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x10,
	0x0e, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14, 0x44,
	0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x10, 0x10, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x10, 0x11, 0x12,
	0x18, 0x0a, 0x14, 0x44, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x10, 0x12, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x44,
	0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x56, 0x10, 0x13, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x58, 0x10, 0x14, 0x42, 0x82, 0x02,
	0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x10,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x50, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x6c, 0x61, 0x74, 0x74, 0x69, 0x63, 0x65, 0x2d, 0x73,
	0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x3b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x45, 0x58, 0xaa, 0x02, 0x18, 0x41, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x18, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x5c, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x24, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x5c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x3a,
	0x3a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_anduril_entitymanager_v1_supplies_pub_proto_rawDescOnce sync.Once
	file_anduril_entitymanager_v1_supplies_pub_proto_rawDescData = file_anduril_entitymanager_v1_supplies_pub_proto_rawDesc
)

func file_anduril_entitymanager_v1_supplies_pub_proto_rawDescGZIP() []byte {
	file_anduril_entitymanager_v1_supplies_pub_proto_rawDescOnce.Do(func() {
		file_anduril_entitymanager_v1_supplies_pub_proto_rawDescData = protoimpl.X.CompressGZIP(file_anduril_entitymanager_v1_supplies_pub_proto_rawDescData)
	})
	return file_anduril_entitymanager_v1_supplies_pub_proto_rawDescData
}

var file_anduril_entitymanager_v1_supplies_pub_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_anduril_entitymanager_v1_supplies_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_anduril_entitymanager_v1_supplies_pub_proto_goTypes = []any{
	(DODConditionCode)(0),         // 0: anduril.entitymanager.v1.DODConditionCode
	(*Supplies)(nil),              // 1: anduril.entitymanager.v1.Supplies
	(*Munition)(nil),              // 2: anduril.entitymanager.v1.Munition
	(*Fuel)(nil),                  // 3: anduril.entitymanager.v1.Fuel
	(*Classification)(nil),        // 4: anduril.entitymanager.v1.Classification
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_anduril_entitymanager_v1_supplies_pub_proto_depIdxs = []int32{
	2, // 0: anduril.entitymanager.v1.Supplies.munitions:type_name -> anduril.entitymanager.v1.Munition
	3, // 1: anduril.entitymanager.v1.Supplies.fuel:type_name -> anduril.entitymanager.v1.Fuel
	0, // 2: anduril.entitymanager.v1.Munition.dod_condition_code:type_name -> anduril.entitymanager.v1.DODConditionCode
	4, // 3: anduril.entitymanager.v1.Munition.data_classification:type_name -> anduril.entitymanager.v1.Classification
	5, // 4: anduril.entitymanager.v1.Fuel.reported_date:type_name -> google.protobuf.Timestamp
	4, // 5: anduril.entitymanager.v1.Fuel.data_classification:type_name -> anduril.entitymanager.v1.Classification
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_anduril_entitymanager_v1_supplies_pub_proto_init() }
func file_anduril_entitymanager_v1_supplies_pub_proto_init() {
	if File_anduril_entitymanager_v1_supplies_pub_proto != nil {
		return
	}
	file_anduril_entitymanager_v1_classification_pub_proto_init()
	file_anduril_entitymanager_v1_options_pub_proto_init()
	file_anduril_entitymanager_v1_supplies_pub_proto_msgTypes[1].OneofWrappers = []any{
		(*Munition_DodConditionCode)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_anduril_entitymanager_v1_supplies_pub_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_anduril_entitymanager_v1_supplies_pub_proto_goTypes,
		DependencyIndexes: file_anduril_entitymanager_v1_supplies_pub_proto_depIdxs,
		EnumInfos:         file_anduril_entitymanager_v1_supplies_pub_proto_enumTypes,
		MessageInfos:      file_anduril_entitymanager_v1_supplies_pub_proto_msgTypes,
	}.Build()
	File_anduril_entitymanager_v1_supplies_pub_proto = out.File
	file_anduril_entitymanager_v1_supplies_pub_proto_rawDesc = nil
	file_anduril_entitymanager_v1_supplies_pub_proto_goTypes = nil
	file_anduril_entitymanager_v1_supplies_pub_proto_depIdxs = nil
}
