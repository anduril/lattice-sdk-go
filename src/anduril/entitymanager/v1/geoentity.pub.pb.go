// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: anduril/entitymanager/v1/geoentity.pub.proto

package entitymanagerv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of geo entity.
type GeoType int32

const (
	GeoType_GEO_TYPE_INVALID   GeoType = 0
	GeoType_GEO_TYPE_GENERAL   GeoType = 1
	GeoType_GEO_TYPE_HAZARD    GeoType = 2
	GeoType_GEO_TYPE_EMERGENCY GeoType = 3
	// Engagement zones allow for engaging an entity if it comes within the zone of another entity.
	GeoType_GEO_TYPE_ENGAGEMENT_ZONE GeoType = 5
	GeoType_GEO_TYPE_CONTROL_AREA    GeoType = 6
	GeoType_GEO_TYPE_BULLSEYE        GeoType = 7
	// Airspace Coordinating Measure
	GeoType_GEO_TYPE_ACM GeoType = 8
)

// Enum value maps for GeoType.
var (
	GeoType_name = map[int32]string{
		0: "GEO_TYPE_INVALID",
		1: "GEO_TYPE_GENERAL",
		2: "GEO_TYPE_HAZARD",
		3: "GEO_TYPE_EMERGENCY",
		5: "GEO_TYPE_ENGAGEMENT_ZONE",
		6: "GEO_TYPE_CONTROL_AREA",
		7: "GEO_TYPE_BULLSEYE",
		8: "GEO_TYPE_ACM",
	}
	GeoType_value = map[string]int32{
		"GEO_TYPE_INVALID":         0,
		"GEO_TYPE_GENERAL":         1,
		"GEO_TYPE_HAZARD":          2,
		"GEO_TYPE_EMERGENCY":       3,
		"GEO_TYPE_ENGAGEMENT_ZONE": 5,
		"GEO_TYPE_CONTROL_AREA":    6,
		"GEO_TYPE_BULLSEYE":        7,
		"GEO_TYPE_ACM":             8,
	}
)

func (x GeoType) Enum() *GeoType {
	p := new(GeoType)
	*p = x
	return p
}

func (x GeoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeoType) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes[0].Descriptor()
}

func (GeoType) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes[0]
}

func (x GeoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeoType.Descriptor instead.
func (GeoType) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{0}
}

type ControlAreaType int32

const (
	ControlAreaType_CONTROL_AREA_TYPE_INVALID       ControlAreaType = 0
	ControlAreaType_CONTROL_AREA_TYPE_KEEP_IN_ZONE  ControlAreaType = 1
	ControlAreaType_CONTROL_AREA_TYPE_KEEP_OUT_ZONE ControlAreaType = 2
	// The zone for an autonomous asset to nose-dive into
	// when its assignment has been concluded.
	ControlAreaType_CONTROL_AREA_TYPE_DITCH_ZONE ControlAreaType = 3
	// The area where an asset is able to loiter.
	ControlAreaType_CONTROL_AREA_TYPE_LOITER_ZONE ControlAreaType = 7
)

// Enum value maps for ControlAreaType.
var (
	ControlAreaType_name = map[int32]string{
		0: "CONTROL_AREA_TYPE_INVALID",
		1: "CONTROL_AREA_TYPE_KEEP_IN_ZONE",
		2: "CONTROL_AREA_TYPE_KEEP_OUT_ZONE",
		3: "CONTROL_AREA_TYPE_DITCH_ZONE",
		7: "CONTROL_AREA_TYPE_LOITER_ZONE",
	}
	ControlAreaType_value = map[string]int32{
		"CONTROL_AREA_TYPE_INVALID":       0,
		"CONTROL_AREA_TYPE_KEEP_IN_ZONE":  1,
		"CONTROL_AREA_TYPE_KEEP_OUT_ZONE": 2,
		"CONTROL_AREA_TYPE_DITCH_ZONE":    3,
		"CONTROL_AREA_TYPE_LOITER_ZONE":   7,
	}
)

func (x ControlAreaType) Enum() *ControlAreaType {
	p := new(ControlAreaType)
	*p = x
	return p
}

func (x ControlAreaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlAreaType) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes[1].Descriptor()
}

func (ControlAreaType) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes[1]
}

func (x ControlAreaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlAreaType.Descriptor instead.
func (ControlAreaType) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{1}
}

type ACMDetailType int32

const (
	ACMDetailType_ACM_DETAIL_TYPE_INVALID ACMDetailType = 0
	// The zone that the autonomous asset is configured to land in.
	ACMDetailType_ACM_DETAIL_TYPE_LANDING_ZONE ACMDetailType = 16
)

// Enum value maps for ACMDetailType.
var (
	ACMDetailType_name = map[int32]string{
		0:  "ACM_DETAIL_TYPE_INVALID",
		16: "ACM_DETAIL_TYPE_LANDING_ZONE",
	}
	ACMDetailType_value = map[string]int32{
		"ACM_DETAIL_TYPE_INVALID":      0,
		"ACM_DETAIL_TYPE_LANDING_ZONE": 16,
	}
)

func (x ACMDetailType) Enum() *ACMDetailType {
	p := new(ACMDetailType)
	*p = x
	return p
}

func (x ACMDetailType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACMDetailType) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes[2].Descriptor()
}

func (ACMDetailType) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes[2]
}

func (x ACMDetailType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACMDetailType.Descriptor instead.
func (ACMDetailType) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{2}
}

// A component that describes a geo-entity.
type GeoDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  GeoType                `protobuf:"varint,1,opt,name=type,proto3,enum=anduril.entitymanager.v1.GeoType" json:"type,omitempty"`
	// Types that are valid to be assigned to TypeDetails:
	//
	//	*GeoDetails_ControlArea
	//	*GeoDetails_Acm
	TypeDetails   isGeoDetails_TypeDetails `protobuf_oneof:"type_details"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeoDetails) Reset() {
	*x = GeoDetails{}
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeoDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoDetails) ProtoMessage() {}

func (x *GeoDetails) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoDetails.ProtoReflect.Descriptor instead.
func (*GeoDetails) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{0}
}

func (x *GeoDetails) GetType() GeoType {
	if x != nil {
		return x.Type
	}
	return GeoType_GEO_TYPE_INVALID
}

func (x *GeoDetails) GetTypeDetails() isGeoDetails_TypeDetails {
	if x != nil {
		return x.TypeDetails
	}
	return nil
}

func (x *GeoDetails) GetControlArea() *ControlAreaDetails {
	if x != nil {
		if x, ok := x.TypeDetails.(*GeoDetails_ControlArea); ok {
			return x.ControlArea
		}
	}
	return nil
}

func (x *GeoDetails) GetAcm() *ACMDetails {
	if x != nil {
		if x, ok := x.TypeDetails.(*GeoDetails_Acm); ok {
			return x.Acm
		}
	}
	return nil
}

type isGeoDetails_TypeDetails interface {
	isGeoDetails_TypeDetails()
}

type GeoDetails_ControlArea struct {
	ControlArea *ControlAreaDetails `protobuf:"bytes,5,opt,name=control_area,json=controlArea,proto3,oneof"`
}

type GeoDetails_Acm struct {
	Acm *ACMDetails `protobuf:"bytes,6,opt,name=acm,proto3,oneof"`
}

func (*GeoDetails_ControlArea) isGeoDetails_TypeDetails() {}

func (*GeoDetails_Acm) isGeoDetails_TypeDetails() {}

// Determines the type of control area being represented by the geo-entity,
// in which an asset can, or cannot, operate.
type ControlAreaDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          ControlAreaType        `protobuf:"varint,1,opt,name=type,proto3,enum=anduril.entitymanager.v1.ControlAreaType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControlAreaDetails) Reset() {
	*x = ControlAreaDetails{}
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlAreaDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlAreaDetails) ProtoMessage() {}

func (x *ControlAreaDetails) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlAreaDetails.ProtoReflect.Descriptor instead.
func (*ControlAreaDetails) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{1}
}

func (x *ControlAreaDetails) GetType() ControlAreaType {
	if x != nil {
		return x.Type
	}
	return ControlAreaType_CONTROL_AREA_TYPE_INVALID
}

type ACMDetails struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	AcmType ACMDetailType          `protobuf:"varint,1,opt,name=acm_type,json=acmType,proto3,enum=anduril.entitymanager.v1.ACMDetailType" json:"acm_type,omitempty"`
	// Used for loosely typed associations, such as assignment to a specific fires unit.
	// Limit to 150 characters.
	AcmDescription string `protobuf:"bytes,2,opt,name=acm_description,json=acmDescription,proto3" json:"acm_description,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ACMDetails) Reset() {
	*x = ACMDetails{}
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ACMDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACMDetails) ProtoMessage() {}

func (x *ACMDetails) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACMDetails.ProtoReflect.Descriptor instead.
func (*ACMDetails) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{2}
}

func (x *ACMDetails) GetAcmType() ACMDetailType {
	if x != nil {
		return x.AcmType
	}
	return ACMDetailType_ACM_DETAIL_TYPE_INVALID
}

func (x *ACMDetails) GetAcmDescription() string {
	if x != nil {
		return x.AcmDescription
	}
	return ""
}

// A component that describes the shape of a geo-entity.
type GeoShape struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// point, line_string, and polygon are convertible as a subset of GeoJSON
	//
	// Types that are valid to be assigned to Shape:
	//
	//	*GeoShape_Point
	//	*GeoShape_Line
	//	*GeoShape_Polygon
	//	*GeoShape_Ellipse
	//	*GeoShape_Ellipsoid
	Shape         isGeoShape_Shape `protobuf_oneof:"shape"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeoShape) Reset() {
	*x = GeoShape{}
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeoShape) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoShape) ProtoMessage() {}

func (x *GeoShape) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoShape.ProtoReflect.Descriptor instead.
func (*GeoShape) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{3}
}

func (x *GeoShape) GetShape() isGeoShape_Shape {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *GeoShape) GetPoint() *GeoPoint {
	if x != nil {
		if x, ok := x.Shape.(*GeoShape_Point); ok {
			return x.Point
		}
	}
	return nil
}

func (x *GeoShape) GetLine() *GeoLine {
	if x != nil {
		if x, ok := x.Shape.(*GeoShape_Line); ok {
			return x.Line
		}
	}
	return nil
}

func (x *GeoShape) GetPolygon() *GeoPolygon {
	if x != nil {
		if x, ok := x.Shape.(*GeoShape_Polygon); ok {
			return x.Polygon
		}
	}
	return nil
}

func (x *GeoShape) GetEllipse() *GeoEllipse {
	if x != nil {
		if x, ok := x.Shape.(*GeoShape_Ellipse); ok {
			return x.Ellipse
		}
	}
	return nil
}

func (x *GeoShape) GetEllipsoid() *GeoEllipsoid {
	if x != nil {
		if x, ok := x.Shape.(*GeoShape_Ellipsoid); ok {
			return x.Ellipsoid
		}
	}
	return nil
}

type isGeoShape_Shape interface {
	isGeoShape_Shape()
}

type GeoShape_Point struct {
	Point *GeoPoint `protobuf:"bytes,1,opt,name=point,proto3,oneof"`
}

type GeoShape_Line struct {
	Line *GeoLine `protobuf:"bytes,2,opt,name=line,proto3,oneof"`
}

type GeoShape_Polygon struct {
	Polygon *GeoPolygon `protobuf:"bytes,3,opt,name=polygon,proto3,oneof"`
}

type GeoShape_Ellipse struct {
	Ellipse *GeoEllipse `protobuf:"bytes,4,opt,name=ellipse,proto3,oneof"`
}

type GeoShape_Ellipsoid struct {
	Ellipsoid *GeoEllipsoid `protobuf:"bytes,5,opt,name=ellipsoid,proto3,oneof"`
}

func (*GeoShape_Point) isGeoShape_Shape() {}

func (*GeoShape_Line) isGeoShape_Shape() {}

func (*GeoShape_Polygon) isGeoShape_Shape() {}

func (*GeoShape_Ellipse) isGeoShape_Shape() {}

func (*GeoShape_Ellipsoid) isGeoShape_Shape() {}

// A point shaped geo-entity.
// See https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.2
type GeoPoint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Position      *Position              `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeoPoint) Reset() {
	*x = GeoPoint{}
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeoPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoPoint) ProtoMessage() {}

func (x *GeoPoint) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoPoint.ProtoReflect.Descriptor instead.
func (*GeoPoint) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{4}
}

func (x *GeoPoint) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

// A line shaped geo-entity.
// See https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.4
type GeoLine struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Positions     []*Position            `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeoLine) Reset() {
	*x = GeoLine{}
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeoLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoLine) ProtoMessage() {}

func (x *GeoLine) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoLine.ProtoReflect.Descriptor instead.
func (*GeoLine) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{5}
}

func (x *GeoLine) GetPositions() []*Position {
	if x != nil {
		return x.Positions
	}
	return nil
}

// A polygon shaped geo-entity.
// See https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.6, only canonical representations accepted
type GeoPolygon struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An array of LinearRings where the first item is the exterior ring and subsequent items are interior rings.
	Rings []*LinearRing `protobuf:"bytes,1,rep,name=rings,proto3" json:"rings,omitempty"`
	// An extension hint that this polygon is a rectangle. When true this implies several things:
	// * exactly 1 linear ring with 5 points (starting corner, 3 other corners and start again)
	// * each point has the same altitude corresponding with the plane of the rectangle
	// * each point has the same height (either all present and equal, or all not present)
	IsRectangle   bool `protobuf:"varint,2,opt,name=is_rectangle,json=isRectangle,proto3" json:"is_rectangle,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeoPolygon) Reset() {
	*x = GeoPolygon{}
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeoPolygon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoPolygon) ProtoMessage() {}

func (x *GeoPolygon) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoPolygon.ProtoReflect.Descriptor instead.
func (*GeoPolygon) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{6}
}

func (x *GeoPolygon) GetRings() []*LinearRing {
	if x != nil {
		return x.Rings
	}
	return nil
}

func (x *GeoPolygon) GetIsRectangle() bool {
	if x != nil {
		return x.IsRectangle
	}
	return false
}

// An ellipse shaped geo-entity.
// For a circle, the major and minor axis would be the same values.
// This shape is NOT Geo-JSON compatible.
type GeoEllipse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Defines the distance from the center point of the ellipse to the furthest distance on the perimeter in meters.
	SemiMajorAxisM *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=semi_major_axis_m,json=semiMajorAxisM,proto3" json:"semi_major_axis_m,omitempty"`
	// Defines the distance from the center point of the ellipse to the shortest distance on the perimeter in meters.
	SemiMinorAxisM *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=semi_minor_axis_m,json=semiMinorAxisM,proto3" json:"semi_minor_axis_m,omitempty"`
	// The orientation of the semi-major relative to true north in degrees from clockwise: 0-180 due to symmetry across the semi-minor axis.
	OrientationD *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=orientation_d,json=orientationD,proto3" json:"orientation_d,omitempty"`
	// Optional height above entity position to extrude in meters. A non-zero value creates an elliptic cylinder
	HeightM       *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=height_m,json=heightM,proto3" json:"height_m,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeoEllipse) Reset() {
	*x = GeoEllipse{}
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeoEllipse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoEllipse) ProtoMessage() {}

func (x *GeoEllipse) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoEllipse.ProtoReflect.Descriptor instead.
func (*GeoEllipse) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{7}
}

func (x *GeoEllipse) GetSemiMajorAxisM() *wrapperspb.DoubleValue {
	if x != nil {
		return x.SemiMajorAxisM
	}
	return nil
}

func (x *GeoEllipse) GetSemiMinorAxisM() *wrapperspb.DoubleValue {
	if x != nil {
		return x.SemiMinorAxisM
	}
	return nil
}

func (x *GeoEllipse) GetOrientationD() *wrapperspb.DoubleValue {
	if x != nil {
		return x.OrientationD
	}
	return nil
}

func (x *GeoEllipse) GetHeightM() *wrapperspb.DoubleValue {
	if x != nil {
		return x.HeightM
	}
	return nil
}

// An ellipsoid shaped geo-entity.
// Principal axis lengths are defined in entity body space
// This shape is NOT Geo-JSON compatible.
type GeoEllipsoid struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Defines the distance from the center point to the surface along the forward axis
	ForwardAxisM *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=forward_axis_m,json=forwardAxisM,proto3" json:"forward_axis_m,omitempty"`
	// Defines the distance from the center point to the surface along the side axis
	SideAxisM *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=side_axis_m,json=sideAxisM,proto3" json:"side_axis_m,omitempty"`
	// Defines the distance from the center point to the surface along the up axis
	UpAxisM       *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=up_axis_m,json=upAxisM,proto3" json:"up_axis_m,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeoEllipsoid) Reset() {
	*x = GeoEllipsoid{}
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeoEllipsoid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoEllipsoid) ProtoMessage() {}

func (x *GeoEllipsoid) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoEllipsoid.ProtoReflect.Descriptor instead.
func (*GeoEllipsoid) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{8}
}

func (x *GeoEllipsoid) GetForwardAxisM() *wrapperspb.DoubleValue {
	if x != nil {
		return x.ForwardAxisM
	}
	return nil
}

func (x *GeoEllipsoid) GetSideAxisM() *wrapperspb.DoubleValue {
	if x != nil {
		return x.SideAxisM
	}
	return nil
}

func (x *GeoEllipsoid) GetUpAxisM() *wrapperspb.DoubleValue {
	if x != nil {
		return x.UpAxisM
	}
	return nil
}

// A closed ring of points. The first and last point must be the same.
type LinearRing struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Positions     []*GeoPolygonPosition  `protobuf:"bytes,2,rep,name=positions,proto3" json:"positions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinearRing) Reset() {
	*x = LinearRing{}
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinearRing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinearRing) ProtoMessage() {}

func (x *LinearRing) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinearRing.ProtoReflect.Descriptor instead.
func (*LinearRing) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{9}
}

func (x *LinearRing) GetPositions() []*GeoPolygonPosition {
	if x != nil {
		return x.Positions
	}
	return nil
}

// A position in a GeoPolygon with an optional extruded height.
type GeoPolygonPosition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// base position. if no altitude set, its on the ground.
	Position *Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	// optional height above base position to extrude in meters.
	// for a given polygon, all points should have a height or none of them.
	// strictly GeoJSON compatible polygons will not have this set.
	HeightM       *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=height_m,json=heightM,proto3" json:"height_m,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeoPolygonPosition) Reset() {
	*x = GeoPolygonPosition{}
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeoPolygonPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoPolygonPosition) ProtoMessage() {}

func (x *GeoPolygonPosition) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoPolygonPosition.ProtoReflect.Descriptor instead.
func (*GeoPolygonPosition) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{10}
}

func (x *GeoPolygonPosition) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *GeoPolygonPosition) GetHeightM() *wrapperspb.FloatValue {
	if x != nil {
		return x.HeightM
	}
	return nil
}

var File_anduril_entitymanager_v1_geoentity_pub_proto protoreflect.FileDescriptor

var file_anduril_entitymanager_v1_geoentity_pub_proto_rawDesc = string([]byte{
	0x0a, 0x2c, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x2b, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x75, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x02, 0x0a, 0x0a, 0x47, 0x65, 0x6f, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48,
	0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x12, 0x38,
	0x0a, 0x03, 0x61, 0x63, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x43, 0x4d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6d, 0x42, 0x0e, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08,
	0x52, 0x09, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e, 0x76, 0x69, 0x73,
	0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x04, 0x66, 0x73, 0x63,
	0x6d, 0x52, 0x03, 0x6d, 0x63, 0x6d, 0x22, 0x53, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x41, 0x72, 0x65, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x72, 0x65,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x79, 0x0a, 0x0a, 0x41,
	0x43, 0x4d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x42, 0x0a, 0x08, 0x61, 0x63, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x43, 0x4d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x61, 0x63, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x63, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd4, 0x02, 0x0a, 0x08, 0x47, 0x65, 0x6f, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x37, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x69, 0x6e, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x79,
	0x67, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x07, 0x65, 0x6c,
	0x6c, 0x69, 0x70, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x45, 0x6c, 0x6c, 0x69, 0x70, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6c, 0x6c, 0x69, 0x70, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x09,
	0x65, 0x6c, 0x6c, 0x69, 0x70, 0x73, 0x6f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x45, 0x6c,
	0x6c, 0x69, 0x70, 0x73, 0x6f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x09, 0x65, 0x6c, 0x6c, 0x69, 0x70,
	0x73, 0x6f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x22, 0x4a, 0x0a,
	0x08, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x07, 0x47, 0x65, 0x6f,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6b, 0x0a, 0x0a, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c,
	0x79, 0x67, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x52, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x0a, 0x47, 0x65, 0x6f, 0x45, 0x6c, 0x6c, 0x69, 0x70,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x65, 0x6d, 0x69, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72,
	0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x6d,
	0x69, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x41, 0x78, 0x69, 0x73, 0x4d, 0x12, 0x47, 0x0a, 0x11, 0x73,
	0x65, 0x6d, 0x69, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x6d, 0x69, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x41,
	0x78, 0x69, 0x73, 0x4d, 0x12, 0x41, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x12, 0x37, 0x0a, 0x08, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d,
	0x22, 0xca, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x6f, 0x45, 0x6c, 0x6c, 0x69, 0x70, 0x73, 0x6f, 0x69,
	0x64, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x78, 0x69,
	0x73, 0x5f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x41, 0x78, 0x69, 0x73, 0x4d, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x78,
	0x69, 0x73, 0x5f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x69, 0x64, 0x65, 0x41, 0x78,
	0x69, 0x73, 0x4d, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x75, 0x70, 0x41, 0x78, 0x69, 0x73, 0x4d, 0x22, 0x5e, 0x0a,
	0x0a, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x09, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c,
	0x79, 0x67, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x8c, 0x01,
	0x0a, 0x12, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x2a, 0xd0, 0x01, 0x0a,
	0x07, 0x47, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x45, 0x4f, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x47, 0x45, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x45, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x48, 0x41, 0x5a, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x45, 0x4f,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10,
	0x03, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x45, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e,
	0x47, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x05, 0x12,
	0x19, 0x0a, 0x15, 0x47, 0x45, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x45,
	0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x4c, 0x4c, 0x53, 0x45, 0x59, 0x45, 0x10,
	0x07, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x45, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43,
	0x4d, 0x10, 0x08, 0x22, 0x04, 0x08, 0x04, 0x10, 0x04, 0x22, 0x04, 0x08, 0x09, 0x10, 0x09, 0x2a,
	0xbe, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x41,
	0x52, 0x45, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x41, 0x52,
	0x45, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x49, 0x4e, 0x5f,
	0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f,
	0x4c, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x45, 0x45, 0x50,
	0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x21, 0x0a,
	0x1d, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x49, 0x54, 0x45, 0x52, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x07,
	0x2a, 0x4e, 0x0a, 0x0d, 0x41, 0x43, 0x4d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x1c, 0x41, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x41, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x10,
	0x42, 0x83, 0x02, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x42, 0x11, 0x47, 0x65, 0x6f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x6c, 0x61, 0x74, 0x74, 0x69,
	0x63, 0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x45, 0x58, 0xaa, 0x02, 0x18, 0x41,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x18, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x5c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x24, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x5c, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x41, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x3a, 0x3a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescOnce sync.Once
	file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescData []byte
)

func file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP() []byte {
	file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescOnce.Do(func() {
		file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_anduril_entitymanager_v1_geoentity_pub_proto_rawDesc), len(file_anduril_entitymanager_v1_geoentity_pub_proto_rawDesc)))
	})
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescData
}

var file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_anduril_entitymanager_v1_geoentity_pub_proto_goTypes = []any{
	(GeoType)(0),                   // 0: anduril.entitymanager.v1.GeoType
	(ControlAreaType)(0),           // 1: anduril.entitymanager.v1.ControlAreaType
	(ACMDetailType)(0),             // 2: anduril.entitymanager.v1.ACMDetailType
	(*GeoDetails)(nil),             // 3: anduril.entitymanager.v1.GeoDetails
	(*ControlAreaDetails)(nil),     // 4: anduril.entitymanager.v1.ControlAreaDetails
	(*ACMDetails)(nil),             // 5: anduril.entitymanager.v1.ACMDetails
	(*GeoShape)(nil),               // 6: anduril.entitymanager.v1.GeoShape
	(*GeoPoint)(nil),               // 7: anduril.entitymanager.v1.GeoPoint
	(*GeoLine)(nil),                // 8: anduril.entitymanager.v1.GeoLine
	(*GeoPolygon)(nil),             // 9: anduril.entitymanager.v1.GeoPolygon
	(*GeoEllipse)(nil),             // 10: anduril.entitymanager.v1.GeoEllipse
	(*GeoEllipsoid)(nil),           // 11: anduril.entitymanager.v1.GeoEllipsoid
	(*LinearRing)(nil),             // 12: anduril.entitymanager.v1.LinearRing
	(*GeoPolygonPosition)(nil),     // 13: anduril.entitymanager.v1.GeoPolygonPosition
	(*Position)(nil),               // 14: anduril.entitymanager.v1.Position
	(*wrapperspb.DoubleValue)(nil), // 15: google.protobuf.DoubleValue
	(*wrapperspb.FloatValue)(nil),  // 16: google.protobuf.FloatValue
}
var file_anduril_entitymanager_v1_geoentity_pub_proto_depIdxs = []int32{
	0,  // 0: anduril.entitymanager.v1.GeoDetails.type:type_name -> anduril.entitymanager.v1.GeoType
	4,  // 1: anduril.entitymanager.v1.GeoDetails.control_area:type_name -> anduril.entitymanager.v1.ControlAreaDetails
	5,  // 2: anduril.entitymanager.v1.GeoDetails.acm:type_name -> anduril.entitymanager.v1.ACMDetails
	1,  // 3: anduril.entitymanager.v1.ControlAreaDetails.type:type_name -> anduril.entitymanager.v1.ControlAreaType
	2,  // 4: anduril.entitymanager.v1.ACMDetails.acm_type:type_name -> anduril.entitymanager.v1.ACMDetailType
	7,  // 5: anduril.entitymanager.v1.GeoShape.point:type_name -> anduril.entitymanager.v1.GeoPoint
	8,  // 6: anduril.entitymanager.v1.GeoShape.line:type_name -> anduril.entitymanager.v1.GeoLine
	9,  // 7: anduril.entitymanager.v1.GeoShape.polygon:type_name -> anduril.entitymanager.v1.GeoPolygon
	10, // 8: anduril.entitymanager.v1.GeoShape.ellipse:type_name -> anduril.entitymanager.v1.GeoEllipse
	11, // 9: anduril.entitymanager.v1.GeoShape.ellipsoid:type_name -> anduril.entitymanager.v1.GeoEllipsoid
	14, // 10: anduril.entitymanager.v1.GeoPoint.position:type_name -> anduril.entitymanager.v1.Position
	14, // 11: anduril.entitymanager.v1.GeoLine.positions:type_name -> anduril.entitymanager.v1.Position
	12, // 12: anduril.entitymanager.v1.GeoPolygon.rings:type_name -> anduril.entitymanager.v1.LinearRing
	15, // 13: anduril.entitymanager.v1.GeoEllipse.semi_major_axis_m:type_name -> google.protobuf.DoubleValue
	15, // 14: anduril.entitymanager.v1.GeoEllipse.semi_minor_axis_m:type_name -> google.protobuf.DoubleValue
	15, // 15: anduril.entitymanager.v1.GeoEllipse.orientation_d:type_name -> google.protobuf.DoubleValue
	15, // 16: anduril.entitymanager.v1.GeoEllipse.height_m:type_name -> google.protobuf.DoubleValue
	15, // 17: anduril.entitymanager.v1.GeoEllipsoid.forward_axis_m:type_name -> google.protobuf.DoubleValue
	15, // 18: anduril.entitymanager.v1.GeoEllipsoid.side_axis_m:type_name -> google.protobuf.DoubleValue
	15, // 19: anduril.entitymanager.v1.GeoEllipsoid.up_axis_m:type_name -> google.protobuf.DoubleValue
	13, // 20: anduril.entitymanager.v1.LinearRing.positions:type_name -> anduril.entitymanager.v1.GeoPolygonPosition
	14, // 21: anduril.entitymanager.v1.GeoPolygonPosition.position:type_name -> anduril.entitymanager.v1.Position
	16, // 22: anduril.entitymanager.v1.GeoPolygonPosition.height_m:type_name -> google.protobuf.FloatValue
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_anduril_entitymanager_v1_geoentity_pub_proto_init() }
func file_anduril_entitymanager_v1_geoentity_pub_proto_init() {
	if File_anduril_entitymanager_v1_geoentity_pub_proto != nil {
		return
	}
	file_anduril_entitymanager_v1_location_pub_proto_init()
	file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[0].OneofWrappers = []any{
		(*GeoDetails_ControlArea)(nil),
		(*GeoDetails_Acm)(nil),
	}
	file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[3].OneofWrappers = []any{
		(*GeoShape_Point)(nil),
		(*GeoShape_Line)(nil),
		(*GeoShape_Polygon)(nil),
		(*GeoShape_Ellipse)(nil),
		(*GeoShape_Ellipsoid)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_anduril_entitymanager_v1_geoentity_pub_proto_rawDesc), len(file_anduril_entitymanager_v1_geoentity_pub_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_anduril_entitymanager_v1_geoentity_pub_proto_goTypes,
		DependencyIndexes: file_anduril_entitymanager_v1_geoentity_pub_proto_depIdxs,
		EnumInfos:         file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes,
		MessageInfos:      file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes,
	}.Build()
	File_anduril_entitymanager_v1_geoentity_pub_proto = out.File
	file_anduril_entitymanager_v1_geoentity_pub_proto_goTypes = nil
	file_anduril_entitymanager_v1_geoentity_pub_proto_depIdxs = nil
}
