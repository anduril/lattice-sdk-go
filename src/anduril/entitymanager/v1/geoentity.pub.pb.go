// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: anduril/entitymanager/v1/geoentity.pub.proto

package entitymanagerv1

import (
	_type "github.com/dogun-anduril/anduril-sdk-go/src/anduril/type"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of geo entity.
type GeoType int32

const (
	GeoType_GEO_TYPE_INVALID   GeoType = 0
	GeoType_GEO_TYPE_GENERAL   GeoType = 1
	GeoType_GEO_TYPE_HAZARD    GeoType = 2
	GeoType_GEO_TYPE_EMERGENCY GeoType = 3
	// Fire support coordination measure
	GeoType_GEO_TYPE_FSCM GeoType = 4
	// Engagement zones allow for engaging an entity if it comes within the zone of another entity.
	GeoType_GEO_TYPE_ENGAGEMENT_ZONE GeoType = 5
	GeoType_GEO_TYPE_CONTROL_AREA    GeoType = 6
	GeoType_GEO_TYPE_BULLSEYE        GeoType = 7
	// Airspace Coordinating Measure
	GeoType_GEO_TYPE_ACM GeoType = 8
	// Maneuver Control Measure
	GeoType_GEO_TYPE_MCM GeoType = 9
)

// Enum value maps for GeoType.
var (
	GeoType_name = map[int32]string{
		0: "GEO_TYPE_INVALID",
		1: "GEO_TYPE_GENERAL",
		2: "GEO_TYPE_HAZARD",
		3: "GEO_TYPE_EMERGENCY",
		4: "GEO_TYPE_FSCM",
		5: "GEO_TYPE_ENGAGEMENT_ZONE",
		6: "GEO_TYPE_CONTROL_AREA",
		7: "GEO_TYPE_BULLSEYE",
		8: "GEO_TYPE_ACM",
		9: "GEO_TYPE_MCM",
	}
	GeoType_value = map[string]int32{
		"GEO_TYPE_INVALID":         0,
		"GEO_TYPE_GENERAL":         1,
		"GEO_TYPE_HAZARD":          2,
		"GEO_TYPE_EMERGENCY":       3,
		"GEO_TYPE_FSCM":            4,
		"GEO_TYPE_ENGAGEMENT_ZONE": 5,
		"GEO_TYPE_CONTROL_AREA":    6,
		"GEO_TYPE_BULLSEYE":        7,
		"GEO_TYPE_ACM":             8,
		"GEO_TYPE_MCM":             9,
	}
)

func (x GeoType) Enum() *GeoType {
	p := new(GeoType)
	*p = x
	return p
}

func (x GeoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeoType) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes[0].Descriptor()
}

func (GeoType) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes[0]
}

func (x GeoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeoType.Descriptor instead.
func (GeoType) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{0}
}

// Type of an emergency.
type EmergencyType int32

const (
	EmergencyType_EMERGENCY_TYPE_INVALID            EmergencyType = 0
	EmergencyType_EMERGENCY_TYPE_DOWN_AIRCRAFT      EmergencyType = 1
	EmergencyType_EMERGENCY_TYPE_MAN_IN_WATER       EmergencyType = 2
	EmergencyType_EMERGENCY_TYPE_DITCHING           EmergencyType = 3
	EmergencyType_EMERGENCY_TYPE_BAILOUT            EmergencyType = 4
	EmergencyType_EMERGENCY_TYPE_DISTRESSED_VEHICLE EmergencyType = 5
	EmergencyType_EMERGENCY_TYPE_GROUND_INCIDENT    EmergencyType = 6
	EmergencyType_EMERGENCY_TYPE_MEDICAL            EmergencyType = 7
	EmergencyType_EMERGENCY_TYPE_ISOLATED_PERSON    EmergencyType = 8
)

// Enum value maps for EmergencyType.
var (
	EmergencyType_name = map[int32]string{
		0: "EMERGENCY_TYPE_INVALID",
		1: "EMERGENCY_TYPE_DOWN_AIRCRAFT",
		2: "EMERGENCY_TYPE_MAN_IN_WATER",
		3: "EMERGENCY_TYPE_DITCHING",
		4: "EMERGENCY_TYPE_BAILOUT",
		5: "EMERGENCY_TYPE_DISTRESSED_VEHICLE",
		6: "EMERGENCY_TYPE_GROUND_INCIDENT",
		7: "EMERGENCY_TYPE_MEDICAL",
		8: "EMERGENCY_TYPE_ISOLATED_PERSON",
	}
	EmergencyType_value = map[string]int32{
		"EMERGENCY_TYPE_INVALID":            0,
		"EMERGENCY_TYPE_DOWN_AIRCRAFT":      1,
		"EMERGENCY_TYPE_MAN_IN_WATER":       2,
		"EMERGENCY_TYPE_DITCHING":           3,
		"EMERGENCY_TYPE_BAILOUT":            4,
		"EMERGENCY_TYPE_DISTRESSED_VEHICLE": 5,
		"EMERGENCY_TYPE_GROUND_INCIDENT":    6,
		"EMERGENCY_TYPE_MEDICAL":            7,
		"EMERGENCY_TYPE_ISOLATED_PERSON":    8,
	}
)

func (x EmergencyType) Enum() *EmergencyType {
	p := new(EmergencyType)
	*p = x
	return p
}

func (x EmergencyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmergencyType) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes[1].Descriptor()
}

func (EmergencyType) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes[1]
}

func (x EmergencyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmergencyType.Descriptor instead.
func (EmergencyType) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{1}
}

type ControlAreaType int32

const (
	ControlAreaType_CONTROL_AREA_TYPE_INVALID       ControlAreaType = 0
	ControlAreaType_CONTROL_AREA_TYPE_KEEP_IN_ZONE  ControlAreaType = 1
	ControlAreaType_CONTROL_AREA_TYPE_KEEP_OUT_ZONE ControlAreaType = 2
	// Zone for an autonomous asset to nose-dive into
	// when its assignment has been concluded
	ControlAreaType_CONTROL_AREA_TYPE_DITCH_ZONE ControlAreaType = 3
	// Areas where we do not process radar detections
	ControlAreaType_CONTROL_AREA_TYPE_OBSERVATION_EXCLUSION ControlAreaType = 4
	// Areas where we process radar detections exclusively
	ControlAreaType_CONTROL_AREA_TYPE_OBSERVATION_INCLUSION ControlAreaType = 5
	// Areas where we elevate interrogation priority
	ControlAreaType_CONTROL_AREA_TYPE_OBSERVATION_PRIORITY ControlAreaType = 6
)

// Enum value maps for ControlAreaType.
var (
	ControlAreaType_name = map[int32]string{
		0: "CONTROL_AREA_TYPE_INVALID",
		1: "CONTROL_AREA_TYPE_KEEP_IN_ZONE",
		2: "CONTROL_AREA_TYPE_KEEP_OUT_ZONE",
		3: "CONTROL_AREA_TYPE_DITCH_ZONE",
		4: "CONTROL_AREA_TYPE_OBSERVATION_EXCLUSION",
		5: "CONTROL_AREA_TYPE_OBSERVATION_INCLUSION",
		6: "CONTROL_AREA_TYPE_OBSERVATION_PRIORITY",
	}
	ControlAreaType_value = map[string]int32{
		"CONTROL_AREA_TYPE_INVALID":               0,
		"CONTROL_AREA_TYPE_KEEP_IN_ZONE":          1,
		"CONTROL_AREA_TYPE_KEEP_OUT_ZONE":         2,
		"CONTROL_AREA_TYPE_DITCH_ZONE":            3,
		"CONTROL_AREA_TYPE_OBSERVATION_EXCLUSION": 4,
		"CONTROL_AREA_TYPE_OBSERVATION_INCLUSION": 5,
		"CONTROL_AREA_TYPE_OBSERVATION_PRIORITY":  6,
	}
)

func (x ControlAreaType) Enum() *ControlAreaType {
	p := new(ControlAreaType)
	*p = x
	return p
}

func (x ControlAreaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlAreaType) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes[2].Descriptor()
}

func (ControlAreaType) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes[2]
}

func (x ControlAreaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlAreaType.Descriptor instead.
func (ControlAreaType) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{2}
}

type FSCMDetailType int32

const (
	FSCMDetailType_FSCM_DETAIL_TYPE_INVALID                            FSCMDetailType = 0
	FSCMDetailType_FSCM_DETAIL_TYPE_DEAD_SPACE_AREA                    FSCMDetailType = 1
	FSCMDetailType_FSCM_DETAIL_TYPE_NO_FIRE_AREA                       FSCMDetailType = 2
	FSCMDetailType_FSCM_DETAIL_TYPE_FREE_FIRE_AREA                     FSCMDetailType = 3
	FSCMDetailType_FSCM_DETAIL_TYPE_RESTRICTIVE_FIRE_AREA              FSCMDetailType = 4
	FSCMDetailType_FSCM_DETAIL_TYPE_SAFE_FIRE_AREA                     FSCMDetailType = 5
	FSCMDetailType_FSCM_DETAIL_TYPE_AIRSPACE_COORDINATION_AREA         FSCMDetailType = 6
	FSCMDetailType_FSCM_DETAIL_TYPE_FORWARD_EDGE_OF_THE_BATTLE_AREA    FSCMDetailType = 7
	FSCMDetailType_FSCM_DETAIL_TYPE_FIRE_SUPPORT_AREA                  FSCMDetailType = 8
	FSCMDetailType_FSCM_DETAIL_TYPE_PATROL_RECONNAISSANCE              FSCMDetailType = 9
	FSCMDetailType_FSCM_DETAIL_TYPE_ZONE_OF_RESPONSIBILITY             FSCMDetailType = 10
	FSCMDetailType_FSCM_DETAIL_TYPE_PRIORITY_CALL_FOR_FIRE_ZONE        FSCMDetailType = 11
	FSCMDetailType_FSCM_DETAIL_TYPE_CENSORED_ZONE                      FSCMDetailType = 12
	FSCMDetailType_FSCM_DETAIL_TYPE_ZONE_OF_ACTION                     FSCMDetailType = 13
	FSCMDetailType_FSCM_DETAIL_TYPE_CRITICAL_FRIENDLY_ZONE             FSCMDetailType = 14
	FSCMDetailType_FSCM_DETAIL_TYPE_PLATOON_AREA_HAZARD                FSCMDetailType = 15
	FSCMDetailType_FSCM_DETAIL_TYPE_TARGET_AREA_HAZARD                 FSCMDetailType = 16
	FSCMDetailType_FSCM_DETAIL_TYPE_RESTRICTED_OPERATIONS_ZONE         FSCMDetailType = 17
	FSCMDetailType_FSCM_DETAIL_TYPE_AIR_CORRIDOR                       FSCMDetailType = 18
	FSCMDetailType_FSCM_DETAIL_TYPE_RESTRICTIVE_FIRE_LINE              FSCMDetailType = 19
	FSCMDetailType_FSCM_DETAIL_TYPE_COORDINATED_FIRE_LINE_NO_FIRE_LINE FSCMDetailType = 20
	FSCMDetailType_FSCM_DETAIL_TYPE_BOUNDARY_LINE                      FSCMDetailType = 21
	FSCMDetailType_FSCM_DETAIL_TYPE_FORWARD_LINE                       FSCMDetailType = 22
	FSCMDetailType_FSCM_DETAIL_TYPE_FIRE_SUPPORT_LINE                  FSCMDetailType = 23
	FSCMDetailType_FSCM_DETAIL_TYPE_LINE_OF_DEPARTURE                  FSCMDetailType = 24
	FSCMDetailType_FSCM_DETAIL_TYPE_LINE_OF_CONTACT                    FSCMDetailType = 25
	FSCMDetailType_FSCM_DETAIL_TYPE_LINE_OF_DEPARTURE_LINE_OF_CONTACT  FSCMDetailType = 26
	FSCMDetailType_FSCM_DETAIL_TYPE_ZONE_OF_FIRE                       FSCMDetailType = 27
)

// Enum value maps for FSCMDetailType.
var (
	FSCMDetailType_name = map[int32]string{
		0:  "FSCM_DETAIL_TYPE_INVALID",
		1:  "FSCM_DETAIL_TYPE_DEAD_SPACE_AREA",
		2:  "FSCM_DETAIL_TYPE_NO_FIRE_AREA",
		3:  "FSCM_DETAIL_TYPE_FREE_FIRE_AREA",
		4:  "FSCM_DETAIL_TYPE_RESTRICTIVE_FIRE_AREA",
		5:  "FSCM_DETAIL_TYPE_SAFE_FIRE_AREA",
		6:  "FSCM_DETAIL_TYPE_AIRSPACE_COORDINATION_AREA",
		7:  "FSCM_DETAIL_TYPE_FORWARD_EDGE_OF_THE_BATTLE_AREA",
		8:  "FSCM_DETAIL_TYPE_FIRE_SUPPORT_AREA",
		9:  "FSCM_DETAIL_TYPE_PATROL_RECONNAISSANCE",
		10: "FSCM_DETAIL_TYPE_ZONE_OF_RESPONSIBILITY",
		11: "FSCM_DETAIL_TYPE_PRIORITY_CALL_FOR_FIRE_ZONE",
		12: "FSCM_DETAIL_TYPE_CENSORED_ZONE",
		13: "FSCM_DETAIL_TYPE_ZONE_OF_ACTION",
		14: "FSCM_DETAIL_TYPE_CRITICAL_FRIENDLY_ZONE",
		15: "FSCM_DETAIL_TYPE_PLATOON_AREA_HAZARD",
		16: "FSCM_DETAIL_TYPE_TARGET_AREA_HAZARD",
		17: "FSCM_DETAIL_TYPE_RESTRICTED_OPERATIONS_ZONE",
		18: "FSCM_DETAIL_TYPE_AIR_CORRIDOR",
		19: "FSCM_DETAIL_TYPE_RESTRICTIVE_FIRE_LINE",
		20: "FSCM_DETAIL_TYPE_COORDINATED_FIRE_LINE_NO_FIRE_LINE",
		21: "FSCM_DETAIL_TYPE_BOUNDARY_LINE",
		22: "FSCM_DETAIL_TYPE_FORWARD_LINE",
		23: "FSCM_DETAIL_TYPE_FIRE_SUPPORT_LINE",
		24: "FSCM_DETAIL_TYPE_LINE_OF_DEPARTURE",
		25: "FSCM_DETAIL_TYPE_LINE_OF_CONTACT",
		26: "FSCM_DETAIL_TYPE_LINE_OF_DEPARTURE_LINE_OF_CONTACT",
		27: "FSCM_DETAIL_TYPE_ZONE_OF_FIRE",
	}
	FSCMDetailType_value = map[string]int32{
		"FSCM_DETAIL_TYPE_INVALID":                            0,
		"FSCM_DETAIL_TYPE_DEAD_SPACE_AREA":                    1,
		"FSCM_DETAIL_TYPE_NO_FIRE_AREA":                       2,
		"FSCM_DETAIL_TYPE_FREE_FIRE_AREA":                     3,
		"FSCM_DETAIL_TYPE_RESTRICTIVE_FIRE_AREA":              4,
		"FSCM_DETAIL_TYPE_SAFE_FIRE_AREA":                     5,
		"FSCM_DETAIL_TYPE_AIRSPACE_COORDINATION_AREA":         6,
		"FSCM_DETAIL_TYPE_FORWARD_EDGE_OF_THE_BATTLE_AREA":    7,
		"FSCM_DETAIL_TYPE_FIRE_SUPPORT_AREA":                  8,
		"FSCM_DETAIL_TYPE_PATROL_RECONNAISSANCE":              9,
		"FSCM_DETAIL_TYPE_ZONE_OF_RESPONSIBILITY":             10,
		"FSCM_DETAIL_TYPE_PRIORITY_CALL_FOR_FIRE_ZONE":        11,
		"FSCM_DETAIL_TYPE_CENSORED_ZONE":                      12,
		"FSCM_DETAIL_TYPE_ZONE_OF_ACTION":                     13,
		"FSCM_DETAIL_TYPE_CRITICAL_FRIENDLY_ZONE":             14,
		"FSCM_DETAIL_TYPE_PLATOON_AREA_HAZARD":                15,
		"FSCM_DETAIL_TYPE_TARGET_AREA_HAZARD":                 16,
		"FSCM_DETAIL_TYPE_RESTRICTED_OPERATIONS_ZONE":         17,
		"FSCM_DETAIL_TYPE_AIR_CORRIDOR":                       18,
		"FSCM_DETAIL_TYPE_RESTRICTIVE_FIRE_LINE":              19,
		"FSCM_DETAIL_TYPE_COORDINATED_FIRE_LINE_NO_FIRE_LINE": 20,
		"FSCM_DETAIL_TYPE_BOUNDARY_LINE":                      21,
		"FSCM_DETAIL_TYPE_FORWARD_LINE":                       22,
		"FSCM_DETAIL_TYPE_FIRE_SUPPORT_LINE":                  23,
		"FSCM_DETAIL_TYPE_LINE_OF_DEPARTURE":                  24,
		"FSCM_DETAIL_TYPE_LINE_OF_CONTACT":                    25,
		"FSCM_DETAIL_TYPE_LINE_OF_DEPARTURE_LINE_OF_CONTACT":  26,
		"FSCM_DETAIL_TYPE_ZONE_OF_FIRE":                       27,
	}
)

func (x FSCMDetailType) Enum() *FSCMDetailType {
	p := new(FSCMDetailType)
	*p = x
	return p
}

func (x FSCMDetailType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FSCMDetailType) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes[3].Descriptor()
}

func (FSCMDetailType) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes[3]
}

func (x FSCMDetailType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FSCMDetailType.Descriptor instead.
func (FSCMDetailType) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{3}
}

type ACMDetailType int32

const (
	ACMDetailType_ACM_DETAIL_TYPE_INVALID                                 ACMDetailType = 0
	ACMDetailType_ACM_DETAIL_TYPE_AIR_CORRIDOR                            ACMDetailType = 1
	ACMDetailType_ACM_DETAIL_TYPE_MINIMUM_RISK_ROUTE                      ACMDetailType = 2
	ACMDetailType_ACM_DETAIL_TYPE_TEMPORARY_MINIMUM_RISK_ROUTE            ACMDetailType = 3
	ACMDetailType_ACM_DETAIL_TYPE_TRANSIT_ROUTE                           ACMDetailType = 4
	ACMDetailType_ACM_DETAIL_TYPE_LOW_LEVEL_TRANSIT_ROUTE                 ACMDetailType = 5
	ACMDetailType_ACM_DETAIL_TYPE_SPECIAL_CORRIDOR                        ACMDetailType = 6
	ACMDetailType_ACM_DETAIL_TYPE_STANDARD_USE_ARMY_AIRCRAFT_FLIGHT_ROUTE ACMDetailType = 7
	ACMDetailType_ACM_DETAIL_TYPE_RESTRICTED_OPERATIONS_ZONE              ACMDetailType = 8
	ACMDetailType_ACM_DETAIL_TYPE_AIR_TO_AIR_REFUELING_AREA               ACMDetailType = 9
	ACMDetailType_ACM_DETAIL_TYPE_AIRBORNE_COMMAND_AND_CONTROL_AREA       ACMDetailType = 10
	ACMDetailType_ACM_DETAIL_TYPE_AIRBORNE_EARLY_WARNING_AREA             ACMDetailType = 11
	ACMDetailType_ACM_DETAIL_TYPE_CLOSE_AIR_SUPPORT_AREA                  ACMDetailType = 12
	ACMDetailType_ACM_DETAIL_TYPE_COMBAT_AIR_PATROL                       ACMDetailType = 13
	ACMDetailType_ACM_DETAIL_TYPE_DROP_ZONE                               ACMDetailType = 14
	ACMDetailType_ACM_DETAIL_TYPE_ELECTRONIC_COMBAT                       ACMDetailType = 15
	ACMDetailType_ACM_DETAIL_TYPE_LANDING_ZONE                            ACMDetailType = 16
	ACMDetailType_ACM_DETAIL_TYPE_PICKUP_ZONE                             ACMDetailType = 17
	ACMDetailType_ACM_DETAIL_TYPE_RECONNAISSANCE_AREA                     ACMDetailType = 18
	ACMDetailType_ACM_DETAIL_TYPE_SPECIAL_OPERATIONS_FORCE_AREA           ACMDetailType = 19
	ACMDetailType_ACM_DETAIL_TYPE_SURFACE_TO_SURFACE_MISSILE_SYSTEM       ACMDetailType = 20
	ACMDetailType_ACM_DETAIL_TYPE_SURFACE_TO_SURFACE_MUNITIONS            ACMDetailType = 21
	ACMDetailType_ACM_DETAIL_TYPE_UNMANNED_AIRCRAFT_AREA                  ACMDetailType = 22
	ACMDetailType_ACM_DETAIL_TYPE_COORDINATING_ALTITUDE                   ACMDetailType = 23
	ACMDetailType_ACM_DETAIL_TYPE_COORDINATION_LEVEL                      ACMDetailType = 24
	ACMDetailType_ACM_DETAIL_TYPE_HIGH_DENSITY_AIRSPACE_CONTROL_ZONE      ACMDetailType = 25
	ACMDetailType_ACM_DETAIL_TYPE_NO_FLY_AREA                             ACMDetailType = 26
	ACMDetailType_ACM_DETAIL_TYPE_TRANSIT_CORRIDOR                        ACMDetailType = 27
	ACMDetailType_ACM_DETAIL_TYPE_RETURN_TO_FORCE                         ACMDetailType = 28
)

// Enum value maps for ACMDetailType.
var (
	ACMDetailType_name = map[int32]string{
		0:  "ACM_DETAIL_TYPE_INVALID",
		1:  "ACM_DETAIL_TYPE_AIR_CORRIDOR",
		2:  "ACM_DETAIL_TYPE_MINIMUM_RISK_ROUTE",
		3:  "ACM_DETAIL_TYPE_TEMPORARY_MINIMUM_RISK_ROUTE",
		4:  "ACM_DETAIL_TYPE_TRANSIT_ROUTE",
		5:  "ACM_DETAIL_TYPE_LOW_LEVEL_TRANSIT_ROUTE",
		6:  "ACM_DETAIL_TYPE_SPECIAL_CORRIDOR",
		7:  "ACM_DETAIL_TYPE_STANDARD_USE_ARMY_AIRCRAFT_FLIGHT_ROUTE",
		8:  "ACM_DETAIL_TYPE_RESTRICTED_OPERATIONS_ZONE",
		9:  "ACM_DETAIL_TYPE_AIR_TO_AIR_REFUELING_AREA",
		10: "ACM_DETAIL_TYPE_AIRBORNE_COMMAND_AND_CONTROL_AREA",
		11: "ACM_DETAIL_TYPE_AIRBORNE_EARLY_WARNING_AREA",
		12: "ACM_DETAIL_TYPE_CLOSE_AIR_SUPPORT_AREA",
		13: "ACM_DETAIL_TYPE_COMBAT_AIR_PATROL",
		14: "ACM_DETAIL_TYPE_DROP_ZONE",
		15: "ACM_DETAIL_TYPE_ELECTRONIC_COMBAT",
		16: "ACM_DETAIL_TYPE_LANDING_ZONE",
		17: "ACM_DETAIL_TYPE_PICKUP_ZONE",
		18: "ACM_DETAIL_TYPE_RECONNAISSANCE_AREA",
		19: "ACM_DETAIL_TYPE_SPECIAL_OPERATIONS_FORCE_AREA",
		20: "ACM_DETAIL_TYPE_SURFACE_TO_SURFACE_MISSILE_SYSTEM",
		21: "ACM_DETAIL_TYPE_SURFACE_TO_SURFACE_MUNITIONS",
		22: "ACM_DETAIL_TYPE_UNMANNED_AIRCRAFT_AREA",
		23: "ACM_DETAIL_TYPE_COORDINATING_ALTITUDE",
		24: "ACM_DETAIL_TYPE_COORDINATION_LEVEL",
		25: "ACM_DETAIL_TYPE_HIGH_DENSITY_AIRSPACE_CONTROL_ZONE",
		26: "ACM_DETAIL_TYPE_NO_FLY_AREA",
		27: "ACM_DETAIL_TYPE_TRANSIT_CORRIDOR",
		28: "ACM_DETAIL_TYPE_RETURN_TO_FORCE",
	}
	ACMDetailType_value = map[string]int32{
		"ACM_DETAIL_TYPE_INVALID":                                 0,
		"ACM_DETAIL_TYPE_AIR_CORRIDOR":                            1,
		"ACM_DETAIL_TYPE_MINIMUM_RISK_ROUTE":                      2,
		"ACM_DETAIL_TYPE_TEMPORARY_MINIMUM_RISK_ROUTE":            3,
		"ACM_DETAIL_TYPE_TRANSIT_ROUTE":                           4,
		"ACM_DETAIL_TYPE_LOW_LEVEL_TRANSIT_ROUTE":                 5,
		"ACM_DETAIL_TYPE_SPECIAL_CORRIDOR":                        6,
		"ACM_DETAIL_TYPE_STANDARD_USE_ARMY_AIRCRAFT_FLIGHT_ROUTE": 7,
		"ACM_DETAIL_TYPE_RESTRICTED_OPERATIONS_ZONE":              8,
		"ACM_DETAIL_TYPE_AIR_TO_AIR_REFUELING_AREA":               9,
		"ACM_DETAIL_TYPE_AIRBORNE_COMMAND_AND_CONTROL_AREA":       10,
		"ACM_DETAIL_TYPE_AIRBORNE_EARLY_WARNING_AREA":             11,
		"ACM_DETAIL_TYPE_CLOSE_AIR_SUPPORT_AREA":                  12,
		"ACM_DETAIL_TYPE_COMBAT_AIR_PATROL":                       13,
		"ACM_DETAIL_TYPE_DROP_ZONE":                               14,
		"ACM_DETAIL_TYPE_ELECTRONIC_COMBAT":                       15,
		"ACM_DETAIL_TYPE_LANDING_ZONE":                            16,
		"ACM_DETAIL_TYPE_PICKUP_ZONE":                             17,
		"ACM_DETAIL_TYPE_RECONNAISSANCE_AREA":                     18,
		"ACM_DETAIL_TYPE_SPECIAL_OPERATIONS_FORCE_AREA":           19,
		"ACM_DETAIL_TYPE_SURFACE_TO_SURFACE_MISSILE_SYSTEM":       20,
		"ACM_DETAIL_TYPE_SURFACE_TO_SURFACE_MUNITIONS":            21,
		"ACM_DETAIL_TYPE_UNMANNED_AIRCRAFT_AREA":                  22,
		"ACM_DETAIL_TYPE_COORDINATING_ALTITUDE":                   23,
		"ACM_DETAIL_TYPE_COORDINATION_LEVEL":                      24,
		"ACM_DETAIL_TYPE_HIGH_DENSITY_AIRSPACE_CONTROL_ZONE":      25,
		"ACM_DETAIL_TYPE_NO_FLY_AREA":                             26,
		"ACM_DETAIL_TYPE_TRANSIT_CORRIDOR":                        27,
		"ACM_DETAIL_TYPE_RETURN_TO_FORCE":                         28,
	}
)

func (x ACMDetailType) Enum() *ACMDetailType {
	p := new(ACMDetailType)
	*p = x
	return p
}

func (x ACMDetailType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACMDetailType) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes[4].Descriptor()
}

func (ACMDetailType) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes[4]
}

func (x ACMDetailType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACMDetailType.Descriptor instead.
func (ACMDetailType) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{4}
}

type AmmoRestrictionType int32

const (
	AmmoRestrictionType_AMMO_RESTRICTION_TYPE_INVALID                         AmmoRestrictionType = 0
	AmmoRestrictionType_AMMO_RESTRICTION_TYPE_HIGH_EXPLOSIVE_MUNITIONS        AmmoRestrictionType = 1
	AmmoRestrictionType_AMMO_RESTRICTION_TYPE_IMPROVED_CONVENTIONAL_MUNITIONS AmmoRestrictionType = 2
	AmmoRestrictionType_AMMO_RESTRICTION_TYPE_CHEMICAL_MUNITIONS              AmmoRestrictionType = 3
	AmmoRestrictionType_AMMO_RESTRICTION_TYPE_NUCLEAR_MUNITIONS               AmmoRestrictionType = 4
	AmmoRestrictionType_AMMO_RESTRICTION_TYPE_WHITE_PHOSPHORUS_MUNITIONS      AmmoRestrictionType = 5
	AmmoRestrictionType_AMMO_RESTRICTION_TYPE_ILLUMINATION_MUNITIONS          AmmoRestrictionType = 6
	AmmoRestrictionType_AMMO_RESTRICTION_TYPE_TERMINAL_HOMING_MUNITIONS       AmmoRestrictionType = 7
	AmmoRestrictionType_AMMO_RESTRICTION_TYPE_FASCAM_MUNITIONS                AmmoRestrictionType = 8
	AmmoRestrictionType_AMMO_RESTRICTION_TYPE_SMOKE_MUNITIONS                 AmmoRestrictionType = 9
	AmmoRestrictionType_AMMO_RESTRICTION_TYPE_ALL_MUNITIONS                   AmmoRestrictionType = 10
)

// Enum value maps for AmmoRestrictionType.
var (
	AmmoRestrictionType_name = map[int32]string{
		0:  "AMMO_RESTRICTION_TYPE_INVALID",
		1:  "AMMO_RESTRICTION_TYPE_HIGH_EXPLOSIVE_MUNITIONS",
		2:  "AMMO_RESTRICTION_TYPE_IMPROVED_CONVENTIONAL_MUNITIONS",
		3:  "AMMO_RESTRICTION_TYPE_CHEMICAL_MUNITIONS",
		4:  "AMMO_RESTRICTION_TYPE_NUCLEAR_MUNITIONS",
		5:  "AMMO_RESTRICTION_TYPE_WHITE_PHOSPHORUS_MUNITIONS",
		6:  "AMMO_RESTRICTION_TYPE_ILLUMINATION_MUNITIONS",
		7:  "AMMO_RESTRICTION_TYPE_TERMINAL_HOMING_MUNITIONS",
		8:  "AMMO_RESTRICTION_TYPE_FASCAM_MUNITIONS",
		9:  "AMMO_RESTRICTION_TYPE_SMOKE_MUNITIONS",
		10: "AMMO_RESTRICTION_TYPE_ALL_MUNITIONS",
	}
	AmmoRestrictionType_value = map[string]int32{
		"AMMO_RESTRICTION_TYPE_INVALID":                         0,
		"AMMO_RESTRICTION_TYPE_HIGH_EXPLOSIVE_MUNITIONS":        1,
		"AMMO_RESTRICTION_TYPE_IMPROVED_CONVENTIONAL_MUNITIONS": 2,
		"AMMO_RESTRICTION_TYPE_CHEMICAL_MUNITIONS":              3,
		"AMMO_RESTRICTION_TYPE_NUCLEAR_MUNITIONS":               4,
		"AMMO_RESTRICTION_TYPE_WHITE_PHOSPHORUS_MUNITIONS":      5,
		"AMMO_RESTRICTION_TYPE_ILLUMINATION_MUNITIONS":          6,
		"AMMO_RESTRICTION_TYPE_TERMINAL_HOMING_MUNITIONS":       7,
		"AMMO_RESTRICTION_TYPE_FASCAM_MUNITIONS":                8,
		"AMMO_RESTRICTION_TYPE_SMOKE_MUNITIONS":                 9,
		"AMMO_RESTRICTION_TYPE_ALL_MUNITIONS":                   10,
	}
)

func (x AmmoRestrictionType) Enum() *AmmoRestrictionType {
	p := new(AmmoRestrictionType)
	*p = x
	return p
}

func (x AmmoRestrictionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AmmoRestrictionType) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes[5].Descriptor()
}

func (AmmoRestrictionType) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes[5]
}

func (x AmmoRestrictionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AmmoRestrictionType.Descriptor instead.
func (AmmoRestrictionType) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{5}
}

type RestrictiveMeasureType int32

const (
	RestrictiveMeasureType_RESTRICTIVE_MEASURE_TYPE_INVALID            RestrictiveMeasureType = 0
	RestrictiveMeasureType_RESTRICTIVE_MEASURE_TYPE_STAY_INSIDE_AREA   RestrictiveMeasureType = 1
	RestrictiveMeasureType_RESTRICTIVE_MEASURE_TYPE_STAY_OUTSIDE_AREA  RestrictiveMeasureType = 2
	RestrictiveMeasureType_RESTRICTIVE_MEASURE_TYPE_STAY_ABOVE_AREA    RestrictiveMeasureType = 3
	RestrictiveMeasureType_RESTRICTIVE_MEASURE_TYPE_STAY_BELOW_AREA    RestrictiveMeasureType = 4
	RestrictiveMeasureType_RESTRICTIVE_MEASURE_TYPE_STAY_NORTH_OF_LINE RestrictiveMeasureType = 5
	RestrictiveMeasureType_RESTRICTIVE_MEASURE_TYPE_STAY_EAST_OF_LINE  RestrictiveMeasureType = 6
	RestrictiveMeasureType_RESTRICTIVE_MEASURE_TYPE_STAY_SOUTH_OF_LINE RestrictiveMeasureType = 7
	RestrictiveMeasureType_RESTRICTIVE_MEASURE_TYPE_STAY_WEST_OF_LINE  RestrictiveMeasureType = 8
)

// Enum value maps for RestrictiveMeasureType.
var (
	RestrictiveMeasureType_name = map[int32]string{
		0: "RESTRICTIVE_MEASURE_TYPE_INVALID",
		1: "RESTRICTIVE_MEASURE_TYPE_STAY_INSIDE_AREA",
		2: "RESTRICTIVE_MEASURE_TYPE_STAY_OUTSIDE_AREA",
		3: "RESTRICTIVE_MEASURE_TYPE_STAY_ABOVE_AREA",
		4: "RESTRICTIVE_MEASURE_TYPE_STAY_BELOW_AREA",
		5: "RESTRICTIVE_MEASURE_TYPE_STAY_NORTH_OF_LINE",
		6: "RESTRICTIVE_MEASURE_TYPE_STAY_EAST_OF_LINE",
		7: "RESTRICTIVE_MEASURE_TYPE_STAY_SOUTH_OF_LINE",
		8: "RESTRICTIVE_MEASURE_TYPE_STAY_WEST_OF_LINE",
	}
	RestrictiveMeasureType_value = map[string]int32{
		"RESTRICTIVE_MEASURE_TYPE_INVALID":            0,
		"RESTRICTIVE_MEASURE_TYPE_STAY_INSIDE_AREA":   1,
		"RESTRICTIVE_MEASURE_TYPE_STAY_OUTSIDE_AREA":  2,
		"RESTRICTIVE_MEASURE_TYPE_STAY_ABOVE_AREA":    3,
		"RESTRICTIVE_MEASURE_TYPE_STAY_BELOW_AREA":    4,
		"RESTRICTIVE_MEASURE_TYPE_STAY_NORTH_OF_LINE": 5,
		"RESTRICTIVE_MEASURE_TYPE_STAY_EAST_OF_LINE":  6,
		"RESTRICTIVE_MEASURE_TYPE_STAY_SOUTH_OF_LINE": 7,
		"RESTRICTIVE_MEASURE_TYPE_STAY_WEST_OF_LINE":  8,
	}
)

func (x RestrictiveMeasureType) Enum() *RestrictiveMeasureType {
	p := new(RestrictiveMeasureType)
	*p = x
	return p
}

func (x RestrictiveMeasureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RestrictiveMeasureType) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes[6].Descriptor()
}

func (RestrictiveMeasureType) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes[6]
}

func (x RestrictiveMeasureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RestrictiveMeasureType.Descriptor instead.
func (RestrictiveMeasureType) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{6}
}

type MCMDetailType int32

const (
	MCMDetailType_MCM_DETAIL_TYPE_INVALID                 MCMDetailType = 0
	MCMDetailType_MCM_DETAIL_TYPE_NAMED_AREA_OF_INTEREST  MCMDetailType = 1
	MCMDetailType_MCM_DETAIL_TYPE_TARGET_AREA_OF_INTEREST MCMDetailType = 2
)

// Enum value maps for MCMDetailType.
var (
	MCMDetailType_name = map[int32]string{
		0: "MCM_DETAIL_TYPE_INVALID",
		1: "MCM_DETAIL_TYPE_NAMED_AREA_OF_INTEREST",
		2: "MCM_DETAIL_TYPE_TARGET_AREA_OF_INTEREST",
	}
	MCMDetailType_value = map[string]int32{
		"MCM_DETAIL_TYPE_INVALID":                 0,
		"MCM_DETAIL_TYPE_NAMED_AREA_OF_INTEREST":  1,
		"MCM_DETAIL_TYPE_TARGET_AREA_OF_INTEREST": 2,
	}
)

func (x MCMDetailType) Enum() *MCMDetailType {
	p := new(MCMDetailType)
	*p = x
	return p
}

func (x MCMDetailType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MCMDetailType) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes[7].Descriptor()
}

func (MCMDetailType) Type() protoreflect.EnumType {
	return &file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes[7]
}

func (x MCMDetailType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MCMDetailType.Descriptor instead.
func (MCMDetailType) EnumDescriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{7}
}

// A component that describes a geo-entity.
type GeoDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type GeoType `protobuf:"varint,1,opt,name=type,proto3,enum=anduril.entitymanager.v1.GeoType" json:"type,omitempty"`
	// any additional type specific details
	//
	// Types that are assignable to TypeDetails:
	//
	//	*GeoDetails_Emergency
	//	*GeoDetails_Fscm
	//	*GeoDetails_ControlArea
	//	*GeoDetails_Acm
	//	*GeoDetails_Mcm
	TypeDetails   isGeoDetails_TypeDetails `protobuf_oneof:"type_details"`
	VisualDetails *GeoVisualDetails        `protobuf:"bytes,3,opt,name=visual_details,json=visualDetails,proto3" json:"visual_details,omitempty"`
}

func (x *GeoDetails) Reset() {
	*x = GeoDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoDetails) ProtoMessage() {}

func (x *GeoDetails) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoDetails.ProtoReflect.Descriptor instead.
func (*GeoDetails) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{0}
}

func (x *GeoDetails) GetType() GeoType {
	if x != nil {
		return x.Type
	}
	return GeoType_GEO_TYPE_INVALID
}

func (m *GeoDetails) GetTypeDetails() isGeoDetails_TypeDetails {
	if m != nil {
		return m.TypeDetails
	}
	return nil
}

func (x *GeoDetails) GetEmergency() *EmergencyDetails {
	if x, ok := x.GetTypeDetails().(*GeoDetails_Emergency); ok {
		return x.Emergency
	}
	return nil
}

func (x *GeoDetails) GetFscm() *FSCMDetails {
	if x, ok := x.GetTypeDetails().(*GeoDetails_Fscm); ok {
		return x.Fscm
	}
	return nil
}

func (x *GeoDetails) GetControlArea() *ControlAreaDetails {
	if x, ok := x.GetTypeDetails().(*GeoDetails_ControlArea); ok {
		return x.ControlArea
	}
	return nil
}

func (x *GeoDetails) GetAcm() *ACMDetails {
	if x, ok := x.GetTypeDetails().(*GeoDetails_Acm); ok {
		return x.Acm
	}
	return nil
}

func (x *GeoDetails) GetMcm() *MCMDetails {
	if x, ok := x.GetTypeDetails().(*GeoDetails_Mcm); ok {
		return x.Mcm
	}
	return nil
}

func (x *GeoDetails) GetVisualDetails() *GeoVisualDetails {
	if x != nil {
		return x.VisualDetails
	}
	return nil
}

type isGeoDetails_TypeDetails interface {
	isGeoDetails_TypeDetails()
}

type GeoDetails_Emergency struct {
	Emergency *EmergencyDetails `protobuf:"bytes,2,opt,name=emergency,proto3,oneof"`
}

type GeoDetails_Fscm struct {
	Fscm *FSCMDetails `protobuf:"bytes,4,opt,name=fscm,proto3,oneof"`
}

type GeoDetails_ControlArea struct {
	ControlArea *ControlAreaDetails `protobuf:"bytes,5,opt,name=control_area,json=controlArea,proto3,oneof"`
}

type GeoDetails_Acm struct {
	Acm *ACMDetails `protobuf:"bytes,6,opt,name=acm,proto3,oneof"`
}

type GeoDetails_Mcm struct {
	Mcm *MCMDetails `protobuf:"bytes,7,opt,name=mcm,proto3,oneof"`
}

func (*GeoDetails_Emergency) isGeoDetails_TypeDetails() {}

func (*GeoDetails_Fscm) isGeoDetails_TypeDetails() {}

func (*GeoDetails_ControlArea) isGeoDetails_TypeDetails() {}

func (*GeoDetails_Acm) isGeoDetails_TypeDetails() {}

func (*GeoDetails_Mcm) isGeoDetails_TypeDetails() {}

// Details specific to a geo-entity of emergency type.
type EmergencyDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmergencyType     EmergencyType `protobuf:"varint,1,opt,name=emergency_type,json=emergencyType,proto3,enum=anduril.entitymanager.v1.EmergencyType" json:"emergency_type,omitempty"`
	PersonnelInvolved uint32        `protobuf:"varint,2,opt,name=personnel_involved,json=personnelInvolved,proto3" json:"personnel_involved,omitempty"`
}

func (x *EmergencyDetails) Reset() {
	*x = EmergencyDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmergencyDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmergencyDetails) ProtoMessage() {}

func (x *EmergencyDetails) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmergencyDetails.ProtoReflect.Descriptor instead.
func (*EmergencyDetails) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{1}
}

func (x *EmergencyDetails) GetEmergencyType() EmergencyType {
	if x != nil {
		return x.EmergencyType
	}
	return EmergencyType_EMERGENCY_TYPE_INVALID
}

func (x *EmergencyDetails) GetPersonnelInvolved() uint32 {
	if x != nil {
		return x.PersonnelInvolved
	}
	return 0
}

// A component that describes the shape of a geo-entity.
type GeoShape struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// point, line_string, and polygon are convertible as a subset of GeoJSON
	//
	// Types that are assignable to Shape:
	//
	//	*GeoShape_Point
	//	*GeoShape_Line
	//	*GeoShape_Polygon
	//	*GeoShape_Ellipse
	//	*GeoShape_Ellipsoid
	Shape isGeoShape_Shape `protobuf_oneof:"shape"`
}

func (x *GeoShape) Reset() {
	*x = GeoShape{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoShape) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoShape) ProtoMessage() {}

func (x *GeoShape) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoShape.ProtoReflect.Descriptor instead.
func (*GeoShape) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{2}
}

func (m *GeoShape) GetShape() isGeoShape_Shape {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (x *GeoShape) GetPoint() *GeoPoint {
	if x, ok := x.GetShape().(*GeoShape_Point); ok {
		return x.Point
	}
	return nil
}

func (x *GeoShape) GetLine() *GeoLine {
	if x, ok := x.GetShape().(*GeoShape_Line); ok {
		return x.Line
	}
	return nil
}

func (x *GeoShape) GetPolygon() *GeoPolygon {
	if x, ok := x.GetShape().(*GeoShape_Polygon); ok {
		return x.Polygon
	}
	return nil
}

func (x *GeoShape) GetEllipse() *GeoEllipse {
	if x, ok := x.GetShape().(*GeoShape_Ellipse); ok {
		return x.Ellipse
	}
	return nil
}

func (x *GeoShape) GetEllipsoid() *GeoEllipsoid {
	if x, ok := x.GetShape().(*GeoShape_Ellipsoid); ok {
		return x.Ellipsoid
	}
	return nil
}

type isGeoShape_Shape interface {
	isGeoShape_Shape()
}

type GeoShape_Point struct {
	Point *GeoPoint `protobuf:"bytes,1,opt,name=point,proto3,oneof"`
}

type GeoShape_Line struct {
	Line *GeoLine `protobuf:"bytes,2,opt,name=line,proto3,oneof"`
}

type GeoShape_Polygon struct {
	Polygon *GeoPolygon `protobuf:"bytes,3,opt,name=polygon,proto3,oneof"`
}

type GeoShape_Ellipse struct {
	Ellipse *GeoEllipse `protobuf:"bytes,4,opt,name=ellipse,proto3,oneof"`
}

type GeoShape_Ellipsoid struct {
	Ellipsoid *GeoEllipsoid `protobuf:"bytes,5,opt,name=ellipsoid,proto3,oneof"`
}

func (*GeoShape_Point) isGeoShape_Shape() {}

func (*GeoShape_Line) isGeoShape_Shape() {}

func (*GeoShape_Polygon) isGeoShape_Shape() {}

func (*GeoShape_Ellipse) isGeoShape_Shape() {}

func (*GeoShape_Ellipsoid) isGeoShape_Shape() {}

// A point shaped geo-entity.
// See https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.2
type GeoPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position *Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *GeoPoint) Reset() {
	*x = GeoPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoPoint) ProtoMessage() {}

func (x *GeoPoint) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoPoint.ProtoReflect.Descriptor instead.
func (*GeoPoint) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{3}
}

func (x *GeoPoint) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

// A line shaped geo-entity.
// See https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.4
type GeoLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positions []*Position `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (x *GeoLine) Reset() {
	*x = GeoLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoLine) ProtoMessage() {}

func (x *GeoLine) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoLine.ProtoReflect.Descriptor instead.
func (*GeoLine) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{4}
}

func (x *GeoLine) GetPositions() []*Position {
	if x != nil {
		return x.Positions
	}
	return nil
}

// A polygon shaped geo-entity.
// See https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.6, only canonical representations accepted
type GeoPolygon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An array of LinearRings where the first item is the exterior ring and subsequent items are interior rings.
	// For a good introduction read (https://macwright.com/2015/03/23/geojson-second-bite.html#polygons)
	Rings []*LinearRing `protobuf:"bytes,1,rep,name=rings,proto3" json:"rings,omitempty"`
	// An extension hint that this polygon is a rectangle. When true this implies several things:
	// * exactly 1 linear ring with 5 points (starting corner, 3 other corners and start again)
	// * each point has the same altitude corresponding with the plane of the rectangle
	// * each point has the same height (either all present and equal, or all not present)
	IsRectangle bool `protobuf:"varint,2,opt,name=is_rectangle,json=isRectangle,proto3" json:"is_rectangle,omitempty"`
}

func (x *GeoPolygon) Reset() {
	*x = GeoPolygon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoPolygon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoPolygon) ProtoMessage() {}

func (x *GeoPolygon) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoPolygon.ProtoReflect.Descriptor instead.
func (*GeoPolygon) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{5}
}

func (x *GeoPolygon) GetRings() []*LinearRing {
	if x != nil {
		return x.Rings
	}
	return nil
}

func (x *GeoPolygon) GetIsRectangle() bool {
	if x != nil {
		return x.IsRectangle
	}
	return false
}

// An ellipse shaped geo-entity.
// For a circle, the major and minor axis would be the same values.
// This shape is NOT Geo-JSON compatible.
type GeoEllipse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines the distance from the center point of the ellipse to the furthest distance on the perimeter in meters.
	SemiMajorAxisM *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=semi_major_axis_m,json=semiMajorAxisM,proto3" json:"semi_major_axis_m,omitempty"`
	// Defines the distance from the center point of the ellipse to the shortest distance on the perimeter in meters.
	SemiMinorAxisM *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=semi_minor_axis_m,json=semiMinorAxisM,proto3" json:"semi_minor_axis_m,omitempty"`
	// The orientation of the semi-major relative to true north in degrees from clockwise: 0-180 due to symmetry across the semi-minor axis.
	OrientationD *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=orientation_d,json=orientationD,proto3" json:"orientation_d,omitempty"`
	// Optional height above entity position to extrude in meters. A non-zero value creates an elliptic cylinder
	HeightM *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=height_m,json=heightM,proto3" json:"height_m,omitempty"`
}

func (x *GeoEllipse) Reset() {
	*x = GeoEllipse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoEllipse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoEllipse) ProtoMessage() {}

func (x *GeoEllipse) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoEllipse.ProtoReflect.Descriptor instead.
func (*GeoEllipse) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{6}
}

func (x *GeoEllipse) GetSemiMajorAxisM() *wrapperspb.DoubleValue {
	if x != nil {
		return x.SemiMajorAxisM
	}
	return nil
}

func (x *GeoEllipse) GetSemiMinorAxisM() *wrapperspb.DoubleValue {
	if x != nil {
		return x.SemiMinorAxisM
	}
	return nil
}

func (x *GeoEllipse) GetOrientationD() *wrapperspb.DoubleValue {
	if x != nil {
		return x.OrientationD
	}
	return nil
}

func (x *GeoEllipse) GetHeightM() *wrapperspb.DoubleValue {
	if x != nil {
		return x.HeightM
	}
	return nil
}

// An ellipsoid shaped geo-entity.
// Principal axis lengths are defined in entity body space
// This shape is NOT Geo-JSON compatible.
type GeoEllipsoid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines the distance from the center point to the surface along the forward axis
	ForwardAxisM *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=forward_axis_m,json=forwardAxisM,proto3" json:"forward_axis_m,omitempty"`
	// Defines the distance from the center point to the surface along the side axis
	SideAxisM *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=side_axis_m,json=sideAxisM,proto3" json:"side_axis_m,omitempty"`
	// Defines the distance from the center point to the surface along the up axis
	UpAxisM *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=up_axis_m,json=upAxisM,proto3" json:"up_axis_m,omitempty"`
}

func (x *GeoEllipsoid) Reset() {
	*x = GeoEllipsoid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoEllipsoid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoEllipsoid) ProtoMessage() {}

func (x *GeoEllipsoid) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoEllipsoid.ProtoReflect.Descriptor instead.
func (*GeoEllipsoid) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{7}
}

func (x *GeoEllipsoid) GetForwardAxisM() *wrapperspb.DoubleValue {
	if x != nil {
		return x.ForwardAxisM
	}
	return nil
}

func (x *GeoEllipsoid) GetSideAxisM() *wrapperspb.DoubleValue {
	if x != nil {
		return x.SideAxisM
	}
	return nil
}

func (x *GeoEllipsoid) GetUpAxisM() *wrapperspb.DoubleValue {
	if x != nil {
		return x.UpAxisM
	}
	return nil
}

// A closed ring of points. The first and last point must be the same.
type LinearRing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: do not use, use positions instead
	//
	// Deprecated: Marked as deprecated in anduril/entitymanager/v1/geoentity.pub.proto.
	Points    []*Position           `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	Positions []*GeoPolygonPosition `protobuf:"bytes,2,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (x *LinearRing) Reset() {
	*x = LinearRing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinearRing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinearRing) ProtoMessage() {}

func (x *LinearRing) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinearRing.ProtoReflect.Descriptor instead.
func (*LinearRing) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{8}
}

// Deprecated: Marked as deprecated in anduril/entitymanager/v1/geoentity.pub.proto.
func (x *LinearRing) GetPoints() []*Position {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *LinearRing) GetPositions() []*GeoPolygonPosition {
	if x != nil {
		return x.Positions
	}
	return nil
}

// A position in a GeoPolygon with an optional extruded height.
type GeoPolygonPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// base position. if no altitude set, its on the ground.
	Position *Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	// optional height above base position to extrude in meters.
	// for a given polygon, all points should have a height or none of them.
	// strictly GeoJSON compatible polygons will not have this set.
	HeightM *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=height_m,json=heightM,proto3" json:"height_m,omitempty"`
}

func (x *GeoPolygonPosition) Reset() {
	*x = GeoPolygonPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoPolygonPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoPolygonPosition) ProtoMessage() {}

func (x *GeoPolygonPosition) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoPolygonPosition.ProtoReflect.Descriptor instead.
func (*GeoPolygonPosition) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{9}
}

func (x *GeoPolygonPosition) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *GeoPolygonPosition) GetHeightM() *wrapperspb.FloatValue {
	if x != nil {
		return x.HeightM
	}
	return nil
}

// Details specific to displaying a geo-entity
type GeoVisualDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A string describing the fill color of a geo-entity.
	FillColor *_type.Color `protobuf:"bytes,1,opt,name=fill_color,json=fillColor,proto3" json:"fill_color,omitempty"`
	// A string describing the line color of a geo-entity.
	LineColor *_type.Color `protobuf:"bytes,2,opt,name=line_color,json=lineColor,proto3" json:"line_color,omitempty"`
}

func (x *GeoVisualDetails) Reset() {
	*x = GeoVisualDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoVisualDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoVisualDetails) ProtoMessage() {}

func (x *GeoVisualDetails) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoVisualDetails.ProtoReflect.Descriptor instead.
func (*GeoVisualDetails) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{10}
}

func (x *GeoVisualDetails) GetFillColor() *_type.Color {
	if x != nil {
		return x.FillColor
	}
	return nil
}

func (x *GeoVisualDetails) GetLineColor() *_type.Color {
	if x != nil {
		return x.LineColor
	}
	return nil
}

// Details specific to a geo-entity of Fire Support Coordination Measure (FSCM) type
type FSCMDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FscmType FSCMDetailType `protobuf:"varint,1,opt,name=fscm_type,json=fscmType,proto3,enum=anduril.entitymanager.v1.FSCMDetailType" json:"fscm_type,omitempty"`
	// Used for loosely typed associations, such as assignment to a specific fires unit
	// Limit to 150 characters
	FscmDescription string           `protobuf:"bytes,2,opt,name=fscm_description,json=fscmDescription,proto3" json:"fscm_description,omitempty"`
	FiringAuthority *FiringAuthority `protobuf:"bytes,3,opt,name=firing_authority,json=firingAuthority,proto3" json:"firing_authority,omitempty"`
	// Deprecated: Marked as deprecated in anduril/entitymanager/v1/geoentity.pub.proto.
	AmmoRestrictionType    AmmoRestrictionType    `protobuf:"varint,4,opt,name=ammo_restriction_type,json=ammoRestrictionType,proto3,enum=anduril.entitymanager.v1.AmmoRestrictionType" json:"ammo_restriction_type,omitempty"`
	RestrictiveMeasureType RestrictiveMeasureType `protobuf:"varint,5,opt,name=restrictive_measure_type,json=restrictiveMeasureType,proto3,enum=anduril.entitymanager.v1.RestrictiveMeasureType" json:"restrictive_measure_type,omitempty"`
	AmmoRestrictTypes      []AmmoRestrictionType  `protobuf:"varint,6,rep,packed,name=ammo_restrict_types,json=ammoRestrictTypes,proto3,enum=anduril.entitymanager.v1.AmmoRestrictionType" json:"ammo_restrict_types,omitempty"`
	// Used to indicate distinction between an FSCM applying to either air or ground, never both
	IsGround bool `protobuf:"varint,7,opt,name=is_ground,json=isGround,proto3" json:"is_ground,omitempty"`
}

func (x *FSCMDetails) Reset() {
	*x = FSCMDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FSCMDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FSCMDetails) ProtoMessage() {}

func (x *FSCMDetails) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FSCMDetails.ProtoReflect.Descriptor instead.
func (*FSCMDetails) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{11}
}

func (x *FSCMDetails) GetFscmType() FSCMDetailType {
	if x != nil {
		return x.FscmType
	}
	return FSCMDetailType_FSCM_DETAIL_TYPE_INVALID
}

func (x *FSCMDetails) GetFscmDescription() string {
	if x != nil {
		return x.FscmDescription
	}
	return ""
}

func (x *FSCMDetails) GetFiringAuthority() *FiringAuthority {
	if x != nil {
		return x.FiringAuthority
	}
	return nil
}

// Deprecated: Marked as deprecated in anduril/entitymanager/v1/geoentity.pub.proto.
func (x *FSCMDetails) GetAmmoRestrictionType() AmmoRestrictionType {
	if x != nil {
		return x.AmmoRestrictionType
	}
	return AmmoRestrictionType_AMMO_RESTRICTION_TYPE_INVALID
}

func (x *FSCMDetails) GetRestrictiveMeasureType() RestrictiveMeasureType {
	if x != nil {
		return x.RestrictiveMeasureType
	}
	return RestrictiveMeasureType_RESTRICTIVE_MEASURE_TYPE_INVALID
}

func (x *FSCMDetails) GetAmmoRestrictTypes() []AmmoRestrictionType {
	if x != nil {
		return x.AmmoRestrictTypes
	}
	return nil
}

func (x *FSCMDetails) GetIsGround() bool {
	if x != nil {
		return x.IsGround
	}
	return false
}

type ACMDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcmType ACMDetailType `protobuf:"varint,1,opt,name=acm_type,json=acmType,proto3,enum=anduril.entitymanager.v1.ACMDetailType" json:"acm_type,omitempty"`
	// Used for loosely typed associations, such as assignment to a specific fires unit
	// Limit to 150 characters
	AcmDescription string `protobuf:"bytes,2,opt,name=acm_description,json=acmDescription,proto3" json:"acm_description,omitempty"`
}

func (x *ACMDetails) Reset() {
	*x = ACMDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACMDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACMDetails) ProtoMessage() {}

func (x *ACMDetails) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACMDetails.ProtoReflect.Descriptor instead.
func (*ACMDetails) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{12}
}

func (x *ACMDetails) GetAcmType() ACMDetailType {
	if x != nil {
		return x.AcmType
	}
	return ACMDetailType_ACM_DETAIL_TYPE_INVALID
}

func (x *ACMDetails) GetAcmDescription() string {
	if x != nil {
		return x.AcmDescription
	}
	return ""
}

type MCMDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	McmType MCMDetailType `protobuf:"varint,1,opt,name=mcm_type,json=mcmType,proto3,enum=anduril.entitymanager.v1.MCMDetailType" json:"mcm_type,omitempty"`
	// Used for loosely typed associations, such as assignment to a specific fires unit
	// Limit to 150 characters
	McmDescription string `protobuf:"bytes,2,opt,name=mcm_description,json=mcmDescription,proto3" json:"mcm_description,omitempty"`
}

func (x *MCMDetails) Reset() {
	*x = MCMDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MCMDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCMDetails) ProtoMessage() {}

func (x *MCMDetails) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCMDetails.ProtoReflect.Descriptor instead.
func (*MCMDetails) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{13}
}

func (x *MCMDetails) GetMcmType() MCMDetailType {
	if x != nil {
		return x.McmType
	}
	return MCMDetailType_MCM_DETAIL_TYPE_INVALID
}

func (x *MCMDetails) GetMcmDescription() string {
	if x != nil {
		return x.McmDescription
	}
	return ""
}

// Lists the entities that have authority to execute fires into, or through, this FSCM
type FiringAuthority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityIds []string `protobuf:"bytes,1,rep,name=entity_ids,json=entityIds,proto3" json:"entity_ids,omitempty"`
}

func (x *FiringAuthority) Reset() {
	*x = FiringAuthority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FiringAuthority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FiringAuthority) ProtoMessage() {}

func (x *FiringAuthority) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FiringAuthority.ProtoReflect.Descriptor instead.
func (*FiringAuthority) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{14}
}

func (x *FiringAuthority) GetEntityIds() []string {
	if x != nil {
		return x.EntityIds
	}
	return nil
}

// Details specific to a geo-entity of the GEO_TYPE_CONTROL_AREA type,
// representing an autonomous asset Control Area.
type ControlAreaDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ControlAreaType `protobuf:"varint,1,opt,name=type,proto3,enum=anduril.entitymanager.v1.ControlAreaType" json:"type,omitempty"`
}

func (x *ControlAreaDetails) Reset() {
	*x = ControlAreaDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlAreaDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlAreaDetails) ProtoMessage() {}

func (x *ControlAreaDetails) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlAreaDetails.ProtoReflect.Descriptor instead.
func (*ControlAreaDetails) Descriptor() ([]byte, []int) {
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP(), []int{15}
}

func (x *ControlAreaDetails) GetType() ControlAreaType {
	if x != nil {
		return x.Type
	}
	return ControlAreaType_CONTROL_AREA_TYPE_INVALID
}

var File_anduril_entitymanager_v1_geoentity_pub_proto protoreflect.FileDescriptor

var file_anduril_entitymanager_v1_geoentity_pub_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x2b, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x75, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xf6, 0x03, 0x0a, 0x0a, 0x47, 0x65, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x65, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x09, 0x65, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3b, 0x0a, 0x04, 0x66, 0x73, 0x63, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x53, 0x43, 0x4d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x04, 0x66, 0x73,
	0x63, 0x6d, 0x12, 0x51, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x41, 0x72, 0x65, 0x61, 0x12, 0x38, 0x0a, 0x03, 0x61, 0x63, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x43,
	0x4d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6d, 0x12,
	0x38, 0x0a, 0x03, 0x6d, 0x63, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x43, 0x4d, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x63, 0x6d, 0x12, 0x51, 0x0a, 0x0e, 0x76, 0x69, 0x73,
	0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f,
	0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0d, 0x76,
	0x69, 0x73, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x91, 0x01, 0x0a,
	0x10, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x22, 0xd4, 0x02, 0x0a, 0x08, 0x47, 0x65, 0x6f, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12, 0x3a, 0x0a,
	0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x70, 0x6f, 0x6c,
	0x79, 0x67, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x07, 0x65, 0x6c, 0x6c, 0x69, 0x70, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x6f, 0x45, 0x6c, 0x6c, 0x69, 0x70, 0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x65,
	0x6c, 0x6c, 0x69, 0x70, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x65, 0x6c, 0x6c, 0x69, 0x70, 0x73,
	0x6f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x45, 0x6c, 0x6c, 0x69, 0x70, 0x73, 0x6f, 0x69,
	0x64, 0x48, 0x00, 0x52, 0x09, 0x65, 0x6c, 0x6c, 0x69, 0x70, 0x73, 0x6f, 0x69, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x08, 0x47, 0x65, 0x6f, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x07, 0x47, 0x65, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x40,
	0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x6b, 0x0a, 0x0a, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x05, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x52,
	0x69, 0x6e, 0x67, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0x9a, 0x02,
	0x0a, 0x0a, 0x47, 0x65, 0x6f, 0x45, 0x6c, 0x6c, 0x69, 0x70, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x11,
	0x73, 0x65, 0x6d, 0x69, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x6d, 0x69, 0x4d, 0x61, 0x6a, 0x6f, 0x72,
	0x41, 0x78, 0x69, 0x73, 0x4d, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x65, 0x6d, 0x69, 0x5f, 0x6d, 0x69,
	0x6e, 0x6f, 0x72, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x73, 0x65, 0x6d, 0x69, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x41, 0x78, 0x69, 0x73, 0x4d, 0x12, 0x41,
	0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x12, 0x37, 0x0a, 0x08, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x22, 0xca, 0x01, 0x0a, 0x0c, 0x47,
	0x65, 0x6f, 0x45, 0x6c, 0x6c, 0x69, 0x70, 0x73, 0x6f, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x41, 0x78, 0x69, 0x73, 0x4d, 0x12,
	0x3c, 0x0a, 0x0b, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x73, 0x69, 0x64, 0x65, 0x41, 0x78, 0x69, 0x73, 0x4d, 0x12, 0x38, 0x0a,
	0x09, 0x75, 0x70, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x75, 0x70, 0x41, 0x78, 0x69, 0x73, 0x4d, 0x22, 0x98, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x65,
	0x61, 0x72, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f,
	0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x4d, 0x22, 0x7a, 0x0a, 0x10, 0x47, 0x65, 0x6f, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x09,
	0x66, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x0a, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xa4, 0x04,
	0x0a, 0x0b, 0x46, 0x53, 0x43, 0x4d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x45, 0x0a,
	0x09, 0x66, 0x73, 0x63, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x53, 0x43, 0x4d,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x73, 0x63, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x73, 0x63, 0x6d, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x66, 0x73, 0x63, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x54, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x15, 0x61, 0x6d, 0x6d, 0x6f, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6d, 0x6d, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x61, 0x6d, 0x6d, 0x6f, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6a, 0x0a, 0x18,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x16, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x13, 0x61, 0x6d, 0x6d, 0x6f,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6d, 0x6d, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x61, 0x6d, 0x6d, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x22, 0x79, 0x0a, 0x0a, 0x41, 0x43, 0x4d, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x42, 0x0a, 0x08, 0x61, 0x63, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x43, 0x4d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x61,
	0x63, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x6d, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x61, 0x63, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x79, 0x0a, 0x0a, 0x4d, 0x43, 0x4d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x42, 0x0a,
	0x08, 0x6d, 0x63, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x43, 0x4d, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x63, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x63, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x63, 0x6d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x0f, 0x46, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x22, 0x53, 0x0a, 0x12,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x2a, 0xe9, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x47, 0x45, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x45, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x45, 0x4f,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x5a, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x47, 0x45, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x45, 0x52, 0x47,
	0x45, 0x4e, 0x43, 0x59, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x4f, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x53, 0x43, 0x4d, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x45, 0x4f,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x47, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x45, 0x4f, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x41, 0x52, 0x45, 0x41,
	0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x45, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x55, 0x4c, 0x4c, 0x53, 0x45, 0x59, 0x45, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x45, 0x4f,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x4d, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x47,
	0x45, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x43, 0x4d, 0x10, 0x09, 0x2a, 0xb2, 0x02,
	0x0a, 0x0d, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x45,
	0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x5f, 0x41, 0x49, 0x52, 0x43, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x1f, 0x0a,
	0x1b, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x49, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41,
	0x49, 0x4c, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x4d, 0x45, 0x52, 0x47,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x45,
	0x53, 0x53, 0x45, 0x44, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x22,
	0x0a, 0x1e, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x07, 0x12, 0x22,
	0x0a, 0x1e, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e,
	0x10, 0x08, 0x2a, 0xa1, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x72,
	0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f,
	0x4c, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x5f,
	0x49, 0x4e, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b,
	0x45, 0x45, 0x50, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x20,
	0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x03,
	0x12, 0x2b, 0x0a, 0x27, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x41, 0x52, 0x45, 0x41,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x2b, 0x0a,
	0x27, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x10, 0x06, 0x2a, 0xa1, 0x09, 0x0a, 0x0e, 0x46, 0x53, 0x43, 0x4d, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x53, 0x43,
	0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x53, 0x43, 0x4d, 0x5f,
	0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x44,
	0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x01, 0x12, 0x21, 0x0a,
	0x1d, 0x46, 0x53, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x02,
	0x12, 0x23, 0x0a, 0x1f, 0x46, 0x53, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x41,
	0x52, 0x45, 0x41, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x46, 0x53, 0x43, 0x4d, 0x5f, 0x44, 0x45,
	0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10,
	0x04, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x53, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f,
	0x41, 0x52, 0x45, 0x41, 0x10, 0x05, 0x12, 0x2f, 0x0a, 0x2b, 0x46, 0x53, 0x43, 0x4d, 0x5f, 0x44,
	0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x49, 0x52, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x06, 0x12, 0x34, 0x0a, 0x30, 0x46, 0x53, 0x43, 0x4d, 0x5f,
	0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x57,
	0x41, 0x52, 0x44, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x48, 0x45, 0x5f,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x07, 0x12, 0x26, 0x0a,
	0x22, 0x46, 0x53, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41,
	0x52, 0x45, 0x41, 0x10, 0x08, 0x12, 0x2a, 0x0a, 0x26, 0x46, 0x53, 0x43, 0x4d, 0x5f, 0x44, 0x45,
	0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x52, 0x4f, 0x4c,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x41, 0x49, 0x53, 0x53, 0x41, 0x4e, 0x43, 0x45, 0x10,
	0x09, 0x12, 0x2b, 0x0a, 0x27, 0x46, 0x53, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x0a, 0x12, 0x30,
	0x0a, 0x2c, 0x46, 0x53, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x0b,
	0x12, 0x22, 0x0a, 0x1e, 0x46, 0x53, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x45, 0x44, 0x5f, 0x5a, 0x4f,
	0x4e, 0x45, 0x10, 0x0c, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x53, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54,
	0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x46,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x2b, 0x0a, 0x27, 0x46, 0x53, 0x43,
	0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52,
	0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x4c, 0x59, 0x5f,
	0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x0e, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x53, 0x43, 0x4d, 0x5f, 0x44,
	0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x4f,
	0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x48, 0x41, 0x5a, 0x41, 0x52, 0x44, 0x10, 0x0f,
	0x12, 0x27, 0x0a, 0x23, 0x46, 0x53, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x52, 0x45, 0x41,
	0x5f, 0x48, 0x41, 0x5a, 0x41, 0x52, 0x44, 0x10, 0x10, 0x12, 0x2f, 0x0a, 0x2b, 0x46, 0x53, 0x43,
	0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x11, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x53,
	0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x49, 0x52, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x49, 0x44, 0x4f, 0x52, 0x10, 0x12, 0x12, 0x2a, 0x0a,
	0x26, 0x46, 0x53, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x49,
	0x52, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x13, 0x12, 0x37, 0x0a, 0x33, 0x46, 0x53, 0x43,
	0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f,
	0x4f, 0x52, 0x44, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45,
	0x10, 0x14, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x53, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f,
	0x4c, 0x49, 0x4e, 0x45, 0x10, 0x15, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x53, 0x43, 0x4d, 0x5f, 0x44,
	0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41,
	0x52, 0x44, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x16, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x53, 0x43,
	0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49,
	0x52, 0x45, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10,
	0x17, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x53, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x44, 0x45,
	0x50, 0x41, 0x52, 0x54, 0x55, 0x52, 0x45, 0x10, 0x18, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x53, 0x43,
	0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x10, 0x19, 0x12,
	0x36, 0x0a, 0x32, 0x46, 0x53, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x44, 0x45, 0x50, 0x41,
	0x52, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x43, 0x54, 0x10, 0x1a, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x53, 0x43, 0x4d, 0x5f,
	0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5a, 0x4f, 0x4e, 0x45,
	0x5f, 0x4f, 0x46, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x10, 0x1b, 0x2a, 0xe6, 0x09, 0x0a, 0x0d, 0x41,
	0x43, 0x4d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x41, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x4d,
	0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x49, 0x52,
	0x5f, 0x43, 0x4f, 0x52, 0x52, 0x49, 0x44, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x41,
	0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x49, 0x4e, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x41, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52, 0x59,
	0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54,
	0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x43, 0x4d, 0x5f,
	0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54,
	0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c,
	0x5f, 0x43, 0x4f, 0x52, 0x52, 0x49, 0x44, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x3b, 0x0a, 0x37, 0x41,
	0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x41, 0x52, 0x4d, 0x59,
	0x5f, 0x41, 0x49, 0x52, 0x43, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x07, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x43, 0x4d, 0x5f,
	0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54,
	0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x08, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x43, 0x4d, 0x5f,
	0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x49, 0x52, 0x5f,
	0x54, 0x4f, 0x5f, 0x41, 0x49, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x45, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x09, 0x12, 0x35, 0x0a, 0x31, 0x41, 0x43, 0x4d, 0x5f, 0x44,
	0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x49, 0x52, 0x42, 0x4f,
	0x52, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x0a, 0x12, 0x2f,
	0x0a, 0x2b, 0x41, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x49, 0x52, 0x42, 0x4f, 0x52, 0x4e, 0x45, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59,
	0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x0b, 0x12,
	0x2a, 0x0a, 0x26, 0x41, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x41, 0x49, 0x52, 0x5f, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x0c, 0x12, 0x25, 0x0a, 0x21, 0x41,
	0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x4d, 0x42, 0x41, 0x54, 0x5f, 0x41, 0x49, 0x52, 0x5f, 0x50, 0x41, 0x54, 0x52, 0x4f, 0x4c,
	0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10,
	0x0e, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x52, 0x4f, 0x4e, 0x49, 0x43, 0x5f,
	0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x10, 0x0f, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x4d, 0x5f,
	0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x10, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43,
	0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x49,
	0x43, 0x4b, 0x55, 0x50, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x11, 0x12, 0x27, 0x0a, 0x23, 0x41,
	0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x41, 0x49, 0x53, 0x53, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x52,
	0x45, 0x41, 0x10, 0x12, 0x12, 0x31, 0x0a, 0x2d, 0x41, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41,
	0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x13, 0x12, 0x35, 0x0a, 0x31, 0x41, 0x43, 0x4d, 0x5f, 0x44,
	0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x55, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x14, 0x12, 0x30,
	0x0a, 0x2c, 0x41, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x55, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x55, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x5f, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x15,
	0x12, 0x2a, 0x0a, 0x26, 0x41, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4d, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x5f, 0x41, 0x49, 0x52,
	0x43, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x16, 0x12, 0x29, 0x0a, 0x25,
	0x41, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4c, 0x54,
	0x49, 0x54, 0x55, 0x44, 0x45, 0x10, 0x17, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43, 0x4d, 0x5f, 0x44,
	0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x52, 0x44,
	0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x18, 0x12,
	0x36, 0x0a, 0x32, 0x41, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x44, 0x45, 0x4e, 0x53, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x49, 0x52, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x19, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x4d, 0x5f, 0x44,
	0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x46, 0x4c,
	0x59, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x1a, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x4d, 0x5f,
	0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x49, 0x44, 0x4f, 0x52, 0x10, 0x1b, 0x12, 0x23,
	0x0a, 0x1f, 0x41, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x46, 0x4f, 0x52, 0x43,
	0x45, 0x10, 0x1c, 0x2a, 0x9f, 0x04, 0x0a, 0x13, 0x41, 0x6d, 0x6d, 0x6f, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x41,
	0x4d, 0x4d, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x32,
	0x0a, 0x2e, 0x41, 0x4d, 0x4d, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x45, 0x58, 0x50,
	0x4c, 0x4f, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0x01, 0x12, 0x39, 0x0a, 0x35, 0x41, 0x4d, 0x4d, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52,
	0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x52,
	0x4f, 0x56, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x5f, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x2c, 0x0a,
	0x28, 0x41, 0x4d, 0x4d, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x4d, 0x49, 0x43, 0x41, 0x4c, 0x5f,
	0x4d, 0x55, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x41,
	0x4d, 0x4d, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x4d, 0x55, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x04, 0x12, 0x34, 0x0a, 0x30, 0x41, 0x4d, 0x4d, 0x4f,
	0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x53, 0x50, 0x48, 0x4f, 0x52,
	0x55, 0x53, 0x5f, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x05, 0x12, 0x30,
	0x0a, 0x2c, 0x41, 0x4d, 0x4d, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4c, 0x4c, 0x55, 0x4d, 0x49, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x06,
	0x12, 0x33, 0x0a, 0x2f, 0x41, 0x4d, 0x4d, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e,
	0x41, 0x4c, 0x5f, 0x48, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x10, 0x07, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x4d, 0x4d, 0x4f, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x41, 0x53, 0x43, 0x41, 0x4d, 0x5f, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10,
	0x08, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x4d, 0x4d, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4d, 0x4f, 0x4b, 0x45,
	0x5f, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x09, 0x12, 0x27, 0x0a, 0x23,
	0x41, 0x4d, 0x4d, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x10, 0x0a, 0x2a, 0xbb, 0x03, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x59, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41,
	0x52, 0x45, 0x41, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x59, 0x5f, 0x4f, 0x55, 0x54, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41,
	0x52, 0x45, 0x41, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x59, 0x5f, 0x41, 0x42, 0x4f, 0x56, 0x45, 0x5f, 0x41, 0x52, 0x45,
	0x41, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x59, 0x5f, 0x42, 0x45, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10,
	0x04, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x59, 0x5f, 0x4e, 0x4f, 0x52, 0x54, 0x48, 0x5f, 0x4f, 0x46, 0x5f, 0x4c, 0x49, 0x4e, 0x45,
	0x10, 0x05, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x59, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4c, 0x49, 0x4e, 0x45,
	0x10, 0x06, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x59, 0x5f, 0x53, 0x4f, 0x55, 0x54, 0x48, 0x5f, 0x4f, 0x46, 0x5f, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x07, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x59, 0x5f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x08, 0x2a, 0x85, 0x01, 0x0a, 0x0d, 0x4d, 0x43, 0x4d, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54,
	0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x44, 0x5f, 0x41, 0x52, 0x45, 0x41,
	0x5f, 0x4f, 0x46, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x2b,
	0x0a, 0x27, 0x4d, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4f, 0x46,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x10, 0x02, 0x42, 0x89, 0x02, 0x0a, 0x1c,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x11, 0x47, 0x65,
	0x6f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f,
	0x67, 0x75, 0x6e, 0x2d, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x61,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x45, 0x58, 0xaa, 0x02, 0x18,
	0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x18, 0x41, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x5c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x24, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x5c, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x41, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x3a, 0x3a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescOnce sync.Once
	file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescData = file_anduril_entitymanager_v1_geoentity_pub_proto_rawDesc
)

func file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescGZIP() []byte {
	file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescOnce.Do(func() {
		file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescData = protoimpl.X.CompressGZIP(file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescData)
	})
	return file_anduril_entitymanager_v1_geoentity_pub_proto_rawDescData
}

var file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_anduril_entitymanager_v1_geoentity_pub_proto_goTypes = []any{
	(GeoType)(0),                   // 0: anduril.entitymanager.v1.GeoType
	(EmergencyType)(0),             // 1: anduril.entitymanager.v1.EmergencyType
	(ControlAreaType)(0),           // 2: anduril.entitymanager.v1.ControlAreaType
	(FSCMDetailType)(0),            // 3: anduril.entitymanager.v1.FSCMDetailType
	(ACMDetailType)(0),             // 4: anduril.entitymanager.v1.ACMDetailType
	(AmmoRestrictionType)(0),       // 5: anduril.entitymanager.v1.AmmoRestrictionType
	(RestrictiveMeasureType)(0),    // 6: anduril.entitymanager.v1.RestrictiveMeasureType
	(MCMDetailType)(0),             // 7: anduril.entitymanager.v1.MCMDetailType
	(*GeoDetails)(nil),             // 8: anduril.entitymanager.v1.GeoDetails
	(*EmergencyDetails)(nil),       // 9: anduril.entitymanager.v1.EmergencyDetails
	(*GeoShape)(nil),               // 10: anduril.entitymanager.v1.GeoShape
	(*GeoPoint)(nil),               // 11: anduril.entitymanager.v1.GeoPoint
	(*GeoLine)(nil),                // 12: anduril.entitymanager.v1.GeoLine
	(*GeoPolygon)(nil),             // 13: anduril.entitymanager.v1.GeoPolygon
	(*GeoEllipse)(nil),             // 14: anduril.entitymanager.v1.GeoEllipse
	(*GeoEllipsoid)(nil),           // 15: anduril.entitymanager.v1.GeoEllipsoid
	(*LinearRing)(nil),             // 16: anduril.entitymanager.v1.LinearRing
	(*GeoPolygonPosition)(nil),     // 17: anduril.entitymanager.v1.GeoPolygonPosition
	(*GeoVisualDetails)(nil),       // 18: anduril.entitymanager.v1.GeoVisualDetails
	(*FSCMDetails)(nil),            // 19: anduril.entitymanager.v1.FSCMDetails
	(*ACMDetails)(nil),             // 20: anduril.entitymanager.v1.ACMDetails
	(*MCMDetails)(nil),             // 21: anduril.entitymanager.v1.MCMDetails
	(*FiringAuthority)(nil),        // 22: anduril.entitymanager.v1.FiringAuthority
	(*ControlAreaDetails)(nil),     // 23: anduril.entitymanager.v1.ControlAreaDetails
	(*Position)(nil),               // 24: anduril.entitymanager.v1.Position
	(*wrapperspb.DoubleValue)(nil), // 25: google.protobuf.DoubleValue
	(*wrapperspb.FloatValue)(nil),  // 26: google.protobuf.FloatValue
	(*_type.Color)(nil),            // 27: anduril.type.Color
}
var file_anduril_entitymanager_v1_geoentity_pub_proto_depIdxs = []int32{
	0,  // 0: anduril.entitymanager.v1.GeoDetails.type:type_name -> anduril.entitymanager.v1.GeoType
	9,  // 1: anduril.entitymanager.v1.GeoDetails.emergency:type_name -> anduril.entitymanager.v1.EmergencyDetails
	19, // 2: anduril.entitymanager.v1.GeoDetails.fscm:type_name -> anduril.entitymanager.v1.FSCMDetails
	23, // 3: anduril.entitymanager.v1.GeoDetails.control_area:type_name -> anduril.entitymanager.v1.ControlAreaDetails
	20, // 4: anduril.entitymanager.v1.GeoDetails.acm:type_name -> anduril.entitymanager.v1.ACMDetails
	21, // 5: anduril.entitymanager.v1.GeoDetails.mcm:type_name -> anduril.entitymanager.v1.MCMDetails
	18, // 6: anduril.entitymanager.v1.GeoDetails.visual_details:type_name -> anduril.entitymanager.v1.GeoVisualDetails
	1,  // 7: anduril.entitymanager.v1.EmergencyDetails.emergency_type:type_name -> anduril.entitymanager.v1.EmergencyType
	11, // 8: anduril.entitymanager.v1.GeoShape.point:type_name -> anduril.entitymanager.v1.GeoPoint
	12, // 9: anduril.entitymanager.v1.GeoShape.line:type_name -> anduril.entitymanager.v1.GeoLine
	13, // 10: anduril.entitymanager.v1.GeoShape.polygon:type_name -> anduril.entitymanager.v1.GeoPolygon
	14, // 11: anduril.entitymanager.v1.GeoShape.ellipse:type_name -> anduril.entitymanager.v1.GeoEllipse
	15, // 12: anduril.entitymanager.v1.GeoShape.ellipsoid:type_name -> anduril.entitymanager.v1.GeoEllipsoid
	24, // 13: anduril.entitymanager.v1.GeoPoint.position:type_name -> anduril.entitymanager.v1.Position
	24, // 14: anduril.entitymanager.v1.GeoLine.positions:type_name -> anduril.entitymanager.v1.Position
	16, // 15: anduril.entitymanager.v1.GeoPolygon.rings:type_name -> anduril.entitymanager.v1.LinearRing
	25, // 16: anduril.entitymanager.v1.GeoEllipse.semi_major_axis_m:type_name -> google.protobuf.DoubleValue
	25, // 17: anduril.entitymanager.v1.GeoEllipse.semi_minor_axis_m:type_name -> google.protobuf.DoubleValue
	25, // 18: anduril.entitymanager.v1.GeoEllipse.orientation_d:type_name -> google.protobuf.DoubleValue
	25, // 19: anduril.entitymanager.v1.GeoEllipse.height_m:type_name -> google.protobuf.DoubleValue
	25, // 20: anduril.entitymanager.v1.GeoEllipsoid.forward_axis_m:type_name -> google.protobuf.DoubleValue
	25, // 21: anduril.entitymanager.v1.GeoEllipsoid.side_axis_m:type_name -> google.protobuf.DoubleValue
	25, // 22: anduril.entitymanager.v1.GeoEllipsoid.up_axis_m:type_name -> google.protobuf.DoubleValue
	24, // 23: anduril.entitymanager.v1.LinearRing.points:type_name -> anduril.entitymanager.v1.Position
	17, // 24: anduril.entitymanager.v1.LinearRing.positions:type_name -> anduril.entitymanager.v1.GeoPolygonPosition
	24, // 25: anduril.entitymanager.v1.GeoPolygonPosition.position:type_name -> anduril.entitymanager.v1.Position
	26, // 26: anduril.entitymanager.v1.GeoPolygonPosition.height_m:type_name -> google.protobuf.FloatValue
	27, // 27: anduril.entitymanager.v1.GeoVisualDetails.fill_color:type_name -> anduril.type.Color
	27, // 28: anduril.entitymanager.v1.GeoVisualDetails.line_color:type_name -> anduril.type.Color
	3,  // 29: anduril.entitymanager.v1.FSCMDetails.fscm_type:type_name -> anduril.entitymanager.v1.FSCMDetailType
	22, // 30: anduril.entitymanager.v1.FSCMDetails.firing_authority:type_name -> anduril.entitymanager.v1.FiringAuthority
	5,  // 31: anduril.entitymanager.v1.FSCMDetails.ammo_restriction_type:type_name -> anduril.entitymanager.v1.AmmoRestrictionType
	6,  // 32: anduril.entitymanager.v1.FSCMDetails.restrictive_measure_type:type_name -> anduril.entitymanager.v1.RestrictiveMeasureType
	5,  // 33: anduril.entitymanager.v1.FSCMDetails.ammo_restrict_types:type_name -> anduril.entitymanager.v1.AmmoRestrictionType
	4,  // 34: anduril.entitymanager.v1.ACMDetails.acm_type:type_name -> anduril.entitymanager.v1.ACMDetailType
	7,  // 35: anduril.entitymanager.v1.MCMDetails.mcm_type:type_name -> anduril.entitymanager.v1.MCMDetailType
	2,  // 36: anduril.entitymanager.v1.ControlAreaDetails.type:type_name -> anduril.entitymanager.v1.ControlAreaType
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_anduril_entitymanager_v1_geoentity_pub_proto_init() }
func file_anduril_entitymanager_v1_geoentity_pub_proto_init() {
	if File_anduril_entitymanager_v1_geoentity_pub_proto != nil {
		return
	}
	file_anduril_entitymanager_v1_location_pub_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GeoDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*EmergencyDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GeoShape); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GeoPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GeoLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GeoPolygon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GeoEllipse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GeoEllipsoid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*LinearRing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GeoPolygonPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GeoVisualDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*FSCMDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ACMDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*MCMDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*FiringAuthority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ControlAreaDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[0].OneofWrappers = []any{
		(*GeoDetails_Emergency)(nil),
		(*GeoDetails_Fscm)(nil),
		(*GeoDetails_ControlArea)(nil),
		(*GeoDetails_Acm)(nil),
		(*GeoDetails_Mcm)(nil),
	}
	file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes[2].OneofWrappers = []any{
		(*GeoShape_Point)(nil),
		(*GeoShape_Line)(nil),
		(*GeoShape_Polygon)(nil),
		(*GeoShape_Ellipse)(nil),
		(*GeoShape_Ellipsoid)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_anduril_entitymanager_v1_geoentity_pub_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_anduril_entitymanager_v1_geoentity_pub_proto_goTypes,
		DependencyIndexes: file_anduril_entitymanager_v1_geoentity_pub_proto_depIdxs,
		EnumInfos:         file_anduril_entitymanager_v1_geoentity_pub_proto_enumTypes,
		MessageInfos:      file_anduril_entitymanager_v1_geoentity_pub_proto_msgTypes,
	}.Build()
	File_anduril_entitymanager_v1_geoentity_pub_proto = out.File
	file_anduril_entitymanager_v1_geoentity_pub_proto_rawDesc = nil
	file_anduril_entitymanager_v1_geoentity_pub_proto_goTypes = nil
	file_anduril_entitymanager_v1_geoentity_pub_proto_depIdxs = nil
}
