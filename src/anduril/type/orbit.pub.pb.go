// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: anduril/type/orbit.pub.proto

package _type

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MeanElementTheory int32

const (
	MeanElementTheory_MEAN_ELEMENT_THEORY_INVALID MeanElementTheory = 0
	MeanElementTheory_MEAN_ELEMENT_THEORY_SGP4    MeanElementTheory = 1
)

// Enum value maps for MeanElementTheory.
var (
	MeanElementTheory_name = map[int32]string{
		0: "MEAN_ELEMENT_THEORY_INVALID",
		1: "MEAN_ELEMENT_THEORY_SGP4",
	}
	MeanElementTheory_value = map[string]int32{
		"MEAN_ELEMENT_THEORY_INVALID": 0,
		"MEAN_ELEMENT_THEORY_SGP4":    1,
	}
)

func (x MeanElementTheory) Enum() *MeanElementTheory {
	p := new(MeanElementTheory)
	*p = x
	return p
}

func (x MeanElementTheory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeanElementTheory) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_type_orbit_pub_proto_enumTypes[0].Descriptor()
}

func (MeanElementTheory) Type() protoreflect.EnumType {
	return &file_anduril_type_orbit_pub_proto_enumTypes[0]
}

func (x MeanElementTheory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeanElementTheory.Descriptor instead.
func (MeanElementTheory) EnumDescriptor() ([]byte, []int) {
	return file_anduril_type_orbit_pub_proto_rawDescGZIP(), []int{0}
}

type EciReferenceFrame int32

const (
	EciReferenceFrame_ECI_REFERENCE_FRAME_INVALID EciReferenceFrame = 0
	EciReferenceFrame_ECI_REFERENCE_FRAME_TEME    EciReferenceFrame = 1
)

// Enum value maps for EciReferenceFrame.
var (
	EciReferenceFrame_name = map[int32]string{
		0: "ECI_REFERENCE_FRAME_INVALID",
		1: "ECI_REFERENCE_FRAME_TEME",
	}
	EciReferenceFrame_value = map[string]int32{
		"ECI_REFERENCE_FRAME_INVALID": 0,
		"ECI_REFERENCE_FRAME_TEME":    1,
	}
)

func (x EciReferenceFrame) Enum() *EciReferenceFrame {
	p := new(EciReferenceFrame)
	*p = x
	return p
}

func (x EciReferenceFrame) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EciReferenceFrame) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_type_orbit_pub_proto_enumTypes[1].Descriptor()
}

func (EciReferenceFrame) Type() protoreflect.EnumType {
	return &file_anduril_type_orbit_pub_proto_enumTypes[1]
}

func (x EciReferenceFrame) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EciReferenceFrame.Descriptor instead.
func (EciReferenceFrame) EnumDescriptor() ([]byte, []int) {
	return file_anduril_type_orbit_pub_proto_rawDescGZIP(), []int{1}
}

// Orbit Mean Elements data, analogous to the Orbit Mean Elements Message in CCSDS 502.0-B-3
type OrbitMeanElements struct {
	state                 protoimpl.MessageState     `protogen:"open.v1"`
	Metadata              *OrbitMeanElementsMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	MeanKeplerianElements *MeanKeplerianElements     `protobuf:"bytes,2,opt,name=mean_keplerian_elements,json=meanKeplerianElements,proto3" json:"mean_keplerian_elements,omitempty"`
	TleParameters         *TleParameters             `protobuf:"bytes,3,opt,name=tle_parameters,json=tleParameters,proto3" json:"tle_parameters,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *OrbitMeanElements) Reset() {
	*x = OrbitMeanElements{}
	mi := &file_anduril_type_orbit_pub_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrbitMeanElements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrbitMeanElements) ProtoMessage() {}

func (x *OrbitMeanElements) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_type_orbit_pub_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrbitMeanElements.ProtoReflect.Descriptor instead.
func (*OrbitMeanElements) Descriptor() ([]byte, []int) {
	return file_anduril_type_orbit_pub_proto_rawDescGZIP(), []int{0}
}

func (x *OrbitMeanElements) GetMetadata() *OrbitMeanElementsMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *OrbitMeanElements) GetMeanKeplerianElements() *MeanKeplerianElements {
	if x != nil {
		return x.MeanKeplerianElements
	}
	return nil
}

func (x *OrbitMeanElements) GetTleParameters() *TleParameters {
	if x != nil {
		return x.TleParameters
	}
	return nil
}

type OrbitMeanElementsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Creation date/time in UTC
	CreationDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	// Creating agency or operator
	Originator *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=originator,proto3" json:"originator,omitempty"`
	// ID that uniquely identifies a message from a given originator.
	MessageId *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Reference frame, assumed to be Earth-centered
	RefFrame EciReferenceFrame `protobuf:"varint,4,opt,name=ref_frame,json=refFrame,proto3,enum=anduril.type.EciReferenceFrame" json:"ref_frame,omitempty"`
	// Reference frame epoch in UTC - mandatory only if not intrinsic to frame definition
	RefFrameEpoch     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=ref_frame_epoch,json=refFrameEpoch,proto3" json:"ref_frame_epoch,omitempty"`
	MeanElementTheory MeanElementTheory      `protobuf:"varint,6,opt,name=mean_element_theory,json=meanElementTheory,proto3,enum=anduril.type.MeanElementTheory" json:"mean_element_theory,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *OrbitMeanElementsMetadata) Reset() {
	*x = OrbitMeanElementsMetadata{}
	mi := &file_anduril_type_orbit_pub_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrbitMeanElementsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrbitMeanElementsMetadata) ProtoMessage() {}

func (x *OrbitMeanElementsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_type_orbit_pub_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrbitMeanElementsMetadata.ProtoReflect.Descriptor instead.
func (*OrbitMeanElementsMetadata) Descriptor() ([]byte, []int) {
	return file_anduril_type_orbit_pub_proto_rawDescGZIP(), []int{1}
}

func (x *OrbitMeanElementsMetadata) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *OrbitMeanElementsMetadata) GetOriginator() *wrapperspb.StringValue {
	if x != nil {
		return x.Originator
	}
	return nil
}

func (x *OrbitMeanElementsMetadata) GetMessageId() *wrapperspb.StringValue {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *OrbitMeanElementsMetadata) GetRefFrame() EciReferenceFrame {
	if x != nil {
		return x.RefFrame
	}
	return EciReferenceFrame_ECI_REFERENCE_FRAME_INVALID
}

func (x *OrbitMeanElementsMetadata) GetRefFrameEpoch() *timestamppb.Timestamp {
	if x != nil {
		return x.RefFrameEpoch
	}
	return nil
}

func (x *OrbitMeanElementsMetadata) GetMeanElementTheory() MeanElementTheory {
	if x != nil {
		return x.MeanElementTheory
	}
	return MeanElementTheory_MEAN_ELEMENT_THEORY_INVALID
}

type MeanKeplerianElements struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UTC time of validity
	Epoch *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Types that are valid to be assigned to Line2Field8:
	//
	//	*MeanKeplerianElements_SemiMajorAxisKm
	//	*MeanKeplerianElements_MeanMotion
	Line2Field8  isMeanKeplerianElements_Line2Field8 `protobuf_oneof:"line2_field8"`
	Eccentricity float64                             `protobuf:"fixed64,4,opt,name=eccentricity,proto3" json:"eccentricity,omitempty"`
	// Angle of inclination in deg
	InclinationDeg float64 `protobuf:"fixed64,5,opt,name=inclination_deg,json=inclinationDeg,proto3" json:"inclination_deg,omitempty"`
	// Right ascension of the ascending node in deg
	RaOfAscNodeDeg float64 `protobuf:"fixed64,6,opt,name=ra_of_asc_node_deg,json=raOfAscNodeDeg,proto3" json:"ra_of_asc_node_deg,omitempty"`
	// Argument of pericenter in deg
	ArgOfPericenterDeg float64 `protobuf:"fixed64,7,opt,name=arg_of_pericenter_deg,json=argOfPericenterDeg,proto3" json:"arg_of_pericenter_deg,omitempty"`
	// Mean anomaly in deg
	MeanAnomalyDeg float64 `protobuf:"fixed64,8,opt,name=mean_anomaly_deg,json=meanAnomalyDeg,proto3" json:"mean_anomaly_deg,omitempty"`
	// Optional: gravitational coefficient (Gravitational Constant x central mass) in kg^3 / s^2
	Gm            *wrapperspb.DoubleValue `protobuf:"bytes,9,opt,name=gm,proto3" json:"gm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeanKeplerianElements) Reset() {
	*x = MeanKeplerianElements{}
	mi := &file_anduril_type_orbit_pub_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeanKeplerianElements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeanKeplerianElements) ProtoMessage() {}

func (x *MeanKeplerianElements) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_type_orbit_pub_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeanKeplerianElements.ProtoReflect.Descriptor instead.
func (*MeanKeplerianElements) Descriptor() ([]byte, []int) {
	return file_anduril_type_orbit_pub_proto_rawDescGZIP(), []int{2}
}

func (x *MeanKeplerianElements) GetEpoch() *timestamppb.Timestamp {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *MeanKeplerianElements) GetLine2Field8() isMeanKeplerianElements_Line2Field8 {
	if x != nil {
		return x.Line2Field8
	}
	return nil
}

func (x *MeanKeplerianElements) GetSemiMajorAxisKm() float64 {
	if x != nil {
		if x, ok := x.Line2Field8.(*MeanKeplerianElements_SemiMajorAxisKm); ok {
			return x.SemiMajorAxisKm
		}
	}
	return 0
}

func (x *MeanKeplerianElements) GetMeanMotion() float64 {
	if x != nil {
		if x, ok := x.Line2Field8.(*MeanKeplerianElements_MeanMotion); ok {
			return x.MeanMotion
		}
	}
	return 0
}

func (x *MeanKeplerianElements) GetEccentricity() float64 {
	if x != nil {
		return x.Eccentricity
	}
	return 0
}

func (x *MeanKeplerianElements) GetInclinationDeg() float64 {
	if x != nil {
		return x.InclinationDeg
	}
	return 0
}

func (x *MeanKeplerianElements) GetRaOfAscNodeDeg() float64 {
	if x != nil {
		return x.RaOfAscNodeDeg
	}
	return 0
}

func (x *MeanKeplerianElements) GetArgOfPericenterDeg() float64 {
	if x != nil {
		return x.ArgOfPericenterDeg
	}
	return 0
}

func (x *MeanKeplerianElements) GetMeanAnomalyDeg() float64 {
	if x != nil {
		return x.MeanAnomalyDeg
	}
	return 0
}

func (x *MeanKeplerianElements) GetGm() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Gm
	}
	return nil
}

type isMeanKeplerianElements_Line2Field8 interface {
	isMeanKeplerianElements_Line2Field8()
}

type MeanKeplerianElements_SemiMajorAxisKm struct {
	// Preferred: semi major axis in kilometers
	SemiMajorAxisKm float64 `protobuf:"fixed64,2,opt,name=semi_major_axis_km,json=semiMajorAxisKm,proto3,oneof"`
}

type MeanKeplerianElements_MeanMotion struct {
	// If using SGP/SGP4, provide the Keplerian Mean Motion in revolutions per day
	MeanMotion float64 `protobuf:"fixed64,3,opt,name=mean_motion,json=meanMotion,proto3,oneof"`
}

func (*MeanKeplerianElements_SemiMajorAxisKm) isMeanKeplerianElements_Line2Field8() {}

func (*MeanKeplerianElements_MeanMotion) isMeanKeplerianElements_Line2Field8() {}

type TleParameters struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Integer specifying TLE ephemeris type
	EphemerisType *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=ephemeris_type,json=ephemerisType,proto3" json:"ephemeris_type,omitempty"`
	// User-defined free-text message classification/caveats of this TLE
	ClassificationType *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=classification_type,json=classificationType,proto3" json:"classification_type,omitempty"`
	// Norad catalog number: integer up to nine digits.
	NoradCatId   *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=norad_cat_id,json=noradCatId,proto3" json:"norad_cat_id,omitempty"`
	ElementSetNo *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=element_set_no,json=elementSetNo,proto3" json:"element_set_no,omitempty"`
	// Optional: revolution number
	RevAtEpoch *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=rev_at_epoch,json=revAtEpoch,proto3" json:"rev_at_epoch,omitempty"`
	// Drag-like ballistic coefficient, required for SGP4 and SGP4-XP mean element models
	//
	// Types that are valid to be assigned to Line1Field11:
	//
	//	*TleParameters_Bstar
	//	*TleParameters_Bterm
	Line1Field11 isTleParameters_Line1Field11 `protobuf_oneof:"line1_field11"`
	// First time derivative of mean motion in rev / day^2
	MeanMotionDot *wrapperspb.DoubleValue `protobuf:"bytes,8,opt,name=mean_motion_dot,json=meanMotionDot,proto3" json:"mean_motion_dot,omitempty"`
	// Types that are valid to be assigned to Line1Field10:
	//
	//	*TleParameters_MeanMotionDdot
	//	*TleParameters_Agom
	Line1Field10  isTleParameters_Line1Field10 `protobuf_oneof:"line1_field10"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TleParameters) Reset() {
	*x = TleParameters{}
	mi := &file_anduril_type_orbit_pub_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TleParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TleParameters) ProtoMessage() {}

func (x *TleParameters) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_type_orbit_pub_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TleParameters.ProtoReflect.Descriptor instead.
func (*TleParameters) Descriptor() ([]byte, []int) {
	return file_anduril_type_orbit_pub_proto_rawDescGZIP(), []int{3}
}

func (x *TleParameters) GetEphemerisType() *wrapperspb.UInt32Value {
	if x != nil {
		return x.EphemerisType
	}
	return nil
}

func (x *TleParameters) GetClassificationType() *wrapperspb.StringValue {
	if x != nil {
		return x.ClassificationType
	}
	return nil
}

func (x *TleParameters) GetNoradCatId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.NoradCatId
	}
	return nil
}

func (x *TleParameters) GetElementSetNo() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ElementSetNo
	}
	return nil
}

func (x *TleParameters) GetRevAtEpoch() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RevAtEpoch
	}
	return nil
}

func (x *TleParameters) GetLine1Field11() isTleParameters_Line1Field11 {
	if x != nil {
		return x.Line1Field11
	}
	return nil
}

func (x *TleParameters) GetBstar() float64 {
	if x != nil {
		if x, ok := x.Line1Field11.(*TleParameters_Bstar); ok {
			return x.Bstar
		}
	}
	return 0
}

func (x *TleParameters) GetBterm() float64 {
	if x != nil {
		if x, ok := x.Line1Field11.(*TleParameters_Bterm); ok {
			return x.Bterm
		}
	}
	return 0
}

func (x *TleParameters) GetMeanMotionDot() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MeanMotionDot
	}
	return nil
}

func (x *TleParameters) GetLine1Field10() isTleParameters_Line1Field10 {
	if x != nil {
		return x.Line1Field10
	}
	return nil
}

func (x *TleParameters) GetMeanMotionDdot() float64 {
	if x != nil {
		if x, ok := x.Line1Field10.(*TleParameters_MeanMotionDdot); ok {
			return x.MeanMotionDdot
		}
	}
	return 0
}

func (x *TleParameters) GetAgom() float64 {
	if x != nil {
		if x, ok := x.Line1Field10.(*TleParameters_Agom); ok {
			return x.Agom
		}
	}
	return 0
}

type isTleParameters_Line1Field11 interface {
	isTleParameters_Line1Field11()
}

type TleParameters_Bstar struct {
	// Drag parameter for SGP-4 in units 1 / Earth radii
	Bstar float64 `protobuf:"fixed64,6,opt,name=bstar,proto3,oneof"`
}

type TleParameters_Bterm struct {
	// Drag parameter for SGP4-XP in units m^2 / kg
	Bterm float64 `protobuf:"fixed64,7,opt,name=bterm,proto3,oneof"`
}

func (*TleParameters_Bstar) isTleParameters_Line1Field11() {}

func (*TleParameters_Bterm) isTleParameters_Line1Field11() {}

type isTleParameters_Line1Field10 interface {
	isTleParameters_Line1Field10()
}

type TleParameters_MeanMotionDdot struct {
	// Second time derivative of mean motion in rev / day^3. For use with SGP or PPT3.
	MeanMotionDdot float64 `protobuf:"fixed64,9,opt,name=mean_motion_ddot,json=meanMotionDdot,proto3,oneof"`
}

type TleParameters_Agom struct {
	// Solar radiation pressure coefficient A_gamma / m in m^2 / kg. For use with SGP4-XP.
	Agom float64 `protobuf:"fixed64,10,opt,name=agom,proto3,oneof"`
}

func (*TleParameters_MeanMotionDdot) isTleParameters_Line1Field10() {}

func (*TleParameters_Agom) isTleParameters_Line1Field10() {}

var File_anduril_type_orbit_pub_proto protoreflect.FileDescriptor

var file_anduril_type_orbit_pub_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6f,
	0x72, 0x62, 0x69, 0x74, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x01,
	0x0a, 0x11, 0x4f, 0x72, 0x62, 0x69, 0x74, 0x4d, 0x65, 0x61, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x4f, 0x72, 0x62, 0x69, 0x74, 0x4d, 0x65, 0x61, 0x6e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5b, 0x0a, 0x17, 0x6d, 0x65, 0x61, 0x6e,
	0x5f, 0x6b, 0x65, 0x70, 0x6c, 0x65, 0x72, 0x69, 0x61, 0x6e, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x65, 0x61, 0x6e, 0x4b, 0x65, 0x70,
	0x6c, 0x65, 0x72, 0x69, 0x61, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x15,
	0x6d, 0x65, 0x61, 0x6e, 0x4b, 0x65, 0x70, 0x6c, 0x65, 0x72, 0x69, 0x61, 0x6e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x74, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0d, 0x74, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xaa, 0x03, 0x0a, 0x19, 0x4f, 0x72,
	0x62, 0x69, 0x74, 0x4d, 0x65, 0x61, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x63, 0x69, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x72, 0x65, 0x66, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x4f, 0x0a, 0x13, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x4d, 0x65, 0x61, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65,
	0x6f, 0x72, 0x79, 0x52, 0x11, 0x6d, 0x65, 0x61, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x22, 0xaf, 0x03, 0x0a, 0x15, 0x4d, 0x65, 0x61, 0x6e, 0x4b,
	0x65, 0x70, 0x6c, 0x65, 0x72, 0x69, 0x61, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x30, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x6d, 0x69, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72,
	0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6b, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x0f, 0x73, 0x65, 0x6d, 0x69, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x41, 0x78, 0x69, 0x73, 0x4b,
	0x6d, 0x12, 0x21, 0x0a, 0x0b, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6e, 0x4d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x63, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x65, 0x63, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x67, 0x12, 0x2a, 0x0a, 0x12, 0x72, 0x61, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x73, 0x63, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72,
	0x61, 0x4f, 0x66, 0x41, 0x73, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x67, 0x12, 0x31, 0x0a,
	0x15, 0x61, 0x72, 0x67, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x61, 0x72,
	0x67, 0x4f, 0x66, 0x50, 0x65, 0x72, 0x69, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x65, 0x67,
	0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79,
	0x5f, 0x64, 0x65, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6d, 0x65, 0x61, 0x6e,
	0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x44, 0x65, 0x67, 0x12, 0x2c, 0x0a, 0x02, 0x67, 0x6d,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x67, 0x6d, 0x42, 0x0e, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x65,
	0x32, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x38, 0x22, 0xc1, 0x04, 0x0a, 0x0d, 0x54, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x65, 0x70,
	0x68, 0x65, 0x6d, 0x65, 0x72, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4d, 0x0a, 0x13, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e,
	0x0a, 0x0c, 0x6e, 0x6f, 0x72, 0x61, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x6e, 0x6f, 0x72, 0x61, 0x64, 0x43, 0x61, 0x74, 0x49, 0x64, 0x12, 0x42,
	0x0a, 0x0e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74,
	0x4e, 0x6f, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x5f, 0x61, 0x74, 0x5f, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x41, 0x74, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x16, 0x0a, 0x05, 0x62, 0x73, 0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x05, 0x62, 0x73, 0x74, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x05, 0x62, 0x74,
	0x65, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x05, 0x62, 0x74, 0x65,
	0x72, 0x6d, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6d, 0x65, 0x61, 0x6e, 0x4d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x6e,
	0x5f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x64, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x01, 0x52, 0x0e, 0x6d, 0x65, 0x61, 0x6e, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x64, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x61, 0x67, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x01, 0x52, 0x04, 0x61, 0x67, 0x6f, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x6c, 0x69,
	0x6e, 0x65, 0x31, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x6c,
	0x69, 0x6e, 0x65, 0x31, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x30, 0x2a, 0x52, 0x0a, 0x11,
	0x4d, 0x65, 0x61, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6f, 0x72,
	0x79, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x41, 0x4e, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x48, 0x45, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x45, 0x41, 0x4e, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x48, 0x45, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x47, 0x50, 0x34, 0x10, 0x01,
	0x2a, 0x52, 0x0a, 0x11, 0x45, 0x63, 0x69, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x43, 0x49, 0x5f, 0x52, 0x45, 0x46,
	0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x43, 0x49, 0x5f, 0x52, 0x45,
	0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x45,
	0x4d, 0x45, 0x10, 0x01, 0x42, 0xa6, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x4f, 0x72, 0x62, 0x69, 0x74,
	0x50, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x6c,
	0x61, 0x74, 0x74, 0x69, 0x63, 0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x72,
	0x63, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x74, 0x79, 0x70, 0x65, 0xa2, 0x02,
	0x03, 0x41, 0x54, 0x58, 0xaa, 0x02, 0x0c, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0xca, 0x02, 0x0c, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x5c, 0x54, 0x79,
	0x70, 0x65, 0xe2, 0x02, 0x18, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x5c, 0x54, 0x79, 0x70,
	0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d,
	0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x3a, 0x3a, 0x54, 0x79, 0x70, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_anduril_type_orbit_pub_proto_rawDescOnce sync.Once
	file_anduril_type_orbit_pub_proto_rawDescData []byte
)

func file_anduril_type_orbit_pub_proto_rawDescGZIP() []byte {
	file_anduril_type_orbit_pub_proto_rawDescOnce.Do(func() {
		file_anduril_type_orbit_pub_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_anduril_type_orbit_pub_proto_rawDesc), len(file_anduril_type_orbit_pub_proto_rawDesc)))
	})
	return file_anduril_type_orbit_pub_proto_rawDescData
}

var file_anduril_type_orbit_pub_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_anduril_type_orbit_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_anduril_type_orbit_pub_proto_goTypes = []any{
	(MeanElementTheory)(0),            // 0: anduril.type.MeanElementTheory
	(EciReferenceFrame)(0),            // 1: anduril.type.EciReferenceFrame
	(*OrbitMeanElements)(nil),         // 2: anduril.type.OrbitMeanElements
	(*OrbitMeanElementsMetadata)(nil), // 3: anduril.type.OrbitMeanElementsMetadata
	(*MeanKeplerianElements)(nil),     // 4: anduril.type.MeanKeplerianElements
	(*TleParameters)(nil),             // 5: anduril.type.TleParameters
	(*timestamppb.Timestamp)(nil),     // 6: google.protobuf.Timestamp
	(*wrapperspb.StringValue)(nil),    // 7: google.protobuf.StringValue
	(*wrapperspb.DoubleValue)(nil),    // 8: google.protobuf.DoubleValue
	(*wrapperspb.UInt32Value)(nil),    // 9: google.protobuf.UInt32Value
}
var file_anduril_type_orbit_pub_proto_depIdxs = []int32{
	3,  // 0: anduril.type.OrbitMeanElements.metadata:type_name -> anduril.type.OrbitMeanElementsMetadata
	4,  // 1: anduril.type.OrbitMeanElements.mean_keplerian_elements:type_name -> anduril.type.MeanKeplerianElements
	5,  // 2: anduril.type.OrbitMeanElements.tle_parameters:type_name -> anduril.type.TleParameters
	6,  // 3: anduril.type.OrbitMeanElementsMetadata.creation_date:type_name -> google.protobuf.Timestamp
	7,  // 4: anduril.type.OrbitMeanElementsMetadata.originator:type_name -> google.protobuf.StringValue
	7,  // 5: anduril.type.OrbitMeanElementsMetadata.message_id:type_name -> google.protobuf.StringValue
	1,  // 6: anduril.type.OrbitMeanElementsMetadata.ref_frame:type_name -> anduril.type.EciReferenceFrame
	6,  // 7: anduril.type.OrbitMeanElementsMetadata.ref_frame_epoch:type_name -> google.protobuf.Timestamp
	0,  // 8: anduril.type.OrbitMeanElementsMetadata.mean_element_theory:type_name -> anduril.type.MeanElementTheory
	6,  // 9: anduril.type.MeanKeplerianElements.epoch:type_name -> google.protobuf.Timestamp
	8,  // 10: anduril.type.MeanKeplerianElements.gm:type_name -> google.protobuf.DoubleValue
	9,  // 11: anduril.type.TleParameters.ephemeris_type:type_name -> google.protobuf.UInt32Value
	7,  // 12: anduril.type.TleParameters.classification_type:type_name -> google.protobuf.StringValue
	9,  // 13: anduril.type.TleParameters.norad_cat_id:type_name -> google.protobuf.UInt32Value
	9,  // 14: anduril.type.TleParameters.element_set_no:type_name -> google.protobuf.UInt32Value
	9,  // 15: anduril.type.TleParameters.rev_at_epoch:type_name -> google.protobuf.UInt32Value
	8,  // 16: anduril.type.TleParameters.mean_motion_dot:type_name -> google.protobuf.DoubleValue
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_anduril_type_orbit_pub_proto_init() }
func file_anduril_type_orbit_pub_proto_init() {
	if File_anduril_type_orbit_pub_proto != nil {
		return
	}
	file_anduril_type_orbit_pub_proto_msgTypes[2].OneofWrappers = []any{
		(*MeanKeplerianElements_SemiMajorAxisKm)(nil),
		(*MeanKeplerianElements_MeanMotion)(nil),
	}
	file_anduril_type_orbit_pub_proto_msgTypes[3].OneofWrappers = []any{
		(*TleParameters_Bstar)(nil),
		(*TleParameters_Bterm)(nil),
		(*TleParameters_MeanMotionDdot)(nil),
		(*TleParameters_Agom)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_anduril_type_orbit_pub_proto_rawDesc), len(file_anduril_type_orbit_pub_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_anduril_type_orbit_pub_proto_goTypes,
		DependencyIndexes: file_anduril_type_orbit_pub_proto_depIdxs,
		EnumInfos:         file_anduril_type_orbit_pub_proto_enumTypes,
		MessageInfos:      file_anduril_type_orbit_pub_proto_msgTypes,
	}.Build()
	File_anduril_type_orbit_pub_proto = out.File
	file_anduril_type_orbit_pub_proto_goTypes = nil
	file_anduril_type_orbit_pub_proto_depIdxs = nil
}
