// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: anduril/taskmanager/v1/task_manager_grpcapi.pub.proto

package taskmanagerv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of filter.
type QueryTasksRequest_FilterType int32

const (
	QueryTasksRequest_FILTER_TYPE_INVALID   QueryTasksRequest_FilterType = 0
	QueryTasksRequest_FILTER_TYPE_INCLUSIVE QueryTasksRequest_FilterType = 1
	QueryTasksRequest_FILTER_TYPE_EXCLUSIVE QueryTasksRequest_FilterType = 2
)

// Enum value maps for QueryTasksRequest_FilterType.
var (
	QueryTasksRequest_FilterType_name = map[int32]string{
		0: "FILTER_TYPE_INVALID",
		1: "FILTER_TYPE_INCLUSIVE",
		2: "FILTER_TYPE_EXCLUSIVE",
	}
	QueryTasksRequest_FilterType_value = map[string]int32{
		"FILTER_TYPE_INVALID":   0,
		"FILTER_TYPE_INCLUSIVE": 1,
		"FILTER_TYPE_EXCLUSIVE": 2,
	}
)

func (x QueryTasksRequest_FilterType) Enum() *QueryTasksRequest_FilterType {
	p := new(QueryTasksRequest_FilterType)
	*p = x
	return p
}

func (x QueryTasksRequest_FilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryTasksRequest_FilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_enumTypes[0].Descriptor()
}

func (QueryTasksRequest_FilterType) Type() protoreflect.EnumType {
	return &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_enumTypes[0]
}

func (x QueryTasksRequest_FilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryTasksRequest_FilterType.Descriptor instead.
func (QueryTasksRequest_FilterType) EnumDescriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDescGZIP(), []int{4, 0}
}

// Request to create a Task.
type CreateTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Human-readable display name for this Task, should be short (<100 chars).
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Full task parameterization.
	Specification *anypb.Any `protobuf:"bytes,2,opt,name=specification,proto3" json:"specification,omitempty"`
	// Who or what is creating this Task. For example, if a user created this Task via a UI, it would
	//
	//	contain the "user" Principal type with the user ID of that user. Or if a service is calling the
	//	CreateTask endpoint, then a "service" Principal type is to be provided.
	Author *Principal `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	// Any relationships associated with this Task, such as a parent Task or an assignee this Task is designated to
	//
	//	for execution.
	Relations *Relations `protobuf:"bytes,5,opt,name=relations,proto3" json:"relations,omitempty"`
	// Longer, free-form, human-readable description of this Task.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// If set, then task-manager will not trigger execution of this task on an agent. Useful for when ingesting
	// tasks from an external system that is triggering execution of tasks on agents.
	IsExecutedElsewhere bool `protobuf:"varint,7,opt,name=is_executed_elsewhere,json=isExecutedElsewhere,proto3" json:"is_executed_elsewhere,omitempty"`
	// If non-empty, will set the requested Task ID, otherwise will generate a new random GUID.
	//
	//	Will reject if supplied Task ID does not match `[A-Za-z0-9_-.]{5,36}`.
	TaskId string `protobuf:"bytes,8,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Indicates an initial set of entities that can be used to execute an entity aware task.
	// For example, an entity Objective, an entity Keep In Zone, etc.
	InitialEntities []*TaskEntity `protobuf:"bytes,9,rep,name=initial_entities,json=initialEntities,proto3" json:"initial_entities,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateTaskRequest) Reset() {
	*x = CreateTaskRequest{}
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskRequest) ProtoMessage() {}

func (x *CreateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateTaskRequest) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTaskRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CreateTaskRequest) GetSpecification() *anypb.Any {
	if x != nil {
		return x.Specification
	}
	return nil
}

func (x *CreateTaskRequest) GetAuthor() *Principal {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *CreateTaskRequest) GetRelations() *Relations {
	if x != nil {
		return x.Relations
	}
	return nil
}

func (x *CreateTaskRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateTaskRequest) GetIsExecutedElsewhere() bool {
	if x != nil {
		return x.IsExecutedElsewhere
	}
	return false
}

func (x *CreateTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *CreateTaskRequest) GetInitialEntities() []*TaskEntity {
	if x != nil {
		return x.InitialEntities
	}
	return nil
}

// Response to a Create Task request.
type CreateTaskResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Task that was created.
	Task          *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTaskResponse) Reset() {
	*x = CreateTaskResponse{}
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskResponse) ProtoMessage() {}

func (x *CreateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateTaskResponse) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

// Request to get a Task.
type GetTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of Task to get.
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Optional - if > 0, will get specific definition_version, otherwise latest (highest) definition_version is used.
	DefinitionVersion uint32 `protobuf:"varint,2,opt,name=definition_version,json=definitionVersion,proto3" json:"definition_version,omitempty"`
	// Optional - select which view of the task to fetch. If not set, defaults to TASK_VIEW_MANAGER.
	TaskView      TaskView `protobuf:"varint,3,opt,name=task_view,json=taskView,proto3,enum=anduril.taskmanager.v1.TaskView" json:"task_view,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskRequest) Reset() {
	*x = GetTaskRequest{}
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRequest) ProtoMessage() {}

func (x *GetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDescGZIP(), []int{2}
}

func (x *GetTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetTaskRequest) GetDefinitionVersion() uint32 {
	if x != nil {
		return x.DefinitionVersion
	}
	return 0
}

func (x *GetTaskRequest) GetTaskView() TaskView {
	if x != nil {
		return x.TaskView
	}
	return TaskView_TASK_VIEW_INVALID
}

// Response to a Get Task request.
type GetTaskResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Task that was returned.
	Task          *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskResponse) Reset() {
	*x = GetTaskResponse{}
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskResponse) ProtoMessage() {}

func (x *GetTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskResponse.ProtoReflect.Descriptor instead.
func (*GetTaskResponse) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDescGZIP(), []int{3}
}

func (x *GetTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

// Request to query for Tasks. Returns the each latest Task by Status ID and Version ID by default with no filters.
type QueryTasksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If present matches Tasks with this parent Task ID.
	// Note: this is mutually exclusive with all other query parameters, i.e., either provide parent Task ID, or
	//
	//	any of the remaining parameters, but not both.
	ParentTaskId string `protobuf:"bytes,1,opt,name=parent_task_id,json=parentTaskId,proto3" json:"parent_task_id,omitempty"`
	// If set, returns results starting from the given page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Filters on provided status types in the filter.
	StatusFilter *QueryTasksRequest_StatusFilter `protobuf:"bytes,4,opt,name=status_filter,json=statusFilter,proto3" json:"status_filter,omitempty"`
	// If provided, only provides Tasks updated within the time range.
	UpdateTimeRange *QueryTasksRequest_TimeRange `protobuf:"bytes,5,opt,name=update_time_range,json=updateTimeRange,proto3" json:"update_time_range,omitempty"`
	// Optional filter for view of a Task.
	// If not set, defaults to TASK_VIEW_MANAGER.
	View          TaskView `protobuf:"varint,6,opt,name=view,proto3,enum=anduril.taskmanager.v1.TaskView" json:"view,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTasksRequest) Reset() {
	*x = QueryTasksRequest{}
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTasksRequest) ProtoMessage() {}

func (x *QueryTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTasksRequest.ProtoReflect.Descriptor instead.
func (*QueryTasksRequest) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDescGZIP(), []int{4}
}

func (x *QueryTasksRequest) GetParentTaskId() string {
	if x != nil {
		return x.ParentTaskId
	}
	return ""
}

func (x *QueryTasksRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *QueryTasksRequest) GetStatusFilter() *QueryTasksRequest_StatusFilter {
	if x != nil {
		return x.StatusFilter
	}
	return nil
}

func (x *QueryTasksRequest) GetUpdateTimeRange() *QueryTasksRequest_TimeRange {
	if x != nil {
		return x.UpdateTimeRange
	}
	return nil
}

func (x *QueryTasksRequest) GetView() TaskView {
	if x != nil {
		return x.View
	}
	return TaskView_TASK_VIEW_INVALID
}

// Response to a Query Task request.
type QueryTasksResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Tasks matching the Query Task request.
	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	// Page token to the next page of Tasks.
	PageToken     string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTasksResponse) Reset() {
	*x = QueryTasksResponse{}
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTasksResponse) ProtoMessage() {}

func (x *QueryTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTasksResponse.ProtoReflect.Descriptor instead.
func (*QueryTasksResponse) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDescGZIP(), []int{5}
}

func (x *QueryTasksResponse) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *QueryTasksResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// Request to update a Task's status.
type UpdateStatusRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The updated status.
	StatusUpdate  *StatusUpdate `protobuf:"bytes,1,opt,name=status_update,json=statusUpdate,proto3" json:"status_update,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateStatusRequest) Reset() {
	*x = UpdateStatusRequest{}
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStatusRequest) ProtoMessage() {}

func (x *UpdateStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateStatusRequest) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateStatusRequest) GetStatusUpdate() *StatusUpdate {
	if x != nil {
		return x.StatusUpdate
	}
	return nil
}

// Response to an Update Status request.
type UpdateStatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The updated Task.
	Task          *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateStatusResponse) Reset() {
	*x = UpdateStatusResponse{}
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStatusResponse) ProtoMessage() {}

func (x *UpdateStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateStatusResponse) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateStatusResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

// Request for streaming Tasks ready for agent execution.
type ListenAsAgentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Selector criteria to determine which Agent Tasks the agent receives
	//
	// Types that are valid to be assigned to AgentSelector:
	//
	//	*ListenAsAgentRequest_EntityIds
	AgentSelector isListenAsAgentRequest_AgentSelector `protobuf_oneof:"agent_selector"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListenAsAgentRequest) Reset() {
	*x = ListenAsAgentRequest{}
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenAsAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenAsAgentRequest) ProtoMessage() {}

func (x *ListenAsAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenAsAgentRequest.ProtoReflect.Descriptor instead.
func (*ListenAsAgentRequest) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDescGZIP(), []int{8}
}

func (x *ListenAsAgentRequest) GetAgentSelector() isListenAsAgentRequest_AgentSelector {
	if x != nil {
		return x.AgentSelector
	}
	return nil
}

func (x *ListenAsAgentRequest) GetEntityIds() *EntityIds {
	if x != nil {
		if x, ok := x.AgentSelector.(*ListenAsAgentRequest_EntityIds); ok {
			return x.EntityIds
		}
	}
	return nil
}

type isListenAsAgentRequest_AgentSelector interface {
	isListenAsAgentRequest_AgentSelector()
}

type ListenAsAgentRequest_EntityIds struct {
	// The requesting agent will only receive Agent Tasks in the stream that have any of these specified entity ids as the task's assignee
	EntityIds *EntityIds `protobuf:"bytes,1,opt,name=entity_ids,json=entityIds,proto3,oneof"`
}

func (*ListenAsAgentRequest_EntityIds) isListenAsAgentRequest_AgentSelector() {}

// Response for streaming Tasks ready for agent execution.
type ListenAsAgentResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Action for agent to execute
	//
	// Types that are valid to be assigned to Request:
	//
	//	*ListenAsAgentResponse_ExecuteRequest
	//	*ListenAsAgentResponse_CancelRequest
	//	*ListenAsAgentResponse_CompleteRequest
	Request       isListenAsAgentResponse_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListenAsAgentResponse) Reset() {
	*x = ListenAsAgentResponse{}
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenAsAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenAsAgentResponse) ProtoMessage() {}

func (x *ListenAsAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenAsAgentResponse.ProtoReflect.Descriptor instead.
func (*ListenAsAgentResponse) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDescGZIP(), []int{9}
}

func (x *ListenAsAgentResponse) GetRequest() isListenAsAgentResponse_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ListenAsAgentResponse) GetExecuteRequest() *ExecuteRequest {
	if x != nil {
		if x, ok := x.Request.(*ListenAsAgentResponse_ExecuteRequest); ok {
			return x.ExecuteRequest
		}
	}
	return nil
}

func (x *ListenAsAgentResponse) GetCancelRequest() *CancelRequest {
	if x != nil {
		if x, ok := x.Request.(*ListenAsAgentResponse_CancelRequest); ok {
			return x.CancelRequest
		}
	}
	return nil
}

func (x *ListenAsAgentResponse) GetCompleteRequest() *CompleteRequest {
	if x != nil {
		if x, ok := x.Request.(*ListenAsAgentResponse_CompleteRequest); ok {
			return x.CompleteRequest
		}
	}
	return nil
}

type isListenAsAgentResponse_Request interface {
	isListenAsAgentResponse_Request()
}

type ListenAsAgentResponse_ExecuteRequest struct {
	ExecuteRequest *ExecuteRequest `protobuf:"bytes,1,opt,name=execute_request,json=executeRequest,proto3,oneof"`
}

type ListenAsAgentResponse_CancelRequest struct {
	CancelRequest *CancelRequest `protobuf:"bytes,2,opt,name=cancel_request,json=cancelRequest,proto3,oneof"`
}

type ListenAsAgentResponse_CompleteRequest struct {
	CompleteRequest *CompleteRequest `protobuf:"bytes,3,opt,name=complete_request,json=completeRequest,proto3,oneof"`
}

func (*ListenAsAgentResponse_ExecuteRequest) isListenAsAgentResponse_Request() {}

func (*ListenAsAgentResponse_CancelRequest) isListenAsAgentResponse_Request() {}

func (*ListenAsAgentResponse_CompleteRequest) isListenAsAgentResponse_Request() {}

// Rate limiting / down-sampling parameters.
type RateLimit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies a minimum duration in milliseconds after an update for a given task before another one
	// will be sent for the same task.
	// A value of 0 is treated as unset. If set, value must be >= 250.
	// Example: if set to 1000, and 4 events occur (ms since start) at T0, T500, T900, T2100, then
	// event from T0 will be sent at T0, T500 will be dropped, T900 will be sent at minimum of T1000,
	// and T2100 will be sent on time (2100)
	// This will only limit updates, other events will be sent immediately, with a delete clearing anything held
	UpdatePerTaskLimitMs uint32 `protobuf:"varint,1,opt,name=update_per_task_limit_ms,json=updatePerTaskLimitMs,proto3" json:"update_per_task_limit_ms,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RateLimit) Reset() {
	*x = RateLimit{}
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimit) ProtoMessage() {}

func (x *RateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimit.ProtoReflect.Descriptor instead.
func (*RateLimit) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDescGZIP(), []int{10}
}

func (x *RateLimit) GetUpdatePerTaskLimitMs() uint32 {
	if x != nil {
		return x.UpdatePerTaskLimitMs
	}
	return 0
}

type Heartbeat struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The time at which the Heartbeat was sent.
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDescGZIP(), []int{11}
}

func (x *Heartbeat) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Entity IDs wrapper.
type EntityIds struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityIds     []string               `protobuf:"bytes,1,rep,name=entity_ids,json=entityIds,proto3" json:"entity_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityIds) Reset() {
	*x = EntityIds{}
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityIds) ProtoMessage() {}

func (x *EntityIds) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityIds.ProtoReflect.Descriptor instead.
func (*EntityIds) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDescGZIP(), []int{12}
}

func (x *EntityIds) GetEntityIds() []string {
	if x != nil {
		return x.EntityIds
	}
	return nil
}

// A time range query for Tasks.
type QueryTasksRequest_TimeRange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If provided, returns Tasks only updated after this time.
	UpdateStartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=update_start_time,json=updateStartTime,proto3" json:"update_start_time,omitempty"`
	// If provided, returns Tasks only updated before this time.
	UpdateEndTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=update_end_time,json=updateEndTime,proto3" json:"update_end_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTasksRequest_TimeRange) Reset() {
	*x = QueryTasksRequest_TimeRange{}
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTasksRequest_TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTasksRequest_TimeRange) ProtoMessage() {}

func (x *QueryTasksRequest_TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTasksRequest_TimeRange.ProtoReflect.Descriptor instead.
func (*QueryTasksRequest_TimeRange) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDescGZIP(), []int{4, 0}
}

func (x *QueryTasksRequest_TimeRange) GetUpdateStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateStartTime
	}
	return nil
}

func (x *QueryTasksRequest_TimeRange) GetUpdateEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateEndTime
	}
	return nil
}

// A filter for statuses.
type QueryTasksRequest_StatusFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Statuses to be part of the filter.
	Status []Status `protobuf:"varint,1,rep,packed,name=status,proto3,enum=anduril.taskmanager.v1.Status" json:"status,omitempty"`
	// The type of filter to apply.
	FilterType    QueryTasksRequest_FilterType `protobuf:"varint,2,opt,name=filter_type,json=filterType,proto3,enum=anduril.taskmanager.v1.QueryTasksRequest_FilterType" json:"filter_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTasksRequest_StatusFilter) Reset() {
	*x = QueryTasksRequest_StatusFilter{}
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTasksRequest_StatusFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTasksRequest_StatusFilter) ProtoMessage() {}

func (x *QueryTasksRequest_StatusFilter) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTasksRequest_StatusFilter.ProtoReflect.Descriptor instead.
func (*QueryTasksRequest_StatusFilter) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDescGZIP(), []int{4, 1}
}

func (x *QueryTasksRequest_StatusFilter) GetStatus() []Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QueryTasksRequest_StatusFilter) GetFilterType() QueryTasksRequest_FilterType {
	if x != nil {
		return x.FilterType
	}
	return QueryTasksRequest_FILTER_TYPE_INVALID
}

var File_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto protoreflect.FileDescriptor

const file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDesc = "" +
	"\n" +
	"5anduril/taskmanager/v1/task_manager_grpcapi.pub.proto\x12\x16anduril.taskmanager.v1\x1a%anduril/taskmanager/v1/task.pub.proto\x1a)anduril/taskmanager/v1/task_api.pub.proto\x1a\x19google/protobuf/any.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xb8\x03\n" +
	"\x11CreateTaskRequest\x12!\n" +
	"\fdisplay_name\x18\x01 \x01(\tR\vdisplayName\x12:\n" +
	"\rspecification\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\rspecification\x129\n" +
	"\x06author\x18\x03 \x01(\v2!.anduril.taskmanager.v1.PrincipalR\x06author\x12?\n" +
	"\trelations\x18\x05 \x01(\v2!.anduril.taskmanager.v1.RelationsR\trelations\x12 \n" +
	"\vdescription\x18\x06 \x01(\tR\vdescription\x122\n" +
	"\x15is_executed_elsewhere\x18\a \x01(\bR\x13isExecutedElsewhere\x12\x17\n" +
	"\atask_id\x18\b \x01(\tR\x06taskId\x12M\n" +
	"\x10initial_entities\x18\t \x03(\v2\".anduril.taskmanager.v1.TaskEntityR\x0finitialEntitiesJ\x04\b\x04\x10\x05J\x04\b\n" +
	"\x10\v\"F\n" +
	"\x12CreateTaskResponse\x120\n" +
	"\x04task\x18\x01 \x01(\v2\x1c.anduril.taskmanager.v1.TaskR\x04task\"\x97\x01\n" +
	"\x0eGetTaskRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12-\n" +
	"\x12definition_version\x18\x02 \x01(\rR\x11definitionVersion\x12=\n" +
	"\ttask_view\x18\x03 \x01(\x0e2 .anduril.taskmanager.v1.TaskViewR\btaskView\"C\n" +
	"\x0fGetTaskResponse\x120\n" +
	"\x04task\x18\x01 \x01(\v2\x1c.anduril.taskmanager.v1.TaskR\x04task\"\xe9\x05\n" +
	"\x11QueryTasksRequest\x12$\n" +
	"\x0eparent_task_id\x18\x01 \x01(\tR\fparentTaskId\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\x12[\n" +
	"\rstatus_filter\x18\x04 \x01(\v26.anduril.taskmanager.v1.QueryTasksRequest.StatusFilterR\fstatusFilter\x12_\n" +
	"\x11update_time_range\x18\x05 \x01(\v23.anduril.taskmanager.v1.QueryTasksRequest.TimeRangeR\x0fupdateTimeRange\x124\n" +
	"\x04view\x18\x06 \x01(\x0e2 .anduril.taskmanager.v1.TaskViewR\x04view\x1a\x97\x01\n" +
	"\tTimeRange\x12F\n" +
	"\x11update_start_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x0fupdateStartTime\x12B\n" +
	"\x0fupdate_end_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\rupdateEndTime\x1a\x9d\x01\n" +
	"\fStatusFilter\x126\n" +
	"\x06status\x18\x01 \x03(\x0e2\x1e.anduril.taskmanager.v1.StatusR\x06status\x12U\n" +
	"\vfilter_type\x18\x02 \x01(\x0e24.anduril.taskmanager.v1.QueryTasksRequest.FilterTypeR\n" +
	"filterType\"[\n" +
	"\n" +
	"FilterType\x12\x17\n" +
	"\x13FILTER_TYPE_INVALID\x10\x00\x12\x19\n" +
	"\x15FILTER_TYPE_INCLUSIVE\x10\x01\x12\x19\n" +
	"\x15FILTER_TYPE_EXCLUSIVE\x10\x02J\x04\b\x02\x10\x03\"g\n" +
	"\x12QueryTasksResponse\x122\n" +
	"\x05tasks\x18\x01 \x03(\v2\x1c.anduril.taskmanager.v1.TaskR\x05tasks\x12\x1d\n" +
	"\n" +
	"page_token\x18\x02 \x01(\tR\tpageToken\"`\n" +
	"\x13UpdateStatusRequest\x12I\n" +
	"\rstatus_update\x18\x01 \x01(\v2$.anduril.taskmanager.v1.StatusUpdateR\fstatusUpdate\"H\n" +
	"\x14UpdateStatusResponse\x120\n" +
	"\x04task\x18\x01 \x01(\v2\x1c.anduril.taskmanager.v1.TaskR\x04task\"l\n" +
	"\x14ListenAsAgentRequest\x12B\n" +
	"\n" +
	"entity_ids\x18\x01 \x01(\v2!.anduril.taskmanager.v1.EntityIdsH\x00R\tentityIdsB\x10\n" +
	"\x0eagent_selector\"\x9b\x02\n" +
	"\x15ListenAsAgentResponse\x12Q\n" +
	"\x0fexecute_request\x18\x01 \x01(\v2&.anduril.taskmanager.v1.ExecuteRequestH\x00R\x0eexecuteRequest\x12N\n" +
	"\x0ecancel_request\x18\x02 \x01(\v2%.anduril.taskmanager.v1.CancelRequestH\x00R\rcancelRequest\x12T\n" +
	"\x10complete_request\x18\x03 \x01(\v2'.anduril.taskmanager.v1.CompleteRequestH\x00R\x0fcompleteRequestB\t\n" +
	"\arequest\"C\n" +
	"\tRateLimit\x126\n" +
	"\x18update_per_task_limit_ms\x18\x01 \x01(\rR\x14updatePerTaskLimitMs\"E\n" +
	"\tHeartbeat\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\"*\n" +
	"\tEntityIds\x12\x1d\n" +
	"\n" +
	"entity_ids\x18\x01 \x03(\tR\tentityIds2\x91\x04\n" +
	"\x0eTaskManagerAPI\x12c\n" +
	"\n" +
	"CreateTask\x12).anduril.taskmanager.v1.CreateTaskRequest\x1a*.anduril.taskmanager.v1.CreateTaskResponse\x12Z\n" +
	"\aGetTask\x12&.anduril.taskmanager.v1.GetTaskRequest\x1a'.anduril.taskmanager.v1.GetTaskResponse\x12c\n" +
	"\n" +
	"QueryTasks\x12).anduril.taskmanager.v1.QueryTasksRequest\x1a*.anduril.taskmanager.v1.QueryTasksResponse\x12i\n" +
	"\fUpdateStatus\x12+.anduril.taskmanager.v1.UpdateStatusRequest\x1a,.anduril.taskmanager.v1.UpdateStatusResponse\x12n\n" +
	"\rListenAsAgent\x12,.anduril.taskmanager.v1.ListenAsAgentRequest\x1a-.anduril.taskmanager.v1.ListenAsAgentResponse0\x01B\xfe\x01\n" +
	"\x1acom.anduril.taskmanager.v1B\x1aTaskManagerGrpcapiPubProtoP\x01ZJgithub.com/anduril/lattice-sdk-go/src/anduril/taskmanager/v1;taskmanagerv1\xa2\x02\x03ATX\xaa\x02\x16Anduril.Taskmanager.V1\xca\x02\x16Anduril\\Taskmanager\\V1\xe2\x02\"Anduril\\Taskmanager\\V1\\GPBMetadata\xea\x02\x18Anduril::Taskmanager::V1b\x06proto3"

var (
	file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDescOnce sync.Once
	file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDescData []byte
)

func file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDescGZIP() []byte {
	file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDescOnce.Do(func() {
		file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDesc), len(file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDesc)))
	})
	return file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDescData
}

var file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_goTypes = []any{
	(QueryTasksRequest_FilterType)(0),      // 0: anduril.taskmanager.v1.QueryTasksRequest.FilterType
	(*CreateTaskRequest)(nil),              // 1: anduril.taskmanager.v1.CreateTaskRequest
	(*CreateTaskResponse)(nil),             // 2: anduril.taskmanager.v1.CreateTaskResponse
	(*GetTaskRequest)(nil),                 // 3: anduril.taskmanager.v1.GetTaskRequest
	(*GetTaskResponse)(nil),                // 4: anduril.taskmanager.v1.GetTaskResponse
	(*QueryTasksRequest)(nil),              // 5: anduril.taskmanager.v1.QueryTasksRequest
	(*QueryTasksResponse)(nil),             // 6: anduril.taskmanager.v1.QueryTasksResponse
	(*UpdateStatusRequest)(nil),            // 7: anduril.taskmanager.v1.UpdateStatusRequest
	(*UpdateStatusResponse)(nil),           // 8: anduril.taskmanager.v1.UpdateStatusResponse
	(*ListenAsAgentRequest)(nil),           // 9: anduril.taskmanager.v1.ListenAsAgentRequest
	(*ListenAsAgentResponse)(nil),          // 10: anduril.taskmanager.v1.ListenAsAgentResponse
	(*RateLimit)(nil),                      // 11: anduril.taskmanager.v1.RateLimit
	(*Heartbeat)(nil),                      // 12: anduril.taskmanager.v1.Heartbeat
	(*EntityIds)(nil),                      // 13: anduril.taskmanager.v1.EntityIds
	(*QueryTasksRequest_TimeRange)(nil),    // 14: anduril.taskmanager.v1.QueryTasksRequest.TimeRange
	(*QueryTasksRequest_StatusFilter)(nil), // 15: anduril.taskmanager.v1.QueryTasksRequest.StatusFilter
	(*anypb.Any)(nil),                      // 16: google.protobuf.Any
	(*Principal)(nil),                      // 17: anduril.taskmanager.v1.Principal
	(*Relations)(nil),                      // 18: anduril.taskmanager.v1.Relations
	(*TaskEntity)(nil),                     // 19: anduril.taskmanager.v1.TaskEntity
	(*Task)(nil),                           // 20: anduril.taskmanager.v1.Task
	(TaskView)(0),                          // 21: anduril.taskmanager.v1.TaskView
	(*StatusUpdate)(nil),                   // 22: anduril.taskmanager.v1.StatusUpdate
	(*ExecuteRequest)(nil),                 // 23: anduril.taskmanager.v1.ExecuteRequest
	(*CancelRequest)(nil),                  // 24: anduril.taskmanager.v1.CancelRequest
	(*CompleteRequest)(nil),                // 25: anduril.taskmanager.v1.CompleteRequest
	(*timestamppb.Timestamp)(nil),          // 26: google.protobuf.Timestamp
	(Status)(0),                            // 27: anduril.taskmanager.v1.Status
}
var file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_depIdxs = []int32{
	16, // 0: anduril.taskmanager.v1.CreateTaskRequest.specification:type_name -> google.protobuf.Any
	17, // 1: anduril.taskmanager.v1.CreateTaskRequest.author:type_name -> anduril.taskmanager.v1.Principal
	18, // 2: anduril.taskmanager.v1.CreateTaskRequest.relations:type_name -> anduril.taskmanager.v1.Relations
	19, // 3: anduril.taskmanager.v1.CreateTaskRequest.initial_entities:type_name -> anduril.taskmanager.v1.TaskEntity
	20, // 4: anduril.taskmanager.v1.CreateTaskResponse.task:type_name -> anduril.taskmanager.v1.Task
	21, // 5: anduril.taskmanager.v1.GetTaskRequest.task_view:type_name -> anduril.taskmanager.v1.TaskView
	20, // 6: anduril.taskmanager.v1.GetTaskResponse.task:type_name -> anduril.taskmanager.v1.Task
	15, // 7: anduril.taskmanager.v1.QueryTasksRequest.status_filter:type_name -> anduril.taskmanager.v1.QueryTasksRequest.StatusFilter
	14, // 8: anduril.taskmanager.v1.QueryTasksRequest.update_time_range:type_name -> anduril.taskmanager.v1.QueryTasksRequest.TimeRange
	21, // 9: anduril.taskmanager.v1.QueryTasksRequest.view:type_name -> anduril.taskmanager.v1.TaskView
	20, // 10: anduril.taskmanager.v1.QueryTasksResponse.tasks:type_name -> anduril.taskmanager.v1.Task
	22, // 11: anduril.taskmanager.v1.UpdateStatusRequest.status_update:type_name -> anduril.taskmanager.v1.StatusUpdate
	20, // 12: anduril.taskmanager.v1.UpdateStatusResponse.task:type_name -> anduril.taskmanager.v1.Task
	13, // 13: anduril.taskmanager.v1.ListenAsAgentRequest.entity_ids:type_name -> anduril.taskmanager.v1.EntityIds
	23, // 14: anduril.taskmanager.v1.ListenAsAgentResponse.execute_request:type_name -> anduril.taskmanager.v1.ExecuteRequest
	24, // 15: anduril.taskmanager.v1.ListenAsAgentResponse.cancel_request:type_name -> anduril.taskmanager.v1.CancelRequest
	25, // 16: anduril.taskmanager.v1.ListenAsAgentResponse.complete_request:type_name -> anduril.taskmanager.v1.CompleteRequest
	26, // 17: anduril.taskmanager.v1.Heartbeat.timestamp:type_name -> google.protobuf.Timestamp
	26, // 18: anduril.taskmanager.v1.QueryTasksRequest.TimeRange.update_start_time:type_name -> google.protobuf.Timestamp
	26, // 19: anduril.taskmanager.v1.QueryTasksRequest.TimeRange.update_end_time:type_name -> google.protobuf.Timestamp
	27, // 20: anduril.taskmanager.v1.QueryTasksRequest.StatusFilter.status:type_name -> anduril.taskmanager.v1.Status
	0,  // 21: anduril.taskmanager.v1.QueryTasksRequest.StatusFilter.filter_type:type_name -> anduril.taskmanager.v1.QueryTasksRequest.FilterType
	1,  // 22: anduril.taskmanager.v1.TaskManagerAPI.CreateTask:input_type -> anduril.taskmanager.v1.CreateTaskRequest
	3,  // 23: anduril.taskmanager.v1.TaskManagerAPI.GetTask:input_type -> anduril.taskmanager.v1.GetTaskRequest
	5,  // 24: anduril.taskmanager.v1.TaskManagerAPI.QueryTasks:input_type -> anduril.taskmanager.v1.QueryTasksRequest
	7,  // 25: anduril.taskmanager.v1.TaskManagerAPI.UpdateStatus:input_type -> anduril.taskmanager.v1.UpdateStatusRequest
	9,  // 26: anduril.taskmanager.v1.TaskManagerAPI.ListenAsAgent:input_type -> anduril.taskmanager.v1.ListenAsAgentRequest
	2,  // 27: anduril.taskmanager.v1.TaskManagerAPI.CreateTask:output_type -> anduril.taskmanager.v1.CreateTaskResponse
	4,  // 28: anduril.taskmanager.v1.TaskManagerAPI.GetTask:output_type -> anduril.taskmanager.v1.GetTaskResponse
	6,  // 29: anduril.taskmanager.v1.TaskManagerAPI.QueryTasks:output_type -> anduril.taskmanager.v1.QueryTasksResponse
	8,  // 30: anduril.taskmanager.v1.TaskManagerAPI.UpdateStatus:output_type -> anduril.taskmanager.v1.UpdateStatusResponse
	10, // 31: anduril.taskmanager.v1.TaskManagerAPI.ListenAsAgent:output_type -> anduril.taskmanager.v1.ListenAsAgentResponse
	27, // [27:32] is the sub-list for method output_type
	22, // [22:27] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_init() }
func file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_init() {
	if File_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto != nil {
		return
	}
	file_anduril_taskmanager_v1_task_pub_proto_init()
	file_anduril_taskmanager_v1_task_api_pub_proto_init()
	file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[8].OneofWrappers = []any{
		(*ListenAsAgentRequest_EntityIds)(nil),
	}
	file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes[9].OneofWrappers = []any{
		(*ListenAsAgentResponse_ExecuteRequest)(nil),
		(*ListenAsAgentResponse_CancelRequest)(nil),
		(*ListenAsAgentResponse_CompleteRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDesc), len(file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_goTypes,
		DependencyIndexes: file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_depIdxs,
		EnumInfos:         file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_enumTypes,
		MessageInfos:      file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_msgTypes,
	}.Build()
	File_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto = out.File
	file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_goTypes = nil
	file_anduril_taskmanager_v1_task_manager_grpcapi_pub_proto_depIdxs = nil
}
