// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: anduril/taskmanager/v1/task.pub.proto

package taskmanagerv1

import (
	v1 "github.com/anduril/anduril-go/src/anduril/entitymanager/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The Status of a Task definition through its lifecycle. Each Definition Version can have its own Status.
// For example, Definition v1 could go CREATED -> SENT -> WILCO -> REPLACED, with v2 then potentially in sent Status.
type Status int32

const (
	Status_STATUS_INVALID Status = 0
	// Initial creation Status.
	Status_STATUS_CREATED Status = 1
	// Scheduled within Task Manager to be sent at a future time.
	Status_STATUS_SCHEDULED_IN_MANAGER Status = 2
	// Sent to another system (Asset), no receipt yet.
	Status_STATUS_SENT Status = 3
	// In case of a human operated asset assignee, the machine was reachable and responded, but operator did not ACK yet.
	Status_STATUS_MACHINE_RECEIPT Status = 4
	// Assignee (either human or system in case of autonomous robot) has acknowledged receipt of Task.
	Status_STATUS_ACK Status = 5
	// Assignee confirmed they "will comply" / intend to execute Task.
	Status_STATUS_WILCO Status = 6
	// Task was started and is actively executing.
	Status_STATUS_EXECUTING Status = 7
	// Task is on hold, waiting for additional updates/information before proceeding.
	Status_STATUS_WAITING_FOR_UPDATE Status = 8
	// Task was completed successfully.
	Status_STATUS_DONE_OK Status = 9
	// Task has reached a terminal state but did not complete successfully, see error code/message.
	Status_STATUS_DONE_NOT_OK Status = 10
	// This definition version was replaced.
	Status_STATUS_REPLACED Status = 11
	// A Task was requested to be cancelled but not yet confirmed, will eventually move to DONE_NOT_OK.
	Status_STATUS_CANCEL_REQUESTED Status = 12
	// A Task was requested to be completed successfully but not yet confirmed, will eventually move to DONE_NOT_OK / DONE_OK.
	Status_STATUS_COMPLETE_REQUESTED Status = 13
	// This definition version was rejected, intended to be used when an Agent does not accept a new version of a task
	// and continues using previous version
	Status_STATUS_VERSION_REJECTED Status = 14
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0:  "STATUS_INVALID",
		1:  "STATUS_CREATED",
		2:  "STATUS_SCHEDULED_IN_MANAGER",
		3:  "STATUS_SENT",
		4:  "STATUS_MACHINE_RECEIPT",
		5:  "STATUS_ACK",
		6:  "STATUS_WILCO",
		7:  "STATUS_EXECUTING",
		8:  "STATUS_WAITING_FOR_UPDATE",
		9:  "STATUS_DONE_OK",
		10: "STATUS_DONE_NOT_OK",
		11: "STATUS_REPLACED",
		12: "STATUS_CANCEL_REQUESTED",
		13: "STATUS_COMPLETE_REQUESTED",
		14: "STATUS_VERSION_REJECTED",
	}
	Status_value = map[string]int32{
		"STATUS_INVALID":              0,
		"STATUS_CREATED":              1,
		"STATUS_SCHEDULED_IN_MANAGER": 2,
		"STATUS_SENT":                 3,
		"STATUS_MACHINE_RECEIPT":      4,
		"STATUS_ACK":                  5,
		"STATUS_WILCO":                6,
		"STATUS_EXECUTING":            7,
		"STATUS_WAITING_FOR_UPDATE":   8,
		"STATUS_DONE_OK":              9,
		"STATUS_DONE_NOT_OK":          10,
		"STATUS_REPLACED":             11,
		"STATUS_CANCEL_REQUESTED":     12,
		"STATUS_COMPLETE_REQUESTED":   13,
		"STATUS_VERSION_REJECTED":     14,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_taskmanager_v1_task_pub_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_anduril_taskmanager_v1_task_pub_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_pub_proto_rawDescGZIP(), []int{0}
}

// Error code associated with a Task error.
type ErrorCode int32

const (
	ErrorCode_ERROR_CODE_INVALID ErrorCode = 0
	// Task was cancelled by requester.
	ErrorCode_ERROR_CODE_CANCELLED ErrorCode = 1
	// Task was rejected by assignee, see message for details.
	ErrorCode_ERROR_CODE_REJECTED ErrorCode = 2
	// Task Manager gave up waiting for a receipt/ack from assignee.
	ErrorCode_ERROR_CODE_TIMEOUT ErrorCode = 3
	// Task attempted to execute, but failed.
	ErrorCode_ERROR_CODE_FAILED ErrorCode = 4
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "ERROR_CODE_INVALID",
		1: "ERROR_CODE_CANCELLED",
		2: "ERROR_CODE_REJECTED",
		3: "ERROR_CODE_TIMEOUT",
		4: "ERROR_CODE_FAILED",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_CODE_INVALID":   0,
		"ERROR_CODE_CANCELLED": 1,
		"ERROR_CODE_REJECTED":  2,
		"ERROR_CODE_TIMEOUT":   3,
		"ERROR_CODE_FAILED":    4,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_taskmanager_v1_task_pub_proto_enumTypes[1].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_anduril_taskmanager_v1_task_pub_proto_enumTypes[1]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_pub_proto_rawDescGZIP(), []int{1}
}

// The type of Task event.
type EventType int32

const (
	EventType_EVENT_TYPE_INVALID EventType = 0
	// Task was created.
	EventType_EVENT_TYPE_CREATED EventType = 1
	// Task was updated.
	EventType_EVENT_TYPE_UPDATE EventType = 2
	// Task already existed, but sent on a new stream connection.
	EventType_EVENT_TYPE_PREEXISTING EventType = 3
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EVENT_TYPE_INVALID",
		1: "EVENT_TYPE_CREATED",
		2: "EVENT_TYPE_UPDATE",
		3: "EVENT_TYPE_PREEXISTING",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_INVALID":     0,
		"EVENT_TYPE_CREATED":     1,
		"EVENT_TYPE_UPDATE":      2,
		"EVENT_TYPE_PREEXISTING": 3,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_taskmanager_v1_task_pub_proto_enumTypes[2].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_anduril_taskmanager_v1_task_pub_proto_enumTypes[2]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_pub_proto_rawDescGZIP(), []int{2}
}

// View of a Task through its lifecycle.
// For example, a definition v1 of a task may be running on an agent, indicated by TASK_VIEW_AGENT,
// while the definition v2 may not have been received yet, indicated by TASK_VIEW_MANAGER.
type TaskView int32

const (
	TaskView_TASK_VIEW_INVALID TaskView = 0
	// Represents the most recent version of the Task known to Task Manager
	TaskView_TASK_VIEW_MANAGER TaskView = 1
	// Represents the most recent version of the Task acknowledged or updated by an Agent
	TaskView_TASK_VIEW_AGENT TaskView = 2
)

// Enum value maps for TaskView.
var (
	TaskView_name = map[int32]string{
		0: "TASK_VIEW_INVALID",
		1: "TASK_VIEW_MANAGER",
		2: "TASK_VIEW_AGENT",
	}
	TaskView_value = map[string]int32{
		"TASK_VIEW_INVALID": 0,
		"TASK_VIEW_MANAGER": 1,
		"TASK_VIEW_AGENT":   2,
	}
)

func (x TaskView) Enum() *TaskView {
	p := new(TaskView)
	*p = x
	return p
}

func (x TaskView) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskView) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_taskmanager_v1_task_pub_proto_enumTypes[3].Descriptor()
}

func (TaskView) Type() protoreflect.EnumType {
	return &file_anduril_taskmanager_v1_task_pub_proto_enumTypes[3]
}

func (x TaskView) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskView.Descriptor instead.
func (TaskView) EnumDescriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_pub_proto_rawDescGZIP(), []int{3}
}

// A Task is something an agent can be asked to do within a battle space, typically against a given objective.
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of this Task.
	Version *TaskVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Human readable display name for this Task, should be short (<100 chars).
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Full Task parameterization, must be a message under anduril/tasks/v*/
	Specification *anypb.Any `protobuf:"bytes,3,opt,name=specification,proto3" json:"specification,omitempty"`
	// Records who created this Task. This field will not change after the Task has been created.
	CreatedBy *Principal `protobuf:"bytes,16,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Records who updated this Task last.
	LastUpdatedBy *Principal `protobuf:"bytes,4,opt,name=last_updated_by,json=lastUpdatedBy,proto3" json:"last_updated_by,omitempty"`
	// Records the time of last update.
	LastUpdateTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	// The status of this Task.
	Status *TaskStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// If the Task has been scheduled to execute, what time it should execute at.
	ScheduledTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	// Any related Tasks associated with this, typically includes an assignee for this Task and/or a parent.
	Relations *Relations `protobuf:"bytes,8,opt,name=relations,proto3" json:"relations,omitempty"`
	// Longer, free form human readable description of this Task
	Description string `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	// If set, execution of this Task is managed elsewhere, not by Task Manager.
	// In other words, Task manager will not attempt to update the assigned agent with execution instructions.
	IsExecutedElsewhere bool `protobuf:"varint,11,opt,name=is_executed_elsewhere,json=isExecutedElsewhere,proto3" json:"is_executed_elsewhere,omitempty"`
	// Time of Task creation.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// If populated, designates this to be a replicated Task.
	Replication *Replication `protobuf:"bytes,14,opt,name=replication,proto3" json:"replication,omitempty"`
	// If populated, indicates an initial set of entities that can be used to execute an entity aware task
	// For example, an entity Objective, an entity Keep In Zone, etc.
	// These will not be updated during execution. If a taskable agent needs continuous updates on the entities from the
	// COP, can call entity-manager, or use an AlternateId escape hatch.
	InitialEntities []*TaskEntity `protobuf:"bytes,15,rep,name=initial_entities,json=initialEntities,proto3" json:"initial_entities,omitempty"`
	// The networked owner of this Task. Populated on creation to be the asset on which the Task Manager is running. DO NOT
	// UNDER ANY CIRCUMSTANCES change or modify this field. It is used to ensure that linear writes occur on the node responsible
	// for replication of task data to other nodes running Task Manager.
	Owner *Owner `protobuf:"bytes,12,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_pub_proto_rawDescGZIP(), []int{0}
}

func (x *Task) GetVersion() *TaskVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Task) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Task) GetSpecification() *anypb.Any {
	if x != nil {
		return x.Specification
	}
	return nil
}

func (x *Task) GetCreatedBy() *Principal {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Task) GetLastUpdatedBy() *Principal {
	if x != nil {
		return x.LastUpdatedBy
	}
	return nil
}

func (x *Task) GetLastUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdateTime
	}
	return nil
}

func (x *Task) GetStatus() *TaskStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Task) GetScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

func (x *Task) GetRelations() *Relations {
	if x != nil {
		return x.Relations
	}
	return nil
}

func (x *Task) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Task) GetIsExecutedElsewhere() bool {
	if x != nil {
		return x.IsExecutedElsewhere
	}
	return false
}

func (x *Task) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Task) GetReplication() *Replication {
	if x != nil {
		return x.Replication
	}
	return nil
}

func (x *Task) GetInitialEntities() []*TaskEntity {
	if x != nil {
		return x.InitialEntities
	}
	return nil
}

func (x *Task) GetOwner() *Owner {
	if x != nil {
		return x.Owner
	}
	return nil
}

// TaskStatus is contains information regarding the status of a Task at any given time. Can include related information
//
//	such as any progress towards Task completion, or any associated results if Task completed.
type TaskStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the Task.
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=anduril.taskmanager.v1.Status" json:"status,omitempty"`
	// Any errors associated with the Task.
	TaskError *TaskError `protobuf:"bytes,2,opt,name=task_error,json=taskError,proto3" json:"task_error,omitempty"`
	// Any incremental progress on the Task, should be from the tasks/v*/progress folder.
	Progress *anypb.Any `protobuf:"bytes,4,opt,name=progress,proto3" json:"progress,omitempty"`
	// Any final result of the Task, should be from tasks/v*/result folder.
	Result *anypb.Any `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
	// Time the Task began execution, may not be known even for executing Tasks.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Any estimate for how the Task will progress, should be from tasks/v*/estimates folder.
	Estimate *anypb.Any `protobuf:"bytes,7,opt,name=estimate,proto3" json:"estimate,omitempty"`
	// Any allocated agents of the Task.
	Allocation *Allocation `protobuf:"bytes,8,opt,name=allocation,proto3" json:"allocation,omitempty"`
}

func (x *TaskStatus) Reset() {
	*x = TaskStatus{}
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatus) ProtoMessage() {}

func (x *TaskStatus) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatus.ProtoReflect.Descriptor instead.
func (*TaskStatus) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_pub_proto_rawDescGZIP(), []int{1}
}

func (x *TaskStatus) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_INVALID
}

func (x *TaskStatus) GetTaskError() *TaskError {
	if x != nil {
		return x.TaskError
	}
	return nil
}

func (x *TaskStatus) GetProgress() *anypb.Any {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *TaskStatus) GetResult() *anypb.Any {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *TaskStatus) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TaskStatus) GetEstimate() *anypb.Any {
	if x != nil {
		return x.Estimate
	}
	return nil
}

func (x *TaskStatus) GetAllocation() *Allocation {
	if x != nil {
		return x.Allocation
	}
	return nil
}

// TaskError contains an error code and message typically associated to a Task.
type TaskError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error code for Task error.
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=anduril.taskmanager.v1.ErrorCode" json:"code,omitempty"`
	// Descriptive human-readable string regarding this error.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Any additional details regarding this error.
	ErrorDetails *anypb.Any `protobuf:"bytes,3,opt,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
}

func (x *TaskError) Reset() {
	*x = TaskError{}
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskError) ProtoMessage() {}

func (x *TaskError) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskError.ProtoReflect.Descriptor instead.
func (*TaskError) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_pub_proto_rawDescGZIP(), []int{2}
}

func (x *TaskError) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_ERROR_CODE_INVALID
}

func (x *TaskError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskError) GetErrorDetails() *anypb.Any {
	if x != nil {
		return x.ErrorDetails
	}
	return nil
}

// A Principal is an entity that has authority over this Task.
type Principal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Principal can be either a human user, or a system.
	//
	// Types that are assignable to Agent:
	//
	//	*Principal_System
	//	*Principal_User
	//	*Principal_Team
	Agent isPrincipal_Agent `protobuf_oneof:"agent"`
	// The Principal _this_ Principal is acting on behalf of. For example, if there is a Flux node connected to a non-Flux node,
	// and that Flux node wants to act "on behalf of" that non-Flux node, _this_ Principal would represent the Flux node, and
	// this "on_behalf_of" Principal would represent the non-Flux node.
	//
	// Likely only populated once in the nesting (i.e. the "on_behalf_of" Principal would not have another "on_behalf_of" in most cases).
	OnBehalfOf *Principal `protobuf:"bytes,3,opt,name=on_behalf_of,json=onBehalfOf,proto3" json:"on_behalf_of,omitempty"`
}

func (x *Principal) Reset() {
	*x = Principal{}
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Principal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Principal) ProtoMessage() {}

func (x *Principal) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Principal.ProtoReflect.Descriptor instead.
func (*Principal) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_pub_proto_rawDescGZIP(), []int{3}
}

func (m *Principal) GetAgent() isPrincipal_Agent {
	if m != nil {
		return m.Agent
	}
	return nil
}

func (x *Principal) GetSystem() *System {
	if x, ok := x.GetAgent().(*Principal_System); ok {
		return x.System
	}
	return nil
}

func (x *Principal) GetUser() *User {
	if x, ok := x.GetAgent().(*Principal_User); ok {
		return x.User
	}
	return nil
}

func (x *Principal) GetTeam() *Team {
	if x, ok := x.GetAgent().(*Principal_Team); ok {
		return x.Team
	}
	return nil
}

func (x *Principal) GetOnBehalfOf() *Principal {
	if x != nil {
		return x.OnBehalfOf
	}
	return nil
}

type isPrincipal_Agent interface {
	isPrincipal_Agent()
}

type Principal_System struct {
	System *System `protobuf:"bytes,1,opt,name=system,proto3,oneof"`
}

type Principal_User struct {
	User *User `protobuf:"bytes,2,opt,name=user,proto3,oneof"`
}

type Principal_Team struct {
	Team *Team `protobuf:"bytes,4,opt,name=team,proto3,oneof"`
}

func (*Principal_System) isPrincipal_Agent() {}

func (*Principal_User) isPrincipal_Agent() {}

func (*Principal_Team) isPrincipal_Agent() {}

// System Principal representing some autonomous system.
type System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the service associated with this System.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// The Entity ID of the System.
	EntityId string `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	// The Asset ID of the System.
	AssetId string `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// Whether the System Principal (for example, an Asset) can own scheduling.
	// This means we bypass manager-owned scheduling and defer to the system
	// Principal to handle scheduling and give us status updates for the Task.
	// Regardless of the value defined by the client, the Task Manager will
	// determine and set this value appropriately.
	ManagesOwnScheduling bool `protobuf:"varint,4,opt,name=manages_own_scheduling,json=managesOwnScheduling,proto3" json:"manages_own_scheduling,omitempty"`
}

func (x *System) Reset() {
	*x = System{}
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System) ProtoMessage() {}

func (x *System) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System.ProtoReflect.Descriptor instead.
func (*System) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_pub_proto_rawDescGZIP(), []int{4}
}

func (x *System) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *System) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *System) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *System) GetManagesOwnScheduling() bool {
	if x != nil {
		return x.ManagesOwnScheduling
	}
	return false
}

// A User Principal representing a human.
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The User ID associated with this User.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_pub_proto_rawDescGZIP(), []int{5}
}

func (x *User) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Relations describes the relationships of this Task, such as assignment, or if the Task has any parents.
type Relations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Who or what, if anyone, this Task is currently assigned to.
	Assignee *Principal `protobuf:"bytes,1,opt,name=assignee,proto3" json:"assignee,omitempty"`
	// If this Task is a "sub-Task", what is its parent, none if empty.
	ParentTaskId string `protobuf:"bytes,2,opt,name=parent_task_id,json=parentTaskId,proto3" json:"parent_task_id,omitempty"`
}

func (x *Relations) Reset() {
	*x = Relations{}
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Relations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relations) ProtoMessage() {}

func (x *Relations) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relations.ProtoReflect.Descriptor instead.
func (*Relations) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_pub_proto_rawDescGZIP(), []int{6}
}

func (x *Relations) GetAssignee() *Principal {
	if x != nil {
		return x.Assignee
	}
	return nil
}

func (x *Relations) GetParentTaskId() string {
	if x != nil {
		return x.ParentTaskId
	}
	return ""
}

// Holds Tasks and its associated Events, e.g. CREATED.
type TaskEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of Event.
	EventType EventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=anduril.taskmanager.v1.EventType" json:"event_type,omitempty"`
	// Task associated with this TaskEvent.
	Task *Task `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
	// View associated with this task.
	TaskView TaskView `protobuf:"varint,3,opt,name=task_view,json=taskView,proto3,enum=anduril.taskmanager.v1.TaskView" json:"task_view,omitempty"`
	// ===== Time Series Updates =====
	//
	// Timestamp for time-series to index.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TaskEvent) Reset() {
	*x = TaskEvent{}
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskEvent) ProtoMessage() {}

func (x *TaskEvent) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskEvent.ProtoReflect.Descriptor instead.
func (*TaskEvent) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_pub_proto_rawDescGZIP(), []int{7}
}

func (x *TaskEvent) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EVENT_TYPE_INVALID
}

func (x *TaskEvent) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *TaskEvent) GetTaskView() TaskView {
	if x != nil {
		return x.TaskView
	}
	return TaskView_TASK_VIEW_INVALID
}

func (x *TaskEvent) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

// Version of a Task.
type TaskVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID for this Task.
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Increments on definition (i.e. not TaskStatus) change. 0 is unset, starts at 1 on creation.
	DefinitionVersion uint32 `protobuf:"varint,2,opt,name=definition_version,json=definitionVersion,proto3" json:"definition_version,omitempty"`
	// Increments on changes to TaskStatus. 0 is unset, starts at 1 on creation.
	StatusVersion uint32 `protobuf:"varint,3,opt,name=status_version,json=statusVersion,proto3" json:"status_version,omitempty"`
}

func (x *TaskVersion) Reset() {
	*x = TaskVersion{}
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskVersion) ProtoMessage() {}

func (x *TaskVersion) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskVersion.ProtoReflect.Descriptor instead.
func (*TaskVersion) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_pub_proto_rawDescGZIP(), []int{8}
}

func (x *TaskVersion) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskVersion) GetDefinitionVersion() uint32 {
	if x != nil {
		return x.DefinitionVersion
	}
	return 0
}

func (x *TaskVersion) GetStatusVersion() uint32 {
	if x != nil {
		return x.StatusVersion
	}
	return 0
}

// a Task status update that could come in via RPC or Flux.
type StatusUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the Task.
	Version *TaskVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Status of the Task.
	Status *TaskStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Author of the StatusUpdate message. Used to set the LastUpdatedBy field of the Task.
	Author *Principal `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	// Typically provided if a user is manually managing a Task, or if an asset owns scheduling.
	ScheduledTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
}

func (x *StatusUpdate) Reset() {
	*x = StatusUpdate{}
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusUpdate) ProtoMessage() {}

func (x *StatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusUpdate.ProtoReflect.Descriptor instead.
func (*StatusUpdate) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_pub_proto_rawDescGZIP(), []int{9}
}

func (x *StatusUpdate) GetVersion() *TaskVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *StatusUpdate) GetStatus() *TaskStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *StatusUpdate) GetAuthor() *Principal {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *StatusUpdate) GetScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

// Flux message representing a Task create or update.
type DefinitionUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New task definition being created or updated.
	// The last_updated_by and specification fields inside the task object must be defined.
	// Definition version must also be incremented by the publisher on updates.
	// We do not look at the fields create_time or last_update_time in this object,
	// they are instead set by task-manager.
	Task *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *DefinitionUpdate) Reset() {
	*x = DefinitionUpdate{}
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefinitionUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionUpdate) ProtoMessage() {}

func (x *DefinitionUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionUpdate.ProtoReflect.Descriptor instead.
func (*DefinitionUpdate) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_pub_proto_rawDescGZIP(), []int{10}
}

func (x *DefinitionUpdate) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

// Owner designates the networked flux node responsible for linear writes of a Task data.
type Owner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flux Asset ID of the owner.
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// Entity ID of the owner.
	EntityId string `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
}

func (x *Owner) Reset() {
	*x = Owner{}
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Owner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Owner) ProtoMessage() {}

func (x *Owner) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Owner.ProtoReflect.Descriptor instead.
func (*Owner) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_pub_proto_rawDescGZIP(), []int{11}
}

func (x *Owner) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *Owner) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

// Any metadata associated with the replication of a Task.
type Replication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time by which this Task should be assumed to be stale.
	StaleTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=stale_time,json=staleTime,proto3" json:"stale_time,omitempty"`
}

func (x *Replication) Reset() {
	*x = Replication{}
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Replication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Replication) ProtoMessage() {}

func (x *Replication) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Replication.ProtoReflect.Descriptor instead.
func (*Replication) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_pub_proto_rawDescGZIP(), []int{12}
}

func (x *Replication) GetStaleTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StaleTime
	}
	return nil
}

// Allocation contains a list of agents allocated to a Task.
type Allocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Agents actively being utilized in a Task.
	ActiveAgents []*Agent `protobuf:"bytes,1,rep,name=active_agents,json=activeAgents,proto3" json:"active_agents,omitempty"`
}

func (x *Allocation) Reset() {
	*x = Allocation{}
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Allocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Allocation) ProtoMessage() {}

func (x *Allocation) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Allocation.ProtoReflect.Descriptor instead.
func (*Allocation) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_pub_proto_rawDescGZIP(), []int{13}
}

func (x *Allocation) GetActiveAgents() []*Agent {
	if x != nil {
		return x.ActiveAgents
	}
	return nil
}

// Represents a team of agents
type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entity ID of the team
	EntityId string   `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Members  []*Agent `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_pub_proto_rawDescGZIP(), []int{14}
}

func (x *Team) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *Team) GetMembers() []*Agent {
	if x != nil {
		return x.Members
	}
	return nil
}

// Represents an Agent on the Battlespace.
type Agent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Asset ID of the agent.
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// Entity ID of the agent.
	EntityId string `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
}

func (x *Agent) Reset() {
	*x = Agent{}
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agent) ProtoMessage() {}

func (x *Agent) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Agent.ProtoReflect.Descriptor instead.
func (*Agent) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_pub_proto_rawDescGZIP(), []int{15}
}

func (x *Agent) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *Agent) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

// Wrapper of an entity passed in Tasking, used to hold an additional information, and as a future extension point.
type TaskEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The wrapped entity-manager entity.
	Entity *v1.Entity `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	// Indicates that this entity was generated from a snapshot of a live entity.
	Snapshot bool `protobuf:"varint,2,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *TaskEntity) Reset() {
	*x = TaskEntity{}
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskEntity) ProtoMessage() {}

func (x *TaskEntity) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_pub_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskEntity.ProtoReflect.Descriptor instead.
func (*TaskEntity) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_pub_proto_rawDescGZIP(), []int{16}
}

func (x *TaskEntity) GetEntity() *v1.Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *TaskEntity) GetSnapshot() bool {
	if x != nil {
		return x.Snapshot
	}
	return false
}

var File_anduril_taskmanager_v1_task_pub_proto protoreflect.FileDescriptor

var file_anduril_taskmanager_v1_task_pub_proto_rawDesc = []byte{
	0x0a, 0x25, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x75,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a,
	0x29, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x07, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x3d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0d,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x49, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3f, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x5f, 0x65, 0x6c, 0x73, 0x65, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x69, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x45, 0x6c, 0x73,
	0x65, 0x77, 0x68, 0x65, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x10, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4a, 0x04,
	0x08, 0x07, 0x10, 0x08, 0x22, 0x97, 0x03, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x08, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97,
	0x01, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xfb, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x32, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x43, 0x0a, 0x0c, 0x6f, 0x6e, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x52, 0x0a, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x4f, 0x66, 0x42, 0x07, 0x0a,
	0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x73, 0x4f, 0x77, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x22, 0x1f, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x09, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3d, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x69, 0x65, 0x77, 0x52, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x56, 0x69, 0x65, 0x77, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7c, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x12, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x02, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x39, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x44,
	0x0a, 0x10, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x22, 0x3f, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x50, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x5c, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22,
	0x3f, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x22, 0x62, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x38,
	0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2a, 0xef, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x50, 0x54, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x41, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x57, 0x49, 0x4c, 0x43, 0x4f, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x46, 0x4f, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x4b, 0x10, 0x09,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x4b, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x1b, 0x0a,
	0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x0e, 0x2a, 0x85, 0x01, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x6e,
	0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x52, 0x45, 0x45, 0x58, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x2a, 0x4d,
	0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x69, 0x65, 0x77, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x42, 0xec, 0x01,
	0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x54, 0x61,
	0x73, 0x6b, 0x50, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x46, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x72, 0x63, 0x2f,
	0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x54, 0x58, 0xaa, 0x02, 0x16, 0x41, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x16, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x5c, 0x54, 0x61,
	0x73, 0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x22, 0x41,
	0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x5c, 0x54, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x18, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x3a, 0x3a, 0x54, 0x61, 0x73,
	0x6b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_anduril_taskmanager_v1_task_pub_proto_rawDescOnce sync.Once
	file_anduril_taskmanager_v1_task_pub_proto_rawDescData = file_anduril_taskmanager_v1_task_pub_proto_rawDesc
)

func file_anduril_taskmanager_v1_task_pub_proto_rawDescGZIP() []byte {
	file_anduril_taskmanager_v1_task_pub_proto_rawDescOnce.Do(func() {
		file_anduril_taskmanager_v1_task_pub_proto_rawDescData = protoimpl.X.CompressGZIP(file_anduril_taskmanager_v1_task_pub_proto_rawDescData)
	})
	return file_anduril_taskmanager_v1_task_pub_proto_rawDescData
}

var file_anduril_taskmanager_v1_task_pub_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_anduril_taskmanager_v1_task_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_anduril_taskmanager_v1_task_pub_proto_goTypes = []any{
	(Status)(0),                   // 0: anduril.taskmanager.v1.Status
	(ErrorCode)(0),                // 1: anduril.taskmanager.v1.ErrorCode
	(EventType)(0),                // 2: anduril.taskmanager.v1.EventType
	(TaskView)(0),                 // 3: anduril.taskmanager.v1.TaskView
	(*Task)(nil),                  // 4: anduril.taskmanager.v1.Task
	(*TaskStatus)(nil),            // 5: anduril.taskmanager.v1.TaskStatus
	(*TaskError)(nil),             // 6: anduril.taskmanager.v1.TaskError
	(*Principal)(nil),             // 7: anduril.taskmanager.v1.Principal
	(*System)(nil),                // 8: anduril.taskmanager.v1.System
	(*User)(nil),                  // 9: anduril.taskmanager.v1.User
	(*Relations)(nil),             // 10: anduril.taskmanager.v1.Relations
	(*TaskEvent)(nil),             // 11: anduril.taskmanager.v1.TaskEvent
	(*TaskVersion)(nil),           // 12: anduril.taskmanager.v1.TaskVersion
	(*StatusUpdate)(nil),          // 13: anduril.taskmanager.v1.StatusUpdate
	(*DefinitionUpdate)(nil),      // 14: anduril.taskmanager.v1.DefinitionUpdate
	(*Owner)(nil),                 // 15: anduril.taskmanager.v1.Owner
	(*Replication)(nil),           // 16: anduril.taskmanager.v1.Replication
	(*Allocation)(nil),            // 17: anduril.taskmanager.v1.Allocation
	(*Team)(nil),                  // 18: anduril.taskmanager.v1.Team
	(*Agent)(nil),                 // 19: anduril.taskmanager.v1.Agent
	(*TaskEntity)(nil),            // 20: anduril.taskmanager.v1.TaskEntity
	(*anypb.Any)(nil),             // 21: google.protobuf.Any
	(*timestamppb.Timestamp)(nil), // 22: google.protobuf.Timestamp
	(*v1.Entity)(nil),             // 23: anduril.entitymanager.v1.Entity
}
var file_anduril_taskmanager_v1_task_pub_proto_depIdxs = []int32{
	12, // 0: anduril.taskmanager.v1.Task.version:type_name -> anduril.taskmanager.v1.TaskVersion
	21, // 1: anduril.taskmanager.v1.Task.specification:type_name -> google.protobuf.Any
	7,  // 2: anduril.taskmanager.v1.Task.created_by:type_name -> anduril.taskmanager.v1.Principal
	7,  // 3: anduril.taskmanager.v1.Task.last_updated_by:type_name -> anduril.taskmanager.v1.Principal
	22, // 4: anduril.taskmanager.v1.Task.last_update_time:type_name -> google.protobuf.Timestamp
	5,  // 5: anduril.taskmanager.v1.Task.status:type_name -> anduril.taskmanager.v1.TaskStatus
	22, // 6: anduril.taskmanager.v1.Task.scheduled_time:type_name -> google.protobuf.Timestamp
	10, // 7: anduril.taskmanager.v1.Task.relations:type_name -> anduril.taskmanager.v1.Relations
	22, // 8: anduril.taskmanager.v1.Task.create_time:type_name -> google.protobuf.Timestamp
	16, // 9: anduril.taskmanager.v1.Task.replication:type_name -> anduril.taskmanager.v1.Replication
	20, // 10: anduril.taskmanager.v1.Task.initial_entities:type_name -> anduril.taskmanager.v1.TaskEntity
	15, // 11: anduril.taskmanager.v1.Task.owner:type_name -> anduril.taskmanager.v1.Owner
	0,  // 12: anduril.taskmanager.v1.TaskStatus.status:type_name -> anduril.taskmanager.v1.Status
	6,  // 13: anduril.taskmanager.v1.TaskStatus.task_error:type_name -> anduril.taskmanager.v1.TaskError
	21, // 14: anduril.taskmanager.v1.TaskStatus.progress:type_name -> google.protobuf.Any
	21, // 15: anduril.taskmanager.v1.TaskStatus.result:type_name -> google.protobuf.Any
	22, // 16: anduril.taskmanager.v1.TaskStatus.start_time:type_name -> google.protobuf.Timestamp
	21, // 17: anduril.taskmanager.v1.TaskStatus.estimate:type_name -> google.protobuf.Any
	17, // 18: anduril.taskmanager.v1.TaskStatus.allocation:type_name -> anduril.taskmanager.v1.Allocation
	1,  // 19: anduril.taskmanager.v1.TaskError.code:type_name -> anduril.taskmanager.v1.ErrorCode
	21, // 20: anduril.taskmanager.v1.TaskError.error_details:type_name -> google.protobuf.Any
	8,  // 21: anduril.taskmanager.v1.Principal.system:type_name -> anduril.taskmanager.v1.System
	9,  // 22: anduril.taskmanager.v1.Principal.user:type_name -> anduril.taskmanager.v1.User
	18, // 23: anduril.taskmanager.v1.Principal.team:type_name -> anduril.taskmanager.v1.Team
	7,  // 24: anduril.taskmanager.v1.Principal.on_behalf_of:type_name -> anduril.taskmanager.v1.Principal
	7,  // 25: anduril.taskmanager.v1.Relations.assignee:type_name -> anduril.taskmanager.v1.Principal
	2,  // 26: anduril.taskmanager.v1.TaskEvent.event_type:type_name -> anduril.taskmanager.v1.EventType
	4,  // 27: anduril.taskmanager.v1.TaskEvent.task:type_name -> anduril.taskmanager.v1.Task
	3,  // 28: anduril.taskmanager.v1.TaskEvent.task_view:type_name -> anduril.taskmanager.v1.TaskView
	22, // 29: anduril.taskmanager.v1.TaskEvent.time:type_name -> google.protobuf.Timestamp
	12, // 30: anduril.taskmanager.v1.StatusUpdate.version:type_name -> anduril.taskmanager.v1.TaskVersion
	5,  // 31: anduril.taskmanager.v1.StatusUpdate.status:type_name -> anduril.taskmanager.v1.TaskStatus
	7,  // 32: anduril.taskmanager.v1.StatusUpdate.author:type_name -> anduril.taskmanager.v1.Principal
	22, // 33: anduril.taskmanager.v1.StatusUpdate.scheduled_time:type_name -> google.protobuf.Timestamp
	4,  // 34: anduril.taskmanager.v1.DefinitionUpdate.task:type_name -> anduril.taskmanager.v1.Task
	22, // 35: anduril.taskmanager.v1.Replication.stale_time:type_name -> google.protobuf.Timestamp
	19, // 36: anduril.taskmanager.v1.Allocation.active_agents:type_name -> anduril.taskmanager.v1.Agent
	19, // 37: anduril.taskmanager.v1.Team.members:type_name -> anduril.taskmanager.v1.Agent
	23, // 38: anduril.taskmanager.v1.TaskEntity.entity:type_name -> anduril.entitymanager.v1.Entity
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_anduril_taskmanager_v1_task_pub_proto_init() }
func file_anduril_taskmanager_v1_task_pub_proto_init() {
	if File_anduril_taskmanager_v1_task_pub_proto != nil {
		return
	}
	file_anduril_taskmanager_v1_task_pub_proto_msgTypes[3].OneofWrappers = []any{
		(*Principal_System)(nil),
		(*Principal_User)(nil),
		(*Principal_Team)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_anduril_taskmanager_v1_task_pub_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_anduril_taskmanager_v1_task_pub_proto_goTypes,
		DependencyIndexes: file_anduril_taskmanager_v1_task_pub_proto_depIdxs,
		EnumInfos:         file_anduril_taskmanager_v1_task_pub_proto_enumTypes,
		MessageInfos:      file_anduril_taskmanager_v1_task_pub_proto_msgTypes,
	}.Build()
	File_anduril_taskmanager_v1_task_pub_proto = out.File
	file_anduril_taskmanager_v1_task_pub_proto_rawDesc = nil
	file_anduril_taskmanager_v1_task_pub_proto_goTypes = nil
	file_anduril_taskmanager_v1_task_pub_proto_depIdxs = nil
}
