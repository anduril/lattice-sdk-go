// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: anduril/taskmanager/v1/task_api.pub.proto

package taskmanagerv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request to execute a Task.
type ExecuteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Task to execute.
	Task          *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteRequest) Reset() {
	*x = ExecuteRequest{}
	mi := &file_anduril_taskmanager_v1_task_api_pub_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteRequest) ProtoMessage() {}

func (x *ExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_api_pub_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteRequest.ProtoReflect.Descriptor instead.
func (*ExecuteRequest) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_api_pub_proto_rawDescGZIP(), []int{0}
}

func (x *ExecuteRequest) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

// Request to Cancel a Task.
type CancelRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Task to cancel.
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// The assignee of the Task. Useful for agent routing where an endpoint owns multiple agents,
	// especially onBehalfOf assignees.
	Assignee      *Principal `protobuf:"bytes,2,opt,name=assignee,proto3" json:"assignee,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelRequest) Reset() {
	*x = CancelRequest{}
	mi := &file_anduril_taskmanager_v1_task_api_pub_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRequest) ProtoMessage() {}

func (x *CancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_api_pub_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRequest.ProtoReflect.Descriptor instead.
func (*CancelRequest) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_api_pub_proto_rawDescGZIP(), []int{1}
}

func (x *CancelRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *CancelRequest) GetAssignee() *Principal {
	if x != nil {
		return x.Assignee
	}
	return nil
}

// Request to Complete a Task.
type CompleteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the task to complete.
	TaskId        string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteRequest) Reset() {
	*x = CompleteRequest{}
	mi := &file_anduril_taskmanager_v1_task_api_pub_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteRequest) ProtoMessage() {}

func (x *CompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_taskmanager_v1_task_api_pub_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteRequest.ProtoReflect.Descriptor instead.
func (*CompleteRequest) Descriptor() ([]byte, []int) {
	return file_anduril_taskmanager_v1_task_api_pub_proto_rawDescGZIP(), []int{2}
}

func (x *CompleteRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

var File_anduril_taskmanager_v1_task_api_pub_proto protoreflect.FileDescriptor

const file_anduril_taskmanager_v1_task_api_pub_proto_rawDesc = "" +
	"\n" +
	")anduril/taskmanager/v1/task_api.pub.proto\x12\x16anduril.taskmanager.v1\x1a%anduril/taskmanager/v1/task.pub.proto\"B\n" +
	"\x0eExecuteRequest\x120\n" +
	"\x04task\x18\x01 \x01(\v2\x1c.anduril.taskmanager.v1.TaskR\x04task\"g\n" +
	"\rCancelRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12=\n" +
	"\bassignee\x18\x02 \x01(\v2!.anduril.taskmanager.v1.PrincipalR\bassignee\"*\n" +
	"\x0fCompleteRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskIdB\xf3\x01\n" +
	"\x1acom.anduril.taskmanager.v1B\x0fTaskApiPubProtoP\x01ZJgithub.com/anduril/lattice-sdk-go/src/anduril/taskmanager/v1;taskmanagerv1\xa2\x02\x03ATX\xaa\x02\x16Anduril.Taskmanager.V1\xca\x02\x16Anduril\\Taskmanager\\V1\xe2\x02\"Anduril\\Taskmanager\\V1\\GPBMetadata\xea\x02\x18Anduril::Taskmanager::V1b\x06proto3"

var (
	file_anduril_taskmanager_v1_task_api_pub_proto_rawDescOnce sync.Once
	file_anduril_taskmanager_v1_task_api_pub_proto_rawDescData []byte
)

func file_anduril_taskmanager_v1_task_api_pub_proto_rawDescGZIP() []byte {
	file_anduril_taskmanager_v1_task_api_pub_proto_rawDescOnce.Do(func() {
		file_anduril_taskmanager_v1_task_api_pub_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_anduril_taskmanager_v1_task_api_pub_proto_rawDesc), len(file_anduril_taskmanager_v1_task_api_pub_proto_rawDesc)))
	})
	return file_anduril_taskmanager_v1_task_api_pub_proto_rawDescData
}

var file_anduril_taskmanager_v1_task_api_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_anduril_taskmanager_v1_task_api_pub_proto_goTypes = []any{
	(*ExecuteRequest)(nil),  // 0: anduril.taskmanager.v1.ExecuteRequest
	(*CancelRequest)(nil),   // 1: anduril.taskmanager.v1.CancelRequest
	(*CompleteRequest)(nil), // 2: anduril.taskmanager.v1.CompleteRequest
	(*Task)(nil),            // 3: anduril.taskmanager.v1.Task
	(*Principal)(nil),       // 4: anduril.taskmanager.v1.Principal
}
var file_anduril_taskmanager_v1_task_api_pub_proto_depIdxs = []int32{
	3, // 0: anduril.taskmanager.v1.ExecuteRequest.task:type_name -> anduril.taskmanager.v1.Task
	4, // 1: anduril.taskmanager.v1.CancelRequest.assignee:type_name -> anduril.taskmanager.v1.Principal
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_anduril_taskmanager_v1_task_api_pub_proto_init() }
func file_anduril_taskmanager_v1_task_api_pub_proto_init() {
	if File_anduril_taskmanager_v1_task_api_pub_proto != nil {
		return
	}
	file_anduril_taskmanager_v1_task_pub_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_anduril_taskmanager_v1_task_api_pub_proto_rawDesc), len(file_anduril_taskmanager_v1_task_api_pub_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_anduril_taskmanager_v1_task_api_pub_proto_goTypes,
		DependencyIndexes: file_anduril_taskmanager_v1_task_api_pub_proto_depIdxs,
		MessageInfos:      file_anduril_taskmanager_v1_task_api_pub_proto_msgTypes,
	}.Build()
	File_anduril_taskmanager_v1_task_api_pub_proto = out.File
	file_anduril_taskmanager_v1_task_api_pub_proto_goTypes = nil
	file_anduril_taskmanager_v1_task_api_pub_proto_depIdxs = nil
}
