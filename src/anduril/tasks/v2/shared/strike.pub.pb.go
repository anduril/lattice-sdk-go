// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        (unknown)
// source: anduril/tasks/v2/shared/strike.pub.proto

package tasksv2

import (
	v2 "github.com/anduril/lattice-sdk-go/src/anduril/tasks/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Maps to BREVITY code SMACK.
type Smack struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Objective to SMACK.
	Objective *v2.Objective `protobuf:"bytes,1,opt,name=objective,proto3" json:"objective,omitempty"`
	// Optional parameters associated with Strike Tasks.
	Parameters    *StrikeParameters `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Smack) Reset() {
	*x = Smack{}
	mi := &file_anduril_tasks_v2_shared_strike_pub_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Smack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Smack) ProtoMessage() {}

func (x *Smack) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_strike_pub_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Smack.ProtoReflect.Descriptor instead.
func (*Smack) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_strike_pub_proto_rawDescGZIP(), []int{0}
}

func (x *Smack) GetObjective() *v2.Objective {
	if x != nil {
		return x.Objective
	}
	return nil
}

func (x *Smack) GetParameters() *StrikeParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Maps to UCI StrikeTask.
type Strike struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Objective to Strike.
	Objective *v2.Objective `protobuf:"bytes,1,opt,name=objective,proto3" json:"objective,omitempty"`
	// Angle range within which to ingress.
	IngressAngle *v2.AnglePair `protobuf:"bytes,2,opt,name=ingress_angle,json=ingressAngle,proto3" json:"ingress_angle,omitempty"`
	// Distance at which to yield flight control to the onboard flight computer rather than
	// higher level autonomy.
	StrikeReleaseConstraint *StrikeReleaseConstraint `protobuf:"bytes,3,opt,name=strike_release_constraint,json=strikeReleaseConstraint,proto3" json:"strike_release_constraint,omitempty"`
	// Optional parameters associated with the Strike task.
	Parameters    *StrikeParameters `protobuf:"bytes,4,opt,name=parameters,proto3" json:"parameters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Strike) Reset() {
	*x = Strike{}
	mi := &file_anduril_tasks_v2_shared_strike_pub_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Strike) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Strike) ProtoMessage() {}

func (x *Strike) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_strike_pub_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Strike.ProtoReflect.Descriptor instead.
func (*Strike) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_strike_pub_proto_rawDescGZIP(), []int{1}
}

func (x *Strike) GetObjective() *v2.Objective {
	if x != nil {
		return x.Objective
	}
	return nil
}

func (x *Strike) GetIngressAngle() *v2.AnglePair {
	if x != nil {
		return x.IngressAngle
	}
	return nil
}

func (x *Strike) GetStrikeReleaseConstraint() *StrikeReleaseConstraint {
	if x != nil {
		return x.StrikeReleaseConstraint
	}
	return nil
}

func (x *Strike) GetParameters() *StrikeParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Maps to UCI StrikeTaskReleaseConstraintsType.
type StrikeReleaseConstraint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to StrikeReleaseConstraint:
	//
	//	*StrikeReleaseConstraint_ReleaseArea
	StrikeReleaseConstraint isStrikeReleaseConstraint_StrikeReleaseConstraint `protobuf_oneof:"strike_release_constraint"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *StrikeReleaseConstraint) Reset() {
	*x = StrikeReleaseConstraint{}
	mi := &file_anduril_tasks_v2_shared_strike_pub_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StrikeReleaseConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrikeReleaseConstraint) ProtoMessage() {}

func (x *StrikeReleaseConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_strike_pub_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrikeReleaseConstraint.ProtoReflect.Descriptor instead.
func (*StrikeReleaseConstraint) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_strike_pub_proto_rawDescGZIP(), []int{2}
}

func (x *StrikeReleaseConstraint) GetStrikeReleaseConstraint() isStrikeReleaseConstraint_StrikeReleaseConstraint {
	if x != nil {
		return x.StrikeReleaseConstraint
	}
	return nil
}

func (x *StrikeReleaseConstraint) GetReleaseArea() *v2.AreaConstraints {
	if x != nil {
		if x, ok := x.StrikeReleaseConstraint.(*StrikeReleaseConstraint_ReleaseArea); ok {
			return x.ReleaseArea
		}
	}
	return nil
}

type isStrikeReleaseConstraint_StrikeReleaseConstraint interface {
	isStrikeReleaseConstraint_StrikeReleaseConstraint()
}

type StrikeReleaseConstraint_ReleaseArea struct {
	ReleaseArea *v2.AreaConstraints `protobuf:"bytes,1,opt,name=release_area,json=releaseArea,proto3,oneof"`
}

func (*StrikeReleaseConstraint_ReleaseArea) isStrikeReleaseConstraint_StrikeReleaseConstraint() {}

type StrikeParameters struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	PayloadsToEmploy []*PayloadConfiguration `protobuf:"bytes,1,rep,name=payloads_to_employ,json=payloadsToEmploy,proto3" json:"payloads_to_employ,omitempty"`
	// GPS time at which the strike should be performed.
	DesiredImpactTime *durationpb.Duration `protobuf:"bytes,2,opt,name=desired_impact_time,json=desiredImpactTime,proto3" json:"desired_impact_time,omitempty"`
	// Bearing at which to perform the run in for a strike.
	RunInBearing float64 `protobuf:"fixed64,3,opt,name=run_in_bearing,json=runInBearing,proto3" json:"run_in_bearing,omitempty"`
	// Angle which to glide into the run in for a strike.
	GlideSlopeAngle float64 `protobuf:"fixed64,4,opt,name=glide_slope_angle,json=glideSlopeAngle,proto3" json:"glide_slope_angle,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StrikeParameters) Reset() {
	*x = StrikeParameters{}
	mi := &file_anduril_tasks_v2_shared_strike_pub_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StrikeParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrikeParameters) ProtoMessage() {}

func (x *StrikeParameters) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_strike_pub_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrikeParameters.ProtoReflect.Descriptor instead.
func (*StrikeParameters) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_strike_pub_proto_rawDescGZIP(), []int{3}
}

func (x *StrikeParameters) GetPayloadsToEmploy() []*PayloadConfiguration {
	if x != nil {
		return x.PayloadsToEmploy
	}
	return nil
}

func (x *StrikeParameters) GetDesiredImpactTime() *durationpb.Duration {
	if x != nil {
		return x.DesiredImpactTime
	}
	return nil
}

func (x *StrikeParameters) GetRunInBearing() float64 {
	if x != nil {
		return x.RunInBearing
	}
	return 0
}

func (x *StrikeParameters) GetGlideSlopeAngle() float64 {
	if x != nil {
		return x.GlideSlopeAngle
	}
	return 0
}

// Individual payload configuration.
type PayloadConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique ID or descriptor for the capability.
	CapabilityId  string `protobuf:"bytes,1,opt,name=capability_id,json=capabilityId,proto3" json:"capability_id,omitempty"`
	Quantity      uint32 `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PayloadConfiguration) Reset() {
	*x = PayloadConfiguration{}
	mi := &file_anduril_tasks_v2_shared_strike_pub_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayloadConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadConfiguration) ProtoMessage() {}

func (x *PayloadConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_strike_pub_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadConfiguration.ProtoReflect.Descriptor instead.
func (*PayloadConfiguration) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_strike_pub_proto_rawDescGZIP(), []int{4}
}

func (x *PayloadConfiguration) GetCapabilityId() string {
	if x != nil {
		return x.CapabilityId
	}
	return ""
}

func (x *PayloadConfiguration) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// Releases a payload from the vehicle
type ReleasePayload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The payload(s) that will be released
	Payloads []*PayloadConfiguration `protobuf:"bytes,1,rep,name=payloads,proto3" json:"payloads,omitempty"`
	// Optional objective, of where the payload should be dropped. If omitted the payload will drop the current location
	Objective *v2.Objective `protobuf:"bytes,2,opt,name=objective,proto3" json:"objective,omitempty"`
	// Types that are valid to be assigned to ReleaseMethod:
	//
	//	*ReleasePayload_PrecisionRelease
	ReleaseMethod isReleasePayload_ReleaseMethod `protobuf_oneof:"release_method"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleasePayload) Reset() {
	*x = ReleasePayload{}
	mi := &file_anduril_tasks_v2_shared_strike_pub_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleasePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleasePayload) ProtoMessage() {}

func (x *ReleasePayload) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_strike_pub_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleasePayload.ProtoReflect.Descriptor instead.
func (*ReleasePayload) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_strike_pub_proto_rawDescGZIP(), []int{5}
}

func (x *ReleasePayload) GetPayloads() []*PayloadConfiguration {
	if x != nil {
		return x.Payloads
	}
	return nil
}

func (x *ReleasePayload) GetObjective() *v2.Objective {
	if x != nil {
		return x.Objective
	}
	return nil
}

func (x *ReleasePayload) GetReleaseMethod() isReleasePayload_ReleaseMethod {
	if x != nil {
		return x.ReleaseMethod
	}
	return nil
}

func (x *ReleasePayload) GetPrecisionRelease() *emptypb.Empty {
	if x != nil {
		if x, ok := x.ReleaseMethod.(*ReleasePayload_PrecisionRelease); ok {
			return x.PrecisionRelease
		}
	}
	return nil
}

type isReleasePayload_ReleaseMethod interface {
	isReleasePayload_ReleaseMethod()
}

type ReleasePayload_PrecisionRelease struct {
	// Attempt to place the payload delicately from a standstill
	PrecisionRelease *emptypb.Empty `protobuf:"bytes,3,opt,name=precision_release,json=precisionRelease,proto3,oneof"`
}

func (*ReleasePayload_PrecisionRelease) isReleasePayload_ReleaseMethod() {}

var File_anduril_tasks_v2_shared_strike_pub_proto protoreflect.FileDescriptor

var file_anduril_tasks_v2_shared_strike_pub_proto_rawDesc = []byte{
	0x0a, 0x28, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f,
	0x76, 0x32, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x76, 0x32, 0x1a, 0x21, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x24, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x76,
	0x32, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x70, 0x75, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x86, 0x01, 0x0a, 0x05, 0x53, 0x6d, 0x61, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x09,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x09, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xb0, 0x02, 0x0a, 0x06,
	0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x40, 0x0a, 0x0d, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6e, 0x67, 0x6c,
	0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0c, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6e,
	0x67, 0x6c, 0x65, 0x12, 0x65, 0x0a, 0x19, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x5f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x17, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x7e,
	0x0a, 0x17, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x42, 0x1b, 0x0a, 0x19, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x22, 0x85,
	0x02, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x54, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x54, 0x6f, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x49, 0x0a, 0x13, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x62,
	0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x75,
	0x6e, 0x49, 0x6e, 0x42, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x6c,
	0x69, 0x64, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x67, 0x6c, 0x69, 0x64, 0x65, 0x53, 0x6c, 0x6f, 0x70,
	0x65, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0x57, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22,
	0xe8, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6e, 0x64, 0x75,
	0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x45, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0xcf, 0x01, 0x0a, 0x14, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x2e, 0x76, 0x32, 0x42, 0x0e, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x75, 0x62, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2f, 0x6c, 0x61, 0x74, 0x74, 0x69, 0x63,
	0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x61, 0x6e, 0x64,
	0x75, 0x72, 0x69, 0x6c, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x3b, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x41,
	0x54, 0x58, 0xaa, 0x02, 0x10, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x10, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6c, 0x5c,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x1c, 0x41, 0x6e, 0x64, 0x75, 0x72,
	0x69, 0x6c, 0x5c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x41, 0x6e, 0x64, 0x75, 0x72, 0x69,
	0x6c, 0x3a, 0x3a, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_anduril_tasks_v2_shared_strike_pub_proto_rawDescOnce sync.Once
	file_anduril_tasks_v2_shared_strike_pub_proto_rawDescData = file_anduril_tasks_v2_shared_strike_pub_proto_rawDesc
)

func file_anduril_tasks_v2_shared_strike_pub_proto_rawDescGZIP() []byte {
	file_anduril_tasks_v2_shared_strike_pub_proto_rawDescOnce.Do(func() {
		file_anduril_tasks_v2_shared_strike_pub_proto_rawDescData = protoimpl.X.CompressGZIP(file_anduril_tasks_v2_shared_strike_pub_proto_rawDescData)
	})
	return file_anduril_tasks_v2_shared_strike_pub_proto_rawDescData
}

var file_anduril_tasks_v2_shared_strike_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_anduril_tasks_v2_shared_strike_pub_proto_goTypes = []any{
	(*Smack)(nil),                   // 0: anduril.tasks.v2.Smack
	(*Strike)(nil),                  // 1: anduril.tasks.v2.Strike
	(*StrikeReleaseConstraint)(nil), // 2: anduril.tasks.v2.StrikeReleaseConstraint
	(*StrikeParameters)(nil),        // 3: anduril.tasks.v2.StrikeParameters
	(*PayloadConfiguration)(nil),    // 4: anduril.tasks.v2.PayloadConfiguration
	(*ReleasePayload)(nil),          // 5: anduril.tasks.v2.ReleasePayload
	(*v2.Objective)(nil),            // 6: anduril.tasks.v2.Objective
	(*v2.AnglePair)(nil),            // 7: anduril.tasks.v2.AnglePair
	(*v2.AreaConstraints)(nil),      // 8: anduril.tasks.v2.AreaConstraints
	(*durationpb.Duration)(nil),     // 9: google.protobuf.Duration
	(*emptypb.Empty)(nil),           // 10: google.protobuf.Empty
}
var file_anduril_tasks_v2_shared_strike_pub_proto_depIdxs = []int32{
	6,  // 0: anduril.tasks.v2.Smack.objective:type_name -> anduril.tasks.v2.Objective
	3,  // 1: anduril.tasks.v2.Smack.parameters:type_name -> anduril.tasks.v2.StrikeParameters
	6,  // 2: anduril.tasks.v2.Strike.objective:type_name -> anduril.tasks.v2.Objective
	7,  // 3: anduril.tasks.v2.Strike.ingress_angle:type_name -> anduril.tasks.v2.AnglePair
	2,  // 4: anduril.tasks.v2.Strike.strike_release_constraint:type_name -> anduril.tasks.v2.StrikeReleaseConstraint
	3,  // 5: anduril.tasks.v2.Strike.parameters:type_name -> anduril.tasks.v2.StrikeParameters
	8,  // 6: anduril.tasks.v2.StrikeReleaseConstraint.release_area:type_name -> anduril.tasks.v2.AreaConstraints
	4,  // 7: anduril.tasks.v2.StrikeParameters.payloads_to_employ:type_name -> anduril.tasks.v2.PayloadConfiguration
	9,  // 8: anduril.tasks.v2.StrikeParameters.desired_impact_time:type_name -> google.protobuf.Duration
	4,  // 9: anduril.tasks.v2.ReleasePayload.payloads:type_name -> anduril.tasks.v2.PayloadConfiguration
	6,  // 10: anduril.tasks.v2.ReleasePayload.objective:type_name -> anduril.tasks.v2.Objective
	10, // 11: anduril.tasks.v2.ReleasePayload.precision_release:type_name -> google.protobuf.Empty
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_anduril_tasks_v2_shared_strike_pub_proto_init() }
func file_anduril_tasks_v2_shared_strike_pub_proto_init() {
	if File_anduril_tasks_v2_shared_strike_pub_proto != nil {
		return
	}
	file_anduril_tasks_v2_shared_strike_pub_proto_msgTypes[2].OneofWrappers = []any{
		(*StrikeReleaseConstraint_ReleaseArea)(nil),
	}
	file_anduril_tasks_v2_shared_strike_pub_proto_msgTypes[5].OneofWrappers = []any{
		(*ReleasePayload_PrecisionRelease)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_anduril_tasks_v2_shared_strike_pub_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_anduril_tasks_v2_shared_strike_pub_proto_goTypes,
		DependencyIndexes: file_anduril_tasks_v2_shared_strike_pub_proto_depIdxs,
		MessageInfos:      file_anduril_tasks_v2_shared_strike_pub_proto_msgTypes,
	}.Build()
	File_anduril_tasks_v2_shared_strike_pub_proto = out.File
	file_anduril_tasks_v2_shared_strike_pub_proto_rawDesc = nil
	file_anduril_tasks_v2_shared_strike_pub_proto_goTypes = nil
	file_anduril_tasks_v2_shared_strike_pub_proto_depIdxs = nil
}
