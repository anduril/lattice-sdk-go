// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: anduril/tasks/v2/shared/isr.pub.proto

package tasksv2

import (
	v2 "github.com/anduril/lattice-sdk-go/src/anduril/tasks/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Direction of the loiter relative to the front of the vehicle.
type OrbitDirection int32

const (
	OrbitDirection_ORBIT_DIRECTION_DIRECTION_INVALID OrbitDirection = 0
	OrbitDirection_ORBIT_DIRECTION_RIGHT             OrbitDirection = 1
	OrbitDirection_ORBIT_DIRECTION_LEFT              OrbitDirection = 2
)

// Enum value maps for OrbitDirection.
var (
	OrbitDirection_name = map[int32]string{
		0: "ORBIT_DIRECTION_DIRECTION_INVALID",
		1: "ORBIT_DIRECTION_RIGHT",
		2: "ORBIT_DIRECTION_LEFT",
	}
	OrbitDirection_value = map[string]int32{
		"ORBIT_DIRECTION_DIRECTION_INVALID": 0,
		"ORBIT_DIRECTION_RIGHT":             1,
		"ORBIT_DIRECTION_LEFT":              2,
	}
)

func (x OrbitDirection) Enum() *OrbitDirection {
	p := new(OrbitDirection)
	*p = x
	return p
}

func (x OrbitDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrbitDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_tasks_v2_shared_isr_pub_proto_enumTypes[0].Descriptor()
}

func (OrbitDirection) Type() protoreflect.EnumType {
	return &file_anduril_tasks_v2_shared_isr_pub_proto_enumTypes[0]
}

func (x OrbitDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrbitDirection.Descriptor instead.
func (OrbitDirection) EnumDescriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_isr_pub_proto_rawDescGZIP(), []int{0}
}

type OrbitPattern int32

const (
	OrbitPattern_ORBIT_PATTERN_INVALID      OrbitPattern = 0
	OrbitPattern_ORBIT_PATTERN_CIRCLE       OrbitPattern = 1
	OrbitPattern_ORBIT_PATTERN_RACETRACK    OrbitPattern = 2
	OrbitPattern_ORBIT_PATTERN_FIGURE_EIGHT OrbitPattern = 3
)

// Enum value maps for OrbitPattern.
var (
	OrbitPattern_name = map[int32]string{
		0: "ORBIT_PATTERN_INVALID",
		1: "ORBIT_PATTERN_CIRCLE",
		2: "ORBIT_PATTERN_RACETRACK",
		3: "ORBIT_PATTERN_FIGURE_EIGHT",
	}
	OrbitPattern_value = map[string]int32{
		"ORBIT_PATTERN_INVALID":      0,
		"ORBIT_PATTERN_CIRCLE":       1,
		"ORBIT_PATTERN_RACETRACK":    2,
		"ORBIT_PATTERN_FIGURE_EIGHT": 3,
	}
)

func (x OrbitPattern) Enum() *OrbitPattern {
	p := new(OrbitPattern)
	*p = x
	return p
}

func (x OrbitPattern) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrbitPattern) Descriptor() protoreflect.EnumDescriptor {
	return file_anduril_tasks_v2_shared_isr_pub_proto_enumTypes[1].Descriptor()
}

func (OrbitPattern) Type() protoreflect.EnumType {
	return &file_anduril_tasks_v2_shared_isr_pub_proto_enumTypes[1]
}

func (x OrbitPattern) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrbitPattern.Descriptor instead.
func (OrbitPattern) EnumDescriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_isr_pub_proto_rawDescGZIP(), []int{1}
}

// Maps to BREVITY code INVESTIGATE.
type Investigate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates where to investigate.
	Objective *v2.Objective `protobuf:"bytes,1,opt,name=objective,proto3" json:"objective,omitempty"`
	// Optional common ISR parameters.
	Parameters    *ISRParameters `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Investigate) Reset() {
	*x = Investigate{}
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Investigate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Investigate) ProtoMessage() {}

func (x *Investigate) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Investigate.ProtoReflect.Descriptor instead.
func (*Investigate) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_isr_pub_proto_rawDescGZIP(), []int{0}
}

func (x *Investigate) GetObjective() *v2.Objective {
	if x != nil {
		return x.Objective
	}
	return nil
}

func (x *Investigate) GetParameters() *ISRParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Maps to BREVITY code ID with type Visual.
type VisualId struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates what to identify.
	Objective *v2.Objective `protobuf:"bytes,1,opt,name=objective,proto3" json:"objective,omitempty"`
	// Optional common ISR parameters.
	Parameters    *ISRParameters `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VisualId) Reset() {
	*x = VisualId{}
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VisualId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisualId) ProtoMessage() {}

func (x *VisualId) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisualId.ProtoReflect.Descriptor instead.
func (*VisualId) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_isr_pub_proto_rawDescGZIP(), []int{1}
}

func (x *VisualId) GetObjective() *v2.Objective {
	if x != nil {
		return x.Objective
	}
	return nil
}

func (x *VisualId) GetParameters() *ISRParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Maps to BREVITY code MAP.
type Map struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates where to perform the SAR.
	Objective *v2.Objective `protobuf:"bytes,1,opt,name=objective,proto3" json:"objective,omitempty"`
	// Optional common ISR parameters.
	Parameters *ISRParameters `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
	// minimum desired NIIRS (National Image Interpretability Rating Scales) see https://irp.fas.org/imint/niirs.htm
	MinNiirs      *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=min_niirs,json=minNiirs,proto3" json:"min_niirs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Map) Reset() {
	*x = Map{}
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map) ProtoMessage() {}

func (x *Map) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map.ProtoReflect.Descriptor instead.
func (*Map) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_isr_pub_proto_rawDescGZIP(), []int{2}
}

func (x *Map) GetObjective() *v2.Objective {
	if x != nil {
		return x.Objective
	}
	return nil
}

func (x *Map) GetParameters() *ISRParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *Map) GetMinNiirs() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MinNiirs
	}
	return nil
}

// Maps to the Loiter behavior within the FlightTask type within UCI v2.
type Loiter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates where to perform the loiter.
	Objective *v2.Objective `protobuf:"bytes,1,opt,name=objective,proto3" json:"objective,omitempty"`
	// Specifies the details of the loiter.
	LoiterType *LoiterType `protobuf:"bytes,2,opt,name=loiter_type,json=loiterType,proto3" json:"loiter_type,omitempty"`
	// Optional common ISR parameters.
	// The loiter radius and bearing should be inferred from the standoff_distance and standoff_angle respectively.
	Parameters    *ISRParameters `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Loiter) Reset() {
	*x = Loiter{}
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Loiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Loiter) ProtoMessage() {}

func (x *Loiter) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Loiter.ProtoReflect.Descriptor instead.
func (*Loiter) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_isr_pub_proto_rawDescGZIP(), []int{3}
}

func (x *Loiter) GetObjective() *v2.Objective {
	if x != nil {
		return x.Objective
	}
	return nil
}

func (x *Loiter) GetLoiterType() *LoiterType {
	if x != nil {
		return x.LoiterType
	}
	return nil
}

func (x *Loiter) GetParameters() *ISRParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Represents intent to search an area. Maps to the Area Search Team Task within the Mission Autonomy Task Model.
type AreaSearch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates where to perform the area search.
	Objective *v2.Objective `protobuf:"bytes,1,opt,name=objective,proto3" json:"objective,omitempty"`
	// Priors that can be used to inform this AreaSearch.
	Priors []*Prior `protobuf:"bytes,2,rep,name=priors,proto3" json:"priors,omitempty"`
	// Agents participating in this AreaSearch.
	Participants []*v2.Agent `protobuf:"bytes,3,rep,name=participants,proto3" json:"participants,omitempty"`
	// Control Area for this AreaSearch.
	ControlAreas  []*v2.ControlArea `protobuf:"bytes,4,rep,name=control_areas,json=controlAreas,proto3" json:"control_areas,omitempty"` // TODO: populate remaining fields here as we iterate on the AreaSearch integration.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AreaSearch) Reset() {
	*x = AreaSearch{}
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AreaSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaSearch) ProtoMessage() {}

func (x *AreaSearch) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaSearch.ProtoReflect.Descriptor instead.
func (*AreaSearch) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_isr_pub_proto_rawDescGZIP(), []int{4}
}

func (x *AreaSearch) GetObjective() *v2.Objective {
	if x != nil {
		return x.Objective
	}
	return nil
}

func (x *AreaSearch) GetPriors() []*Prior {
	if x != nil {
		return x.Priors
	}
	return nil
}

func (x *AreaSearch) GetParticipants() []*v2.Agent {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *AreaSearch) GetControlAreas() []*v2.ControlArea {
	if x != nil {
		return x.ControlAreas
	}
	return nil
}

// Represents intent to search a volume. Maps to the Volume Search Team Task within the Mission Autonomy Task Model.
type VolumeSearch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates where to perform the volume search.
	Objective *v2.Objective `protobuf:"bytes,1,opt,name=objective,proto3" json:"objective,omitempty"`
	// Priors that can be used to inform this VolumeSearch.
	Priors []*Prior `protobuf:"bytes,2,rep,name=priors,proto3" json:"priors,omitempty"`
	// Agents participating in this VolumeSearch.
	Participants []*v2.Agent `protobuf:"bytes,3,rep,name=participants,proto3" json:"participants,omitempty"`
	// Control Area for this VolumeSearch.
	ControlAreas  []*v2.ControlArea `protobuf:"bytes,4,rep,name=control_areas,json=controlAreas,proto3" json:"control_areas,omitempty"` // TODO: populate remaining fields here as we iterate on the VolumeSearch integration.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeSearch) Reset() {
	*x = VolumeSearch{}
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSearch) ProtoMessage() {}

func (x *VolumeSearch) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSearch.ProtoReflect.Descriptor instead.
func (*VolumeSearch) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_isr_pub_proto_rawDescGZIP(), []int{5}
}

func (x *VolumeSearch) GetObjective() *v2.Objective {
	if x != nil {
		return x.Objective
	}
	return nil
}

func (x *VolumeSearch) GetPriors() []*Prior {
	if x != nil {
		return x.Priors
	}
	return nil
}

func (x *VolumeSearch) GetParticipants() []*v2.Agent {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *VolumeSearch) GetControlAreas() []*v2.ControlArea {
	if x != nil {
		return x.ControlAreas
	}
	return nil
}

// Task to improve the quality of a track. Maps to the Improve Track Task within the Mission Autonomy Task Model.
type ImproveTrackQuality struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates the target track that is having its quality improved.
	Objective *v2.Objective `protobuf:"bytes,1,opt,name=objective,proto3" json:"objective,omitempty"`
	// Task will complete when the requested track reaches a TQ >= the termination_track_quality.
	TerminationTrackQuality uint32 `protobuf:"varint,2,opt,name=termination_track_quality,json=terminationTrackQuality,proto3" json:"termination_track_quality,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ImproveTrackQuality) Reset() {
	*x = ImproveTrackQuality{}
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImproveTrackQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImproveTrackQuality) ProtoMessage() {}

func (x *ImproveTrackQuality) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImproveTrackQuality.ProtoReflect.Descriptor instead.
func (*ImproveTrackQuality) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_isr_pub_proto_rawDescGZIP(), []int{6}
}

func (x *ImproveTrackQuality) GetObjective() *v2.Objective {
	if x != nil {
		return x.Objective
	}
	return nil
}

func (x *ImproveTrackQuality) GetTerminationTrackQuality() uint32 {
	if x != nil {
		return x.TerminationTrackQuality
	}
	return 0
}

// Indicates intent to follow an Objective. Maps to Brevity code SHADOW.
type Shadow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates what to follow.
	Objective *v2.Objective `protobuf:"bytes,1,opt,name=objective,proto3" json:"objective,omitempty"`
	// Optional common ISR parameters.
	Parameters    *ISRParameters `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Shadow) Reset() {
	*x = Shadow{}
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Shadow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shadow) ProtoMessage() {}

func (x *Shadow) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shadow.ProtoReflect.Descriptor instead.
func (*Shadow) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_isr_pub_proto_rawDescGZIP(), []int{7}
}

func (x *Shadow) GetObjective() *v2.Objective {
	if x != nil {
		return x.Objective
	}
	return nil
}

func (x *Shadow) GetParameters() *ISRParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Maps to UCI v2 LoiterType.
type LoiterType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to LoiterType:
	//
	//	*LoiterType_OrbitType
	LoiterType    isLoiterType_LoiterType `protobuf_oneof:"loiter_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoiterType) Reset() {
	*x = LoiterType{}
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoiterType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoiterType) ProtoMessage() {}

func (x *LoiterType) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoiterType.ProtoReflect.Descriptor instead.
func (*LoiterType) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_isr_pub_proto_rawDescGZIP(), []int{8}
}

func (x *LoiterType) GetLoiterType() isLoiterType_LoiterType {
	if x != nil {
		return x.LoiterType
	}
	return nil
}

func (x *LoiterType) GetOrbitType() *OrbitType {
	if x != nil {
		if x, ok := x.LoiterType.(*LoiterType_OrbitType); ok {
			return x.OrbitType
		}
	}
	return nil
}

type isLoiterType_LoiterType interface {
	isLoiterType_LoiterType()
}

type LoiterType_OrbitType struct {
	OrbitType *OrbitType `protobuf:"bytes,1,opt,name=orbit_type,json=orbitType,proto3,oneof"`
}

func (*LoiterType_OrbitType) isLoiterType_LoiterType() {}

type OrbitType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates the direction in which to perform the loiter.
	Direction OrbitDirection `protobuf:"varint,1,opt,name=direction,proto3,enum=anduril.tasks.v2.OrbitDirection" json:"direction,omitempty"`
	// Indicates the loiter pattern to perform.
	Pattern OrbitPattern `protobuf:"varint,2,opt,name=pattern,proto3,enum=anduril.tasks.v2.OrbitPattern" json:"pattern,omitempty"`
	// Indicates the amount of time to be spent in loiter.
	Duration      *OrbitDuration `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrbitType) Reset() {
	*x = OrbitType{}
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrbitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrbitType) ProtoMessage() {}

func (x *OrbitType) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrbitType.ProtoReflect.Descriptor instead.
func (*OrbitType) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_isr_pub_proto_rawDescGZIP(), []int{9}
}

func (x *OrbitType) GetDirection() OrbitDirection {
	if x != nil {
		return x.Direction
	}
	return OrbitDirection_ORBIT_DIRECTION_DIRECTION_INVALID
}

func (x *OrbitType) GetPattern() OrbitPattern {
	if x != nil {
		return x.Pattern
	}
	return OrbitPattern_ORBIT_PATTERN_INVALID
}

func (x *OrbitType) GetDuration() *OrbitDuration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type OrbitDuration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Duration:
	//
	//	*OrbitDuration_DurationRange
	//	*OrbitDuration_NumOfOrbits
	Duration      isOrbitDuration_Duration `protobuf_oneof:"duration"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrbitDuration) Reset() {
	*x = OrbitDuration{}
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrbitDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrbitDuration) ProtoMessage() {}

func (x *OrbitDuration) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrbitDuration.ProtoReflect.Descriptor instead.
func (*OrbitDuration) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_isr_pub_proto_rawDescGZIP(), []int{10}
}

func (x *OrbitDuration) GetDuration() isOrbitDuration_Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *OrbitDuration) GetDurationRange() *v2.DurationRange {
	if x != nil {
		if x, ok := x.Duration.(*OrbitDuration_DurationRange); ok {
			return x.DurationRange
		}
	}
	return nil
}

func (x *OrbitDuration) GetNumOfOrbits() uint64 {
	if x != nil {
		if x, ok := x.Duration.(*OrbitDuration_NumOfOrbits); ok {
			return x.NumOfOrbits
		}
	}
	return 0
}

type isOrbitDuration_Duration interface {
	isOrbitDuration_Duration()
}

type OrbitDuration_DurationRange struct {
	DurationRange *v2.DurationRange `protobuf:"bytes,1,opt,name=duration_range,json=durationRange,proto3,oneof"`
}

type OrbitDuration_NumOfOrbits struct {
	NumOfOrbits uint64 `protobuf:"varint,2,opt,name=num_of_orbits,json=numOfOrbits,proto3,oneof"`
}

func (*OrbitDuration_DurationRange) isOrbitDuration_Duration() {}

func (*OrbitDuration_NumOfOrbits) isOrbitDuration_Duration() {}

// A Prior that can be used to inform an ISR Task.
type Prior struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Prior:
	//
	//	*Prior_EntityId
	//	*Prior_Point
	Prior         isPrior_Prior `protobuf_oneof:"prior"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Prior) Reset() {
	*x = Prior{}
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Prior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prior) ProtoMessage() {}

func (x *Prior) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prior.ProtoReflect.Descriptor instead.
func (*Prior) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_isr_pub_proto_rawDescGZIP(), []int{11}
}

func (x *Prior) GetPrior() isPrior_Prior {
	if x != nil {
		return x.Prior
	}
	return nil
}

func (x *Prior) GetEntityId() string {
	if x != nil {
		if x, ok := x.Prior.(*Prior_EntityId); ok {
			return x.EntityId
		}
	}
	return ""
}

func (x *Prior) GetPoint() *v2.Point {
	if x != nil {
		if x, ok := x.Prior.(*Prior_Point); ok {
			return x.Point
		}
	}
	return nil
}

type isPrior_Prior interface {
	isPrior_Prior()
}

type Prior_EntityId struct {
	// Prefer Entity priors whenever the prior is in fact an entity. In other words, don't take position/point
	// out of an entity and pass it as a simple point.
	EntityId string `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3,oneof"`
}

type Prior_Point struct {
	// Point priors for simple reference points that are not geo entities.
	Point *v2.Point `protobuf:"bytes,5,opt,name=point,proto3,oneof"`
}

func (*Prior_EntityId) isPrior_Prior() {}

func (*Prior_Point) isPrior_Prior() {}

// Common parameters for ISR Tasks.
type ISRParameters struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates the target speed of the asset. Units are meters per second.
	SpeedMS *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=speed_m_s,json=speedMS,proto3" json:"speed_m_s,omitempty"`
	// Indicates the standoff distance from the objective. The units are in meters.
	StandoffDistanceM *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=standoff_distance_m,json=standoffDistanceM,proto3" json:"standoff_distance_m,omitempty"`
	// Indicates the standoff angle relative to the objective's bearing orientation (defaults to north).
	// In particular, the asset should approach target from this angle. Units in degrees.
	StandoffAngle *wrapperspb.FloatValue `protobuf:"bytes,5,opt,name=standoff_angle,json=standoffAngle,proto3" json:"standoff_angle,omitempty"`
	// Indicates the amount of time in milliseconds to execute an ISR task before expiring. 0 value indicates no
	// expiration.
	ExpirationTimeMs *wrapperspb.UInt64Value `protobuf:"bytes,6,opt,name=expiration_time_ms,json=expirationTimeMs,proto3" json:"expiration_time_ms,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ISRParameters) Reset() {
	*x = ISRParameters{}
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ISRParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ISRParameters) ProtoMessage() {}

func (x *ISRParameters) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ISRParameters.ProtoReflect.Descriptor instead.
func (*ISRParameters) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_isr_pub_proto_rawDescGZIP(), []int{12}
}

func (x *ISRParameters) GetSpeedMS() *wrapperspb.FloatValue {
	if x != nil {
		return x.SpeedMS
	}
	return nil
}

func (x *ISRParameters) GetStandoffDistanceM() *wrapperspb.FloatValue {
	if x != nil {
		return x.StandoffDistanceM
	}
	return nil
}

func (x *ISRParameters) GetStandoffAngle() *wrapperspb.FloatValue {
	if x != nil {
		return x.StandoffAngle
	}
	return nil
}

func (x *ISRParameters) GetExpirationTimeMs() *wrapperspb.UInt64Value {
	if x != nil {
		return x.ExpirationTimeMs
	}
	return nil
}

// Gimbal pointing command.
type GimbalPoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to PointType:
	//
	//	*GimbalPoint_LookAt
	//	*GimbalPoint_CelestialLocation
	//	*GimbalPoint_FrameLocation
	PointType isGimbalPoint_PointType `protobuf_oneof:"point_type"`
	// Optional common ISR parameters.
	Parameters    *ISRParameters `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GimbalPoint) Reset() {
	*x = GimbalPoint{}
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GimbalPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GimbalPoint) ProtoMessage() {}

func (x *GimbalPoint) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GimbalPoint.ProtoReflect.Descriptor instead.
func (*GimbalPoint) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_isr_pub_proto_rawDescGZIP(), []int{13}
}

func (x *GimbalPoint) GetPointType() isGimbalPoint_PointType {
	if x != nil {
		return x.PointType
	}
	return nil
}

func (x *GimbalPoint) GetLookAt() *v2.Objective {
	if x != nil {
		if x, ok := x.PointType.(*GimbalPoint_LookAt); ok {
			return x.LookAt
		}
	}
	return nil
}

func (x *GimbalPoint) GetCelestialLocation() *AzimuthElevationPoint {
	if x != nil {
		if x, ok := x.PointType.(*GimbalPoint_CelestialLocation); ok {
			return x.CelestialLocation
		}
	}
	return nil
}

func (x *GimbalPoint) GetFrameLocation() *FramePoint {
	if x != nil {
		if x, ok := x.PointType.(*GimbalPoint_FrameLocation); ok {
			return x.FrameLocation
		}
	}
	return nil
}

func (x *GimbalPoint) GetParameters() *ISRParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type isGimbalPoint_PointType interface {
	isGimbalPoint_PointType()
}

type GimbalPoint_LookAt struct {
	// Point the gimbal at and lock on, continuing to look at a specific objective even as the platform moves.
	LookAt *v2.Objective `protobuf:"bytes,1,opt,name=look_at,json=lookAt,proto3,oneof"`
}

type GimbalPoint_CelestialLocation struct {
	// Point the gimbal at a fixed azimuth/elevation with respect to the platform frame.
	CelestialLocation *AzimuthElevationPoint `protobuf:"bytes,2,opt,name=celestial_location,json=celestialLocation,proto3,oneof"`
}

type GimbalPoint_FrameLocation struct {
	// Point gimbal to an [x, y] location in the video feed.
	FrameLocation *FramePoint `protobuf:"bytes,4,opt,name=frame_location,json=frameLocation,proto3,oneof"`
}

func (*GimbalPoint_LookAt) isGimbalPoint_PointType() {}

func (*GimbalPoint_CelestialLocation) isGimbalPoint_PointType() {}

func (*GimbalPoint_FrameLocation) isGimbalPoint_PointType() {}

// Celestial location with respect to a platform frame.
type AzimuthElevationPoint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Azimuth       float64                `protobuf:"fixed64,1,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	Elevation     float64                `protobuf:"fixed64,2,opt,name=elevation,proto3" json:"elevation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AzimuthElevationPoint) Reset() {
	*x = AzimuthElevationPoint{}
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AzimuthElevationPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzimuthElevationPoint) ProtoMessage() {}

func (x *AzimuthElevationPoint) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzimuthElevationPoint.ProtoReflect.Descriptor instead.
func (*AzimuthElevationPoint) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_isr_pub_proto_rawDescGZIP(), []int{14}
}

func (x *AzimuthElevationPoint) GetAzimuth() float64 {
	if x != nil {
		return x.Azimuth
	}
	return 0
}

func (x *AzimuthElevationPoint) GetElevation() float64 {
	if x != nil {
		return x.Elevation
	}
	return 0
}

// Point clicked in the frame of the video feed.
type FramePoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Frame-normalized location in frame on the x-axis, range (0, 1).
	// For example, x = 0.3 implies a pixel location of 0.3 * image_width.
	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	// Frame-normalized location in frame on the y-axis, range (0, 1).
	// For example, y = 0.3 implies a pixel location of 0.3 * image_height.
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	// Timestamp of frame
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FramePoint) Reset() {
	*x = FramePoint{}
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FramePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FramePoint) ProtoMessage() {}

func (x *FramePoint) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FramePoint.ProtoReflect.Descriptor instead.
func (*FramePoint) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_isr_pub_proto_rawDescGZIP(), []int{15}
}

func (x *FramePoint) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *FramePoint) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *FramePoint) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Command for setting gimbal zoom levels.
type GimbalZoom struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Mode:
	//
	//	*GimbalZoom_SetHorizontalFov
	//	*GimbalZoom_SetMagnification
	Mode          isGimbalZoom_Mode `protobuf_oneof:"mode"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GimbalZoom) Reset() {
	*x = GimbalZoom{}
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GimbalZoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GimbalZoom) ProtoMessage() {}

func (x *GimbalZoom) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GimbalZoom.ProtoReflect.Descriptor instead.
func (*GimbalZoom) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_isr_pub_proto_rawDescGZIP(), []int{16}
}

func (x *GimbalZoom) GetMode() isGimbalZoom_Mode {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *GimbalZoom) GetSetHorizontalFov() *wrapperspb.DoubleValue {
	if x != nil {
		if x, ok := x.Mode.(*GimbalZoom_SetHorizontalFov); ok {
			return x.SetHorizontalFov
		}
	}
	return nil
}

func (x *GimbalZoom) GetSetMagnification() *wrapperspb.FloatValue {
	if x != nil {
		if x, ok := x.Mode.(*GimbalZoom_SetMagnification); ok {
			return x.SetMagnification
		}
	}
	return nil
}

type isGimbalZoom_Mode interface {
	isGimbalZoom_Mode()
}

type GimbalZoom_SetHorizontalFov struct {
	// Set the zoom level to the provided horizontal field of view in degrees.
	SetHorizontalFov *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=set_horizontal_fov,json=setHorizontalFov,proto3,oneof"`
}

type GimbalZoom_SetMagnification struct {
	// Set the zoom level to the provided zoom level.
	SetMagnification *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=set_magnification,json=setMagnification,proto3,oneof"`
}

func (*GimbalZoom_SetHorizontalFov) isGimbalZoom_Mode() {}

func (*GimbalZoom_SetMagnification) isGimbalZoom_Mode() {}

// Maps to BREVITY code ID with type MONITOR. To task assets to maintain sensor awareness
// on a given objective.
type Monitor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates objective to monitor.
	Objective     *v2.Objective `protobuf:"bytes,1,opt,name=objective,proto3" json:"objective,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Monitor) Reset() {
	*x = Monitor{}
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Monitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Monitor) ProtoMessage() {}

func (x *Monitor) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Monitor.ProtoReflect.Descriptor instead.
func (*Monitor) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_isr_pub_proto_rawDescGZIP(), []int{17}
}

func (x *Monitor) GetObjective() *v2.Objective {
	if x != nil {
		return x.Objective
	}
	return nil
}

// Maps to BREVITY code ID with type SCAN. To task assets to find and report any tracks in a geographic area.
type Scan struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates where to scan.
	Objective *v2.Objective `protobuf:"bytes,1,opt,name=objective,proto3" json:"objective,omitempty"`
	// Optional common ISR parameters.
	Parameters    *ISRParameters `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scan) Reset() {
	*x = Scan{}
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scan) ProtoMessage() {}

func (x *Scan) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scan.ProtoReflect.Descriptor instead.
func (*Scan) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_isr_pub_proto_rawDescGZIP(), []int{18}
}

func (x *Scan) GetObjective() *v2.Objective {
	if x != nil {
		return x.Objective
	}
	return nil
}

func (x *Scan) GetParameters() *ISRParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Performs a Battle Damage Assessment (BDA). Does not map to any Task in either UCI or BREVITY.
type BattleDamageAssessment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Objective to perform BDA on.
	Objective *v2.Objective `protobuf:"bytes,1,opt,name=objective,proto3" json:"objective,omitempty"`
	// Optional common ISR parameters.
	Parameters    *ISRParameters `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BattleDamageAssessment) Reset() {
	*x = BattleDamageAssessment{}
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BattleDamageAssessment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleDamageAssessment) ProtoMessage() {}

func (x *BattleDamageAssessment) ProtoReflect() protoreflect.Message {
	mi := &file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleDamageAssessment.ProtoReflect.Descriptor instead.
func (*BattleDamageAssessment) Descriptor() ([]byte, []int) {
	return file_anduril_tasks_v2_shared_isr_pub_proto_rawDescGZIP(), []int{19}
}

func (x *BattleDamageAssessment) GetObjective() *v2.Objective {
	if x != nil {
		return x.Objective
	}
	return nil
}

func (x *BattleDamageAssessment) GetParameters() *ISRParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

var File_anduril_tasks_v2_shared_isr_pub_proto protoreflect.FileDescriptor

const file_anduril_tasks_v2_shared_isr_pub_proto_rawDesc = "" +
	"\n" +
	"%anduril/tasks/v2/shared/isr.pub.proto\x12\x10anduril.tasks.v2\x1a!anduril/tasks/v2/common.pub.proto\x1a$anduril/tasks/v2/objective.pub.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/wrappers.proto\"\x89\x01\n" +
	"\vInvestigate\x129\n" +
	"\tobjective\x18\x01 \x01(\v2\x1b.anduril.tasks.v2.ObjectiveR\tobjective\x12?\n" +
	"\n" +
	"parameters\x18\x02 \x01(\v2\x1f.anduril.tasks.v2.ISRParametersR\n" +
	"parameters\"\x86\x01\n" +
	"\bVisualId\x129\n" +
	"\tobjective\x18\x01 \x01(\v2\x1b.anduril.tasks.v2.ObjectiveR\tobjective\x12?\n" +
	"\n" +
	"parameters\x18\x02 \x01(\v2\x1f.anduril.tasks.v2.ISRParametersR\n" +
	"parameters\"\xbc\x01\n" +
	"\x03Map\x129\n" +
	"\tobjective\x18\x01 \x01(\v2\x1b.anduril.tasks.v2.ObjectiveR\tobjective\x12?\n" +
	"\n" +
	"parameters\x18\x02 \x01(\v2\x1f.anduril.tasks.v2.ISRParametersR\n" +
	"parameters\x129\n" +
	"\tmin_niirs\x18\x03 \x01(\v2\x1c.google.protobuf.UInt32ValueR\bminNiirs\"\xc3\x01\n" +
	"\x06Loiter\x129\n" +
	"\tobjective\x18\x01 \x01(\v2\x1b.anduril.tasks.v2.ObjectiveR\tobjective\x12=\n" +
	"\vloiter_type\x18\x02 \x01(\v2\x1c.anduril.tasks.v2.LoiterTypeR\n" +
	"loiterType\x12?\n" +
	"\n" +
	"parameters\x18\x03 \x01(\v2\x1f.anduril.tasks.v2.ISRParametersR\n" +
	"parameters\"\xf9\x01\n" +
	"\n" +
	"AreaSearch\x129\n" +
	"\tobjective\x18\x01 \x01(\v2\x1b.anduril.tasks.v2.ObjectiveR\tobjective\x12/\n" +
	"\x06priors\x18\x02 \x03(\v2\x17.anduril.tasks.v2.PriorR\x06priors\x12;\n" +
	"\fparticipants\x18\x03 \x03(\v2\x17.anduril.tasks.v2.AgentR\fparticipants\x12B\n" +
	"\rcontrol_areas\x18\x04 \x03(\v2\x1d.anduril.tasks.v2.ControlAreaR\fcontrolAreas\"\xfb\x01\n" +
	"\fVolumeSearch\x129\n" +
	"\tobjective\x18\x01 \x01(\v2\x1b.anduril.tasks.v2.ObjectiveR\tobjective\x12/\n" +
	"\x06priors\x18\x02 \x03(\v2\x17.anduril.tasks.v2.PriorR\x06priors\x12;\n" +
	"\fparticipants\x18\x03 \x03(\v2\x17.anduril.tasks.v2.AgentR\fparticipants\x12B\n" +
	"\rcontrol_areas\x18\x04 \x03(\v2\x1d.anduril.tasks.v2.ControlAreaR\fcontrolAreas\"\x8c\x01\n" +
	"\x13ImproveTrackQuality\x129\n" +
	"\tobjective\x18\x01 \x01(\v2\x1b.anduril.tasks.v2.ObjectiveR\tobjective\x12:\n" +
	"\x19termination_track_quality\x18\x02 \x01(\rR\x17terminationTrackQuality\"\x84\x01\n" +
	"\x06Shadow\x129\n" +
	"\tobjective\x18\x01 \x01(\v2\x1b.anduril.tasks.v2.ObjectiveR\tobjective\x12?\n" +
	"\n" +
	"parameters\x18\x02 \x01(\v2\x1f.anduril.tasks.v2.ISRParametersR\n" +
	"parameters\"Y\n" +
	"\n" +
	"LoiterType\x12<\n" +
	"\n" +
	"orbit_type\x18\x01 \x01(\v2\x1b.anduril.tasks.v2.OrbitTypeH\x00R\torbitTypeB\r\n" +
	"\vloiter_type\"\xc2\x01\n" +
	"\tOrbitType\x12>\n" +
	"\tdirection\x18\x01 \x01(\x0e2 .anduril.tasks.v2.OrbitDirectionR\tdirection\x128\n" +
	"\apattern\x18\x02 \x01(\x0e2\x1e.anduril.tasks.v2.OrbitPatternR\apattern\x12;\n" +
	"\bduration\x18\x03 \x01(\v2\x1f.anduril.tasks.v2.OrbitDurationR\bduration\"\x8b\x01\n" +
	"\rOrbitDuration\x12H\n" +
	"\x0eduration_range\x18\x01 \x01(\v2\x1f.anduril.tasks.v2.DurationRangeH\x00R\rdurationRange\x12$\n" +
	"\rnum_of_orbits\x18\x02 \x01(\x04H\x00R\vnumOfOrbitsB\n" +
	"\n" +
	"\bduration\"`\n" +
	"\x05Prior\x12\x1d\n" +
	"\tentity_id\x18\x01 \x01(\tH\x00R\bentityId\x12/\n" +
	"\x05point\x18\x05 \x01(\v2\x17.anduril.tasks.v2.PointH\x00R\x05pointB\a\n" +
	"\x05prior\"\xb1\x02\n" +
	"\rISRParameters\x127\n" +
	"\tspeed_m_s\x18\x02 \x01(\v2\x1b.google.protobuf.FloatValueR\aspeedMS\x12K\n" +
	"\x13standoff_distance_m\x18\x03 \x01(\v2\x1b.google.protobuf.FloatValueR\x11standoffDistanceM\x12B\n" +
	"\x0estandoff_angle\x18\x05 \x01(\v2\x1b.google.protobuf.FloatValueR\rstandoffAngle\x12J\n" +
	"\x12expiration_time_ms\x18\x06 \x01(\v2\x1c.google.protobuf.UInt64ValueR\x10expirationTimeMsJ\x04\b\x01\x10\x02J\x04\b\x04\x10\x05\"\xb5\x02\n" +
	"\vGimbalPoint\x126\n" +
	"\alook_at\x18\x01 \x01(\v2\x1b.anduril.tasks.v2.ObjectiveH\x00R\x06lookAt\x12X\n" +
	"\x12celestial_location\x18\x02 \x01(\v2'.anduril.tasks.v2.AzimuthElevationPointH\x00R\x11celestialLocation\x12E\n" +
	"\x0eframe_location\x18\x04 \x01(\v2\x1c.anduril.tasks.v2.FramePointH\x00R\rframeLocation\x12?\n" +
	"\n" +
	"parameters\x18\x03 \x01(\v2\x1f.anduril.tasks.v2.ISRParametersR\n" +
	"parametersB\f\n" +
	"\n" +
	"point_type\"O\n" +
	"\x15AzimuthElevationPoint\x12\x18\n" +
	"\aazimuth\x18\x01 \x01(\x01R\aazimuth\x12\x1c\n" +
	"\televation\x18\x02 \x01(\x01R\televation\"b\n" +
	"\n" +
	"FramePoint\x12\f\n" +
	"\x01x\x18\x01 \x01(\x02R\x01x\x12\f\n" +
	"\x01y\x18\x02 \x01(\x02R\x01y\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\"\xae\x01\n" +
	"\n" +
	"GimbalZoom\x12L\n" +
	"\x12set_horizontal_fov\x18\x01 \x01(\v2\x1c.google.protobuf.DoubleValueH\x00R\x10setHorizontalFov\x12J\n" +
	"\x11set_magnification\x18\x02 \x01(\v2\x1b.google.protobuf.FloatValueH\x00R\x10setMagnificationB\x06\n" +
	"\x04mode\"P\n" +
	"\aMonitor\x129\n" +
	"\tobjective\x18\x01 \x01(\v2\x1b.anduril.tasks.v2.ObjectiveR\tobjectiveJ\x04\b\x02\x10\x03J\x04\b\x03\x10\x04\"\x82\x01\n" +
	"\x04Scan\x129\n" +
	"\tobjective\x18\x01 \x01(\v2\x1b.anduril.tasks.v2.ObjectiveR\tobjective\x12?\n" +
	"\n" +
	"parameters\x18\x02 \x01(\v2\x1f.anduril.tasks.v2.ISRParametersR\n" +
	"parameters\"\x94\x01\n" +
	"\x16BattleDamageAssessment\x129\n" +
	"\tobjective\x18\x01 \x01(\v2\x1b.anduril.tasks.v2.ObjectiveR\tobjective\x12?\n" +
	"\n" +
	"parameters\x18\x02 \x01(\v2\x1f.anduril.tasks.v2.ISRParametersR\n" +
	"parameters*l\n" +
	"\x0eOrbitDirection\x12%\n" +
	"!ORBIT_DIRECTION_DIRECTION_INVALID\x10\x00\x12\x19\n" +
	"\x15ORBIT_DIRECTION_RIGHT\x10\x01\x12\x18\n" +
	"\x14ORBIT_DIRECTION_LEFT\x10\x02*\x80\x01\n" +
	"\fOrbitPattern\x12\x19\n" +
	"\x15ORBIT_PATTERN_INVALID\x10\x00\x12\x18\n" +
	"\x14ORBIT_PATTERN_CIRCLE\x10\x01\x12\x1b\n" +
	"\x17ORBIT_PATTERN_RACETRACK\x10\x02\x12\x1e\n" +
	"\x1aORBIT_PATTERN_FIGURE_EIGHT\x10\x03B\xcc\x01\n" +
	"\x14com.anduril.tasks.v2B\vIsrPubProtoP\x01ZEgithub.com/anduril/lattice-sdk-go/src/anduril/tasks/v2/shared;tasksv2\xa2\x02\x03ATX\xaa\x02\x10Anduril.Tasks.V2\xca\x02\x10Anduril\\Tasks\\V2\xe2\x02\x1cAnduril\\Tasks\\V2\\GPBMetadata\xea\x02\x12Anduril::Tasks::V2b\x06proto3"

var (
	file_anduril_tasks_v2_shared_isr_pub_proto_rawDescOnce sync.Once
	file_anduril_tasks_v2_shared_isr_pub_proto_rawDescData []byte
)

func file_anduril_tasks_v2_shared_isr_pub_proto_rawDescGZIP() []byte {
	file_anduril_tasks_v2_shared_isr_pub_proto_rawDescOnce.Do(func() {
		file_anduril_tasks_v2_shared_isr_pub_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_anduril_tasks_v2_shared_isr_pub_proto_rawDesc), len(file_anduril_tasks_v2_shared_isr_pub_proto_rawDesc)))
	})
	return file_anduril_tasks_v2_shared_isr_pub_proto_rawDescData
}

var file_anduril_tasks_v2_shared_isr_pub_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_anduril_tasks_v2_shared_isr_pub_proto_goTypes = []any{
	(OrbitDirection)(0),            // 0: anduril.tasks.v2.OrbitDirection
	(OrbitPattern)(0),              // 1: anduril.tasks.v2.OrbitPattern
	(*Investigate)(nil),            // 2: anduril.tasks.v2.Investigate
	(*VisualId)(nil),               // 3: anduril.tasks.v2.VisualId
	(*Map)(nil),                    // 4: anduril.tasks.v2.Map
	(*Loiter)(nil),                 // 5: anduril.tasks.v2.Loiter
	(*AreaSearch)(nil),             // 6: anduril.tasks.v2.AreaSearch
	(*VolumeSearch)(nil),           // 7: anduril.tasks.v2.VolumeSearch
	(*ImproveTrackQuality)(nil),    // 8: anduril.tasks.v2.ImproveTrackQuality
	(*Shadow)(nil),                 // 9: anduril.tasks.v2.Shadow
	(*LoiterType)(nil),             // 10: anduril.tasks.v2.LoiterType
	(*OrbitType)(nil),              // 11: anduril.tasks.v2.OrbitType
	(*OrbitDuration)(nil),          // 12: anduril.tasks.v2.OrbitDuration
	(*Prior)(nil),                  // 13: anduril.tasks.v2.Prior
	(*ISRParameters)(nil),          // 14: anduril.tasks.v2.ISRParameters
	(*GimbalPoint)(nil),            // 15: anduril.tasks.v2.GimbalPoint
	(*AzimuthElevationPoint)(nil),  // 16: anduril.tasks.v2.AzimuthElevationPoint
	(*FramePoint)(nil),             // 17: anduril.tasks.v2.FramePoint
	(*GimbalZoom)(nil),             // 18: anduril.tasks.v2.GimbalZoom
	(*Monitor)(nil),                // 19: anduril.tasks.v2.Monitor
	(*Scan)(nil),                   // 20: anduril.tasks.v2.Scan
	(*BattleDamageAssessment)(nil), // 21: anduril.tasks.v2.BattleDamageAssessment
	(*v2.Objective)(nil),           // 22: anduril.tasks.v2.Objective
	(*wrapperspb.UInt32Value)(nil), // 23: google.protobuf.UInt32Value
	(*v2.Agent)(nil),               // 24: anduril.tasks.v2.Agent
	(*v2.ControlArea)(nil),         // 25: anduril.tasks.v2.ControlArea
	(*v2.DurationRange)(nil),       // 26: anduril.tasks.v2.DurationRange
	(*v2.Point)(nil),               // 27: anduril.tasks.v2.Point
	(*wrapperspb.FloatValue)(nil),  // 28: google.protobuf.FloatValue
	(*wrapperspb.UInt64Value)(nil), // 29: google.protobuf.UInt64Value
	(*timestamppb.Timestamp)(nil),  // 30: google.protobuf.Timestamp
	(*wrapperspb.DoubleValue)(nil), // 31: google.protobuf.DoubleValue
}
var file_anduril_tasks_v2_shared_isr_pub_proto_depIdxs = []int32{
	22, // 0: anduril.tasks.v2.Investigate.objective:type_name -> anduril.tasks.v2.Objective
	14, // 1: anduril.tasks.v2.Investigate.parameters:type_name -> anduril.tasks.v2.ISRParameters
	22, // 2: anduril.tasks.v2.VisualId.objective:type_name -> anduril.tasks.v2.Objective
	14, // 3: anduril.tasks.v2.VisualId.parameters:type_name -> anduril.tasks.v2.ISRParameters
	22, // 4: anduril.tasks.v2.Map.objective:type_name -> anduril.tasks.v2.Objective
	14, // 5: anduril.tasks.v2.Map.parameters:type_name -> anduril.tasks.v2.ISRParameters
	23, // 6: anduril.tasks.v2.Map.min_niirs:type_name -> google.protobuf.UInt32Value
	22, // 7: anduril.tasks.v2.Loiter.objective:type_name -> anduril.tasks.v2.Objective
	10, // 8: anduril.tasks.v2.Loiter.loiter_type:type_name -> anduril.tasks.v2.LoiterType
	14, // 9: anduril.tasks.v2.Loiter.parameters:type_name -> anduril.tasks.v2.ISRParameters
	22, // 10: anduril.tasks.v2.AreaSearch.objective:type_name -> anduril.tasks.v2.Objective
	13, // 11: anduril.tasks.v2.AreaSearch.priors:type_name -> anduril.tasks.v2.Prior
	24, // 12: anduril.tasks.v2.AreaSearch.participants:type_name -> anduril.tasks.v2.Agent
	25, // 13: anduril.tasks.v2.AreaSearch.control_areas:type_name -> anduril.tasks.v2.ControlArea
	22, // 14: anduril.tasks.v2.VolumeSearch.objective:type_name -> anduril.tasks.v2.Objective
	13, // 15: anduril.tasks.v2.VolumeSearch.priors:type_name -> anduril.tasks.v2.Prior
	24, // 16: anduril.tasks.v2.VolumeSearch.participants:type_name -> anduril.tasks.v2.Agent
	25, // 17: anduril.tasks.v2.VolumeSearch.control_areas:type_name -> anduril.tasks.v2.ControlArea
	22, // 18: anduril.tasks.v2.ImproveTrackQuality.objective:type_name -> anduril.tasks.v2.Objective
	22, // 19: anduril.tasks.v2.Shadow.objective:type_name -> anduril.tasks.v2.Objective
	14, // 20: anduril.tasks.v2.Shadow.parameters:type_name -> anduril.tasks.v2.ISRParameters
	11, // 21: anduril.tasks.v2.LoiterType.orbit_type:type_name -> anduril.tasks.v2.OrbitType
	0,  // 22: anduril.tasks.v2.OrbitType.direction:type_name -> anduril.tasks.v2.OrbitDirection
	1,  // 23: anduril.tasks.v2.OrbitType.pattern:type_name -> anduril.tasks.v2.OrbitPattern
	12, // 24: anduril.tasks.v2.OrbitType.duration:type_name -> anduril.tasks.v2.OrbitDuration
	26, // 25: anduril.tasks.v2.OrbitDuration.duration_range:type_name -> anduril.tasks.v2.DurationRange
	27, // 26: anduril.tasks.v2.Prior.point:type_name -> anduril.tasks.v2.Point
	28, // 27: anduril.tasks.v2.ISRParameters.speed_m_s:type_name -> google.protobuf.FloatValue
	28, // 28: anduril.tasks.v2.ISRParameters.standoff_distance_m:type_name -> google.protobuf.FloatValue
	28, // 29: anduril.tasks.v2.ISRParameters.standoff_angle:type_name -> google.protobuf.FloatValue
	29, // 30: anduril.tasks.v2.ISRParameters.expiration_time_ms:type_name -> google.protobuf.UInt64Value
	22, // 31: anduril.tasks.v2.GimbalPoint.look_at:type_name -> anduril.tasks.v2.Objective
	16, // 32: anduril.tasks.v2.GimbalPoint.celestial_location:type_name -> anduril.tasks.v2.AzimuthElevationPoint
	17, // 33: anduril.tasks.v2.GimbalPoint.frame_location:type_name -> anduril.tasks.v2.FramePoint
	14, // 34: anduril.tasks.v2.GimbalPoint.parameters:type_name -> anduril.tasks.v2.ISRParameters
	30, // 35: anduril.tasks.v2.FramePoint.timestamp:type_name -> google.protobuf.Timestamp
	31, // 36: anduril.tasks.v2.GimbalZoom.set_horizontal_fov:type_name -> google.protobuf.DoubleValue
	28, // 37: anduril.tasks.v2.GimbalZoom.set_magnification:type_name -> google.protobuf.FloatValue
	22, // 38: anduril.tasks.v2.Monitor.objective:type_name -> anduril.tasks.v2.Objective
	22, // 39: anduril.tasks.v2.Scan.objective:type_name -> anduril.tasks.v2.Objective
	14, // 40: anduril.tasks.v2.Scan.parameters:type_name -> anduril.tasks.v2.ISRParameters
	22, // 41: anduril.tasks.v2.BattleDamageAssessment.objective:type_name -> anduril.tasks.v2.Objective
	14, // 42: anduril.tasks.v2.BattleDamageAssessment.parameters:type_name -> anduril.tasks.v2.ISRParameters
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_anduril_tasks_v2_shared_isr_pub_proto_init() }
func file_anduril_tasks_v2_shared_isr_pub_proto_init() {
	if File_anduril_tasks_v2_shared_isr_pub_proto != nil {
		return
	}
	file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[8].OneofWrappers = []any{
		(*LoiterType_OrbitType)(nil),
	}
	file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[10].OneofWrappers = []any{
		(*OrbitDuration_DurationRange)(nil),
		(*OrbitDuration_NumOfOrbits)(nil),
	}
	file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[11].OneofWrappers = []any{
		(*Prior_EntityId)(nil),
		(*Prior_Point)(nil),
	}
	file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[13].OneofWrappers = []any{
		(*GimbalPoint_LookAt)(nil),
		(*GimbalPoint_CelestialLocation)(nil),
		(*GimbalPoint_FrameLocation)(nil),
	}
	file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes[16].OneofWrappers = []any{
		(*GimbalZoom_SetHorizontalFov)(nil),
		(*GimbalZoom_SetMagnification)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_anduril_tasks_v2_shared_isr_pub_proto_rawDesc), len(file_anduril_tasks_v2_shared_isr_pub_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_anduril_tasks_v2_shared_isr_pub_proto_goTypes,
		DependencyIndexes: file_anduril_tasks_v2_shared_isr_pub_proto_depIdxs,
		EnumInfos:         file_anduril_tasks_v2_shared_isr_pub_proto_enumTypes,
		MessageInfos:      file_anduril_tasks_v2_shared_isr_pub_proto_msgTypes,
	}.Build()
	File_anduril_tasks_v2_shared_isr_pub_proto = out.File
	file_anduril_tasks_v2_shared_isr_pub_proto_goTypes = nil
	file_anduril_tasks_v2_shared_isr_pub_proto_depIdxs = nil
}
