// Code generated by Fern. DO NOT EDIT.

package entities_test

import (
	context "context"
	fmt "fmt"
	v3 "github.com/anduril/lattice-sdk-go/v2/v3"
	client "github.com/anduril/lattice-sdk-go/v2/v3/client"
	option "github.com/anduril/lattice-sdk-go/v2/v3/option"
	require "github.com/stretchr/testify/require"
	gowiremock "github.com/wiremock/go-wiremock"
	wiremocktestcontainersgo "github.com/wiremock/wiremock-testcontainers-go"
	http "net/http"
	os "os"
	testing "testing"
)

// TestMain sets up shared test fixtures for all tests in this package// Global test fixtures
var (
	WireMockContainer *wiremocktestcontainersgo.WireMockContainer
	WireMockBaseURL   string
	WireMockClient    *gowiremock.Client
)

// TestMain sets up shared test fixtures for all tests in this package
func TestMain(m *testing.M) {
	// Setup shared WireMock container
	ctx := context.Background()
	container, err := wiremocktestcontainersgo.RunContainerAndStopOnCleanup(
		ctx,
		&testing.T{},
		wiremocktestcontainersgo.WithImage("docker.io/wiremock/wiremock:3.9.1"),
	)
	if err != nil {
		fmt.Printf("Failed to start WireMock container: %v\n", err)
		os.Exit(1)
	}

	// Store global references
	WireMockContainer = container

	// Try to get the base URL using the standard method first
	baseURL, err := container.Endpoint(ctx, "")
	if err == nil {
		// Standard method worked (running outside DinD)
		// This uses the mapped port (e.g., localhost:59553)
		WireMockBaseURL = "http://" + baseURL
		WireMockClient = container.Client
	} else {
		// Standard method failed, use internal IP fallback (DinD environment)
		fmt.Printf("Standard endpoint resolution failed, using internal IP fallback: %v\n", err)

		inspect, err := container.Inspect(ctx)
		if err != nil {
			fmt.Printf("Failed to inspect WireMock container: %v\n", err)
			os.Exit(1)
		}

		// Find the IP address from the container's networks
		var containerIP string
		for _, network := range inspect.NetworkSettings.Networks {
			if network.IPAddress != "" {
				containerIP = network.IPAddress
				break
			}
		}

		if containerIP == "" {
			fmt.Printf("Failed to get WireMock container IP address\n")
			os.Exit(1)
		}

		// In DinD, use the internal port directly (8080 for WireMock HTTP)
		// Don't use the mapped port since it doesn't exist in this environment
		WireMockBaseURL = fmt.Sprintf("http://%s:8080", containerIP)

		// The container.Client was created with a bad URL, so we need a new one
		WireMockClient = gowiremock.NewClient(WireMockBaseURL)
	}

	fmt.Printf("WireMock available at: %s\n", WireMockBaseURL)

	// Run all tests
	code := m.Run()

	// Cleanup
	if WireMockContainer != nil {
		WireMockContainer.Terminate(ctx)
	}

	// Exit with the same code as the tests
	os.Exit(code)
}

func TestEntitiesPublishEntityWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Put(gowiremock.URLPathTemplate("/api/v1/entities")).WithBodyPattern(gowiremock.MatchesJsonSchema("{}", "V202012")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"entityId": "entityId", "description": "description", "isLive": true, "createdTime": "2024-01-15T09:30:00Z", "expiryTime": "2024-01-15T09:30:00Z", "noExpiry": true, "status": map[string]interface{}{"platformActivity": "platformActivity", "role": "role"}, "location": map[string]interface{}{"position": map[string]interface{}{"latitudeDegrees": 1.1, "longitudeDegrees": 1.1, "altitudeHaeMeters": 1.1, "altitudeAglMeters": 1.1, "altitudeAsfMeters": 1.1, "pressureDepthMeters": 1.1}, "velocityEnu": map[string]interface{}{"e": 1.1, "n": 1.1, "u": 1.1}, "speedMps": 1.1, "acceleration": map[string]interface{}{"e": 1.1, "n": 1.1, "u": 1.1}, "attitudeEnu": map[string]interface{}{"x": 1.1, "y": 1.1, "z": 1.1, "w": 1.1}}, "locationUncertainty": map[string]interface{}{"positionEnuCov": map[string]interface{}{"mxx": 1.1, "mxy": 1.1, "mxz": 1.1, "myy": 1.1, "myz": 1.1, "mzz": 1.1}, "velocityEnuCov": map[string]interface{}{"mxx": 1.1, "mxy": 1.1, "mxz": 1.1, "myy": 1.1, "myz": 1.1, "mzz": 1.1}, "positionErrorEllipse": map[string]interface{}{"probability": 1.1, "semiMajorAxisM": 1.1, "semiMinorAxisM": 1.1, "orientationD": 1.1}}, "geoShape": map[string]interface{}{"line": map[string]interface{}{"positions": []interface{}{map[string]interface{}{}}}, "polygon": map[string]interface{}{"rings": []interface{}{map[string]interface{}{}}, "isRectangle": true}, "ellipse": map[string]interface{}{"semiMajorAxisM": 1.1, "semiMinorAxisM": 1.1, "orientationD": 1.1, "heightM": 1.1}, "ellipsoid": map[string]interface{}{"forwardAxisM": 1.1, "sideAxisM": 1.1, "upAxisM": 1.1}}, "geoDetails": map[string]interface{}{"type": "GEO_TYPE_INVALID", "controlArea": map[string]interface{}{"type": "CONTROL_AREA_TYPE_INVALID"}, "acm": map[string]interface{}{"acmType": "ACM_DETAIL_TYPE_INVALID", "acmDescription": "acmDescription"}}, "aliases": map[string]interface{}{"alternateIds": []interface{}{map[string]interface{}{}}, "name": "name"}, "tracked": map[string]interface{}{"trackQualityWrapper": 1, "sensorHits": 1, "numberOfObjects": map[string]interface{}{"lowerBound": 1, "upperBound": 1}, "radarCrossSection": 1.1, "lastMeasurementTime": "2024-01-15T09:30:00Z"}, "correlation": map[string]interface{}{"primary": map[string]interface{}{"secondaryEntityIds": []interface{}{"secondaryEntityIds"}}, "secondary": map[string]interface{}{"primaryEntityId": "primaryEntityId"}, "membership": map[string]interface{}{"correlationSetId": "correlationSetId"}, "decorrelation": map[string]interface{}{"decorrelatedEntities": []interface{}{map[string]interface{}{}}}}, "milView": map[string]interface{}{"disposition": "DISPOSITION_UNKNOWN", "environment": "ENVIRONMENT_UNKNOWN", "nationality": "NATIONALITY_INVALID"}, "ontology": map[string]interface{}{"platformType": "platformType", "specificType": "specificType", "template": "TEMPLATE_INVALID"}, "sensors": map[string]interface{}{"sensors": []interface{}{map[string]interface{}{}}}, "payloads": map[string]interface{}{"payloadConfigurations": []interface{}{map[string]interface{}{}}}, "powerState": map[string]interface{}{"sourceIdToState": map[string]interface{}{"key": map[string]interface{}{}}}, "provenance": map[string]interface{}{"integrationName": "integrationName", "dataType": "dataType", "sourceId": "sourceId", "sourceUpdateTime": "2024-01-15T09:30:00Z", "sourceDescription": "sourceDescription"}, "overrides": map[string]interface{}{"override": []interface{}{map[string]interface{}{}}}, "indicators": map[string]interface{}{"simulated": true, "exercise": true, "emergency": true, "c2": true, "egressable": true, "starred": true}, "targetPriority": map[string]interface{}{"highValueTarget": map[string]interface{}{"isHighValueTarget": true, "targetPriority": 1, "targetMatches": []interface{}{map[string]interface{}{}}, "isHighPayoffTarget": true}, "threat": map[string]interface{}{"isThreat": true}}, "signal": map[string]interface{}{"bandwidthHz": 1.1, "signalToNoiseRatio": 1.1, "emitterNotations": []interface{}{map[string]interface{}{}}, "pulseWidthS": 1.1, "scanCharacteristics": map[string]interface{}{"scanType": "SCAN_TYPE_INVALID", "scanPeriodS": 1.1}}, "transponderCodes": map[string]interface{}{"mode1": 1, "mode2": 1, "mode3": 1, "mode4InterrogationResponse": "INTERROGATION_RESPONSE_INVALID", "mode5": map[string]interface{}{"mode5InterrogationResponse": "INTERROGATION_RESPONSE_INVALID", "mode5": 1, "mode5PlatformId": 1}, "modeS": map[string]interface{}{"id": "id", "address": 1}}, "dataClassification": map[string]interface{}{"default": map[string]interface{}{"level": "CLASSIFICATION_LEVELS_INVALID", "caveats": []interface{}{"caveats"}}, "fields": []interface{}{map[string]interface{}{}}}, "taskCatalog": map[string]interface{}{"taskDefinitions": []interface{}{map[string]interface{}{}}}, "media": map[string]interface{}{"media": []interface{}{map[string]interface{}{}}}, "relationships": map[string]interface{}{"relationships": []interface{}{map[string]interface{}{}}}, "visualDetails": map[string]interface{}{"rangeRings": map[string]interface{}{"minDistanceM": 1.1, "maxDistanceM": 1.1, "ringCount": 1}}, "dimensions": map[string]interface{}{"lengthM": 1.1}, "routeDetails": map[string]interface{}{"destinationName": "destinationName", "estimatedArrivalTime": "2024-01-15T09:30:00Z"}, "schedules": map[string]interface{}{"schedules": []interface{}{map[string]interface{}{}}}, "health": map[string]interface{}{"connectionStatus": "CONNECTION_STATUS_INVALID", "healthStatus": "HEALTH_STATUS_INVALID", "components": []interface{}{map[string]interface{}{}}, "updateTime": "2024-01-15T09:30:00Z", "activeAlerts": []interface{}{map[string]interface{}{}}}, "groupDetails": map[string]interface{}{"echelon": map[string]interface{}{"armyEchelon": "ARMY_ECHELON_INVALID"}}, "supplies": map[string]interface{}{"fuel": []interface{}{map[string]interface{}{}}}, "symbology": map[string]interface{}{"milStd2525C": map[string]interface{}{"sidc": "sidc"}}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &Lattice.Entity{}
	_, invocationErr := client.Entities.PublishEntity(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestEntitiesGetEntityWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Get(gowiremock.URLPathTemplate("/api/v1/entities/{entityId}")).WithPathParam(
		"entityId",
		gowiremock.Matching("entityId"),
	).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"entityId": "entityId", "description": "description", "isLive": true, "createdTime": "2024-01-15T09:30:00Z", "expiryTime": "2024-01-15T09:30:00Z", "noExpiry": true, "status": map[string]interface{}{"platformActivity": "platformActivity", "role": "role"}, "location": map[string]interface{}{"position": map[string]interface{}{"latitudeDegrees": 1.1, "longitudeDegrees": 1.1, "altitudeHaeMeters": 1.1, "altitudeAglMeters": 1.1, "altitudeAsfMeters": 1.1, "pressureDepthMeters": 1.1}, "velocityEnu": map[string]interface{}{"e": 1.1, "n": 1.1, "u": 1.1}, "speedMps": 1.1, "acceleration": map[string]interface{}{"e": 1.1, "n": 1.1, "u": 1.1}, "attitudeEnu": map[string]interface{}{"x": 1.1, "y": 1.1, "z": 1.1, "w": 1.1}}, "locationUncertainty": map[string]interface{}{"positionEnuCov": map[string]interface{}{"mxx": 1.1, "mxy": 1.1, "mxz": 1.1, "myy": 1.1, "myz": 1.1, "mzz": 1.1}, "velocityEnuCov": map[string]interface{}{"mxx": 1.1, "mxy": 1.1, "mxz": 1.1, "myy": 1.1, "myz": 1.1, "mzz": 1.1}, "positionErrorEllipse": map[string]interface{}{"probability": 1.1, "semiMajorAxisM": 1.1, "semiMinorAxisM": 1.1, "orientationD": 1.1}}, "geoShape": map[string]interface{}{"line": map[string]interface{}{"positions": []interface{}{map[string]interface{}{}}}, "polygon": map[string]interface{}{"rings": []interface{}{map[string]interface{}{}}, "isRectangle": true}, "ellipse": map[string]interface{}{"semiMajorAxisM": 1.1, "semiMinorAxisM": 1.1, "orientationD": 1.1, "heightM": 1.1}, "ellipsoid": map[string]interface{}{"forwardAxisM": 1.1, "sideAxisM": 1.1, "upAxisM": 1.1}}, "geoDetails": map[string]interface{}{"type": "GEO_TYPE_INVALID", "controlArea": map[string]interface{}{"type": "CONTROL_AREA_TYPE_INVALID"}, "acm": map[string]interface{}{"acmType": "ACM_DETAIL_TYPE_INVALID", "acmDescription": "acmDescription"}}, "aliases": map[string]interface{}{"alternateIds": []interface{}{map[string]interface{}{}}, "name": "name"}, "tracked": map[string]interface{}{"trackQualityWrapper": 1, "sensorHits": 1, "numberOfObjects": map[string]interface{}{"lowerBound": 1, "upperBound": 1}, "radarCrossSection": 1.1, "lastMeasurementTime": "2024-01-15T09:30:00Z"}, "correlation": map[string]interface{}{"primary": map[string]interface{}{"secondaryEntityIds": []interface{}{"secondaryEntityIds"}}, "secondary": map[string]interface{}{"primaryEntityId": "primaryEntityId"}, "membership": map[string]interface{}{"correlationSetId": "correlationSetId"}, "decorrelation": map[string]interface{}{"decorrelatedEntities": []interface{}{map[string]interface{}{}}}}, "milView": map[string]interface{}{"disposition": "DISPOSITION_UNKNOWN", "environment": "ENVIRONMENT_UNKNOWN", "nationality": "NATIONALITY_INVALID"}, "ontology": map[string]interface{}{"platformType": "platformType", "specificType": "specificType", "template": "TEMPLATE_INVALID"}, "sensors": map[string]interface{}{"sensors": []interface{}{map[string]interface{}{}}}, "payloads": map[string]interface{}{"payloadConfigurations": []interface{}{map[string]interface{}{}}}, "powerState": map[string]interface{}{"sourceIdToState": map[string]interface{}{"key": map[string]interface{}{}}}, "provenance": map[string]interface{}{"integrationName": "integrationName", "dataType": "dataType", "sourceId": "sourceId", "sourceUpdateTime": "2024-01-15T09:30:00Z", "sourceDescription": "sourceDescription"}, "overrides": map[string]interface{}{"override": []interface{}{map[string]interface{}{}}}, "indicators": map[string]interface{}{"simulated": true, "exercise": true, "emergency": true, "c2": true, "egressable": true, "starred": true}, "targetPriority": map[string]interface{}{"highValueTarget": map[string]interface{}{"isHighValueTarget": true, "targetPriority": 1, "targetMatches": []interface{}{map[string]interface{}{}}, "isHighPayoffTarget": true}, "threat": map[string]interface{}{"isThreat": true}}, "signal": map[string]interface{}{"bandwidthHz": 1.1, "signalToNoiseRatio": 1.1, "emitterNotations": []interface{}{map[string]interface{}{}}, "pulseWidthS": 1.1, "scanCharacteristics": map[string]interface{}{"scanType": "SCAN_TYPE_INVALID", "scanPeriodS": 1.1}}, "transponderCodes": map[string]interface{}{"mode1": 1, "mode2": 1, "mode3": 1, "mode4InterrogationResponse": "INTERROGATION_RESPONSE_INVALID", "mode5": map[string]interface{}{"mode5InterrogationResponse": "INTERROGATION_RESPONSE_INVALID", "mode5": 1, "mode5PlatformId": 1}, "modeS": map[string]interface{}{"id": "id", "address": 1}}, "dataClassification": map[string]interface{}{"default": map[string]interface{}{"level": "CLASSIFICATION_LEVELS_INVALID", "caveats": []interface{}{"caveats"}}, "fields": []interface{}{map[string]interface{}{}}}, "taskCatalog": map[string]interface{}{"taskDefinitions": []interface{}{map[string]interface{}{}}}, "media": map[string]interface{}{"media": []interface{}{map[string]interface{}{}}}, "relationships": map[string]interface{}{"relationships": []interface{}{map[string]interface{}{}}}, "visualDetails": map[string]interface{}{"rangeRings": map[string]interface{}{"minDistanceM": 1.1, "maxDistanceM": 1.1, "ringCount": 1}}, "dimensions": map[string]interface{}{"lengthM": 1.1}, "routeDetails": map[string]interface{}{"destinationName": "destinationName", "estimatedArrivalTime": "2024-01-15T09:30:00Z"}, "schedules": map[string]interface{}{"schedules": []interface{}{map[string]interface{}{}}}, "health": map[string]interface{}{"connectionStatus": "CONNECTION_STATUS_INVALID", "healthStatus": "HEALTH_STATUS_INVALID", "components": []interface{}{map[string]interface{}{}}, "updateTime": "2024-01-15T09:30:00Z", "activeAlerts": []interface{}{map[string]interface{}{}}}, "groupDetails": map[string]interface{}{"echelon": map[string]interface{}{"armyEchelon": "ARMY_ECHELON_INVALID"}}, "supplies": map[string]interface{}{"fuel": []interface{}{map[string]interface{}{}}}, "symbology": map[string]interface{}{"milStd2525C": map[string]interface{}{"sidc": "sidc"}}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	_, invocationErr := client.Entities.GetEntity(
		context.TODO(),
		"entityId",
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestEntitiesOverrideEntityWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Put(gowiremock.URLPathTemplate("/api/v1/entities/{entityId}/override/{fieldPath}")).WithPathParam(
		"entityId",
		gowiremock.Matching("entityId"),
	).WithPathParam(
		"fieldPath",
		gowiremock.Matching("mil_view.disposition"),
	).WithBodyPattern(gowiremock.MatchesJsonSchema(`{
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "required": [],
                    "properties": {
                        
                    },
                    "additionalProperties": true
                }`, "V202012")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"entityId": "entityId", "description": "description", "isLive": true, "createdTime": "2024-01-15T09:30:00Z", "expiryTime": "2024-01-15T09:30:00Z", "noExpiry": true, "status": map[string]interface{}{"platformActivity": "platformActivity", "role": "role"}, "location": map[string]interface{}{"position": map[string]interface{}{"latitudeDegrees": 1.1, "longitudeDegrees": 1.1, "altitudeHaeMeters": 1.1, "altitudeAglMeters": 1.1, "altitudeAsfMeters": 1.1, "pressureDepthMeters": 1.1}, "velocityEnu": map[string]interface{}{"e": 1.1, "n": 1.1, "u": 1.1}, "speedMps": 1.1, "acceleration": map[string]interface{}{"e": 1.1, "n": 1.1, "u": 1.1}, "attitudeEnu": map[string]interface{}{"x": 1.1, "y": 1.1, "z": 1.1, "w": 1.1}}, "locationUncertainty": map[string]interface{}{"positionEnuCov": map[string]interface{}{"mxx": 1.1, "mxy": 1.1, "mxz": 1.1, "myy": 1.1, "myz": 1.1, "mzz": 1.1}, "velocityEnuCov": map[string]interface{}{"mxx": 1.1, "mxy": 1.1, "mxz": 1.1, "myy": 1.1, "myz": 1.1, "mzz": 1.1}, "positionErrorEllipse": map[string]interface{}{"probability": 1.1, "semiMajorAxisM": 1.1, "semiMinorAxisM": 1.1, "orientationD": 1.1}}, "geoShape": map[string]interface{}{"line": map[string]interface{}{"positions": []interface{}{map[string]interface{}{}}}, "polygon": map[string]interface{}{"rings": []interface{}{map[string]interface{}{}}, "isRectangle": true}, "ellipse": map[string]interface{}{"semiMajorAxisM": 1.1, "semiMinorAxisM": 1.1, "orientationD": 1.1, "heightM": 1.1}, "ellipsoid": map[string]interface{}{"forwardAxisM": 1.1, "sideAxisM": 1.1, "upAxisM": 1.1}}, "geoDetails": map[string]interface{}{"type": "GEO_TYPE_INVALID", "controlArea": map[string]interface{}{"type": "CONTROL_AREA_TYPE_INVALID"}, "acm": map[string]interface{}{"acmType": "ACM_DETAIL_TYPE_INVALID", "acmDescription": "acmDescription"}}, "aliases": map[string]interface{}{"alternateIds": []interface{}{map[string]interface{}{}}, "name": "name"}, "tracked": map[string]interface{}{"trackQualityWrapper": 1, "sensorHits": 1, "numberOfObjects": map[string]interface{}{"lowerBound": 1, "upperBound": 1}, "radarCrossSection": 1.1, "lastMeasurementTime": "2024-01-15T09:30:00Z"}, "correlation": map[string]interface{}{"primary": map[string]interface{}{"secondaryEntityIds": []interface{}{"secondaryEntityIds"}}, "secondary": map[string]interface{}{"primaryEntityId": "primaryEntityId"}, "membership": map[string]interface{}{"correlationSetId": "correlationSetId"}, "decorrelation": map[string]interface{}{"decorrelatedEntities": []interface{}{map[string]interface{}{}}}}, "milView": map[string]interface{}{"disposition": "DISPOSITION_UNKNOWN", "environment": "ENVIRONMENT_UNKNOWN", "nationality": "NATIONALITY_INVALID"}, "ontology": map[string]interface{}{"platformType": "platformType", "specificType": "specificType", "template": "TEMPLATE_INVALID"}, "sensors": map[string]interface{}{"sensors": []interface{}{map[string]interface{}{}}}, "payloads": map[string]interface{}{"payloadConfigurations": []interface{}{map[string]interface{}{}}}, "powerState": map[string]interface{}{"sourceIdToState": map[string]interface{}{"key": map[string]interface{}{}}}, "provenance": map[string]interface{}{"integrationName": "integrationName", "dataType": "dataType", "sourceId": "sourceId", "sourceUpdateTime": "2024-01-15T09:30:00Z", "sourceDescription": "sourceDescription"}, "overrides": map[string]interface{}{"override": []interface{}{map[string]interface{}{}}}, "indicators": map[string]interface{}{"simulated": true, "exercise": true, "emergency": true, "c2": true, "egressable": true, "starred": true}, "targetPriority": map[string]interface{}{"highValueTarget": map[string]interface{}{"isHighValueTarget": true, "targetPriority": 1, "targetMatches": []interface{}{map[string]interface{}{}}, "isHighPayoffTarget": true}, "threat": map[string]interface{}{"isThreat": true}}, "signal": map[string]interface{}{"bandwidthHz": 1.1, "signalToNoiseRatio": 1.1, "emitterNotations": []interface{}{map[string]interface{}{}}, "pulseWidthS": 1.1, "scanCharacteristics": map[string]interface{}{"scanType": "SCAN_TYPE_INVALID", "scanPeriodS": 1.1}}, "transponderCodes": map[string]interface{}{"mode1": 1, "mode2": 1, "mode3": 1, "mode4InterrogationResponse": "INTERROGATION_RESPONSE_INVALID", "mode5": map[string]interface{}{"mode5InterrogationResponse": "INTERROGATION_RESPONSE_INVALID", "mode5": 1, "mode5PlatformId": 1}, "modeS": map[string]interface{}{"id": "id", "address": 1}}, "dataClassification": map[string]interface{}{"default": map[string]interface{}{"level": "CLASSIFICATION_LEVELS_INVALID", "caveats": []interface{}{"caveats"}}, "fields": []interface{}{map[string]interface{}{}}}, "taskCatalog": map[string]interface{}{"taskDefinitions": []interface{}{map[string]interface{}{}}}, "media": map[string]interface{}{"media": []interface{}{map[string]interface{}{}}}, "relationships": map[string]interface{}{"relationships": []interface{}{map[string]interface{}{}}}, "visualDetails": map[string]interface{}{"rangeRings": map[string]interface{}{"minDistanceM": 1.1, "maxDistanceM": 1.1, "ringCount": 1}}, "dimensions": map[string]interface{}{"lengthM": 1.1}, "routeDetails": map[string]interface{}{"destinationName": "destinationName", "estimatedArrivalTime": "2024-01-15T09:30:00Z"}, "schedules": map[string]interface{}{"schedules": []interface{}{map[string]interface{}{}}}, "health": map[string]interface{}{"connectionStatus": "CONNECTION_STATUS_INVALID", "healthStatus": "HEALTH_STATUS_INVALID", "components": []interface{}{map[string]interface{}{}}, "updateTime": "2024-01-15T09:30:00Z", "activeAlerts": []interface{}{map[string]interface{}{}}}, "groupDetails": map[string]interface{}{"echelon": map[string]interface{}{"armyEchelon": "ARMY_ECHELON_INVALID"}}, "supplies": map[string]interface{}{"fuel": []interface{}{map[string]interface{}{}}}, "symbology": map[string]interface{}{"milStd2525C": map[string]interface{}{"sidc": "sidc"}}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &Lattice.EntityOverride{}
	_, invocationErr := client.Entities.OverrideEntity(
		context.TODO(),
		"entityId",
		"mil_view.disposition",
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestEntitiesRemoveEntityOverrideWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Delete(gowiremock.URLPathTemplate("/api/v1/entities/{entityId}/override/{fieldPath}")).WithPathParam(
		"entityId",
		gowiremock.Matching("entityId"),
	).WithPathParam(
		"fieldPath",
		gowiremock.Matching("mil_view.disposition"),
	).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"entityId": "entityId", "description": "description", "isLive": true, "createdTime": "2024-01-15T09:30:00Z", "expiryTime": "2024-01-15T09:30:00Z", "noExpiry": true, "status": map[string]interface{}{"platformActivity": "platformActivity", "role": "role"}, "location": map[string]interface{}{"position": map[string]interface{}{"latitudeDegrees": 1.1, "longitudeDegrees": 1.1, "altitudeHaeMeters": 1.1, "altitudeAglMeters": 1.1, "altitudeAsfMeters": 1.1, "pressureDepthMeters": 1.1}, "velocityEnu": map[string]interface{}{"e": 1.1, "n": 1.1, "u": 1.1}, "speedMps": 1.1, "acceleration": map[string]interface{}{"e": 1.1, "n": 1.1, "u": 1.1}, "attitudeEnu": map[string]interface{}{"x": 1.1, "y": 1.1, "z": 1.1, "w": 1.1}}, "locationUncertainty": map[string]interface{}{"positionEnuCov": map[string]interface{}{"mxx": 1.1, "mxy": 1.1, "mxz": 1.1, "myy": 1.1, "myz": 1.1, "mzz": 1.1}, "velocityEnuCov": map[string]interface{}{"mxx": 1.1, "mxy": 1.1, "mxz": 1.1, "myy": 1.1, "myz": 1.1, "mzz": 1.1}, "positionErrorEllipse": map[string]interface{}{"probability": 1.1, "semiMajorAxisM": 1.1, "semiMinorAxisM": 1.1, "orientationD": 1.1}}, "geoShape": map[string]interface{}{"line": map[string]interface{}{"positions": []interface{}{map[string]interface{}{}}}, "polygon": map[string]interface{}{"rings": []interface{}{map[string]interface{}{}}, "isRectangle": true}, "ellipse": map[string]interface{}{"semiMajorAxisM": 1.1, "semiMinorAxisM": 1.1, "orientationD": 1.1, "heightM": 1.1}, "ellipsoid": map[string]interface{}{"forwardAxisM": 1.1, "sideAxisM": 1.1, "upAxisM": 1.1}}, "geoDetails": map[string]interface{}{"type": "GEO_TYPE_INVALID", "controlArea": map[string]interface{}{"type": "CONTROL_AREA_TYPE_INVALID"}, "acm": map[string]interface{}{"acmType": "ACM_DETAIL_TYPE_INVALID", "acmDescription": "acmDescription"}}, "aliases": map[string]interface{}{"alternateIds": []interface{}{map[string]interface{}{}}, "name": "name"}, "tracked": map[string]interface{}{"trackQualityWrapper": 1, "sensorHits": 1, "numberOfObjects": map[string]interface{}{"lowerBound": 1, "upperBound": 1}, "radarCrossSection": 1.1, "lastMeasurementTime": "2024-01-15T09:30:00Z"}, "correlation": map[string]interface{}{"primary": map[string]interface{}{"secondaryEntityIds": []interface{}{"secondaryEntityIds"}}, "secondary": map[string]interface{}{"primaryEntityId": "primaryEntityId"}, "membership": map[string]interface{}{"correlationSetId": "correlationSetId"}, "decorrelation": map[string]interface{}{"decorrelatedEntities": []interface{}{map[string]interface{}{}}}}, "milView": map[string]interface{}{"disposition": "DISPOSITION_UNKNOWN", "environment": "ENVIRONMENT_UNKNOWN", "nationality": "NATIONALITY_INVALID"}, "ontology": map[string]interface{}{"platformType": "platformType", "specificType": "specificType", "template": "TEMPLATE_INVALID"}, "sensors": map[string]interface{}{"sensors": []interface{}{map[string]interface{}{}}}, "payloads": map[string]interface{}{"payloadConfigurations": []interface{}{map[string]interface{}{}}}, "powerState": map[string]interface{}{"sourceIdToState": map[string]interface{}{"key": map[string]interface{}{}}}, "provenance": map[string]interface{}{"integrationName": "integrationName", "dataType": "dataType", "sourceId": "sourceId", "sourceUpdateTime": "2024-01-15T09:30:00Z", "sourceDescription": "sourceDescription"}, "overrides": map[string]interface{}{"override": []interface{}{map[string]interface{}{}}}, "indicators": map[string]interface{}{"simulated": true, "exercise": true, "emergency": true, "c2": true, "egressable": true, "starred": true}, "targetPriority": map[string]interface{}{"highValueTarget": map[string]interface{}{"isHighValueTarget": true, "targetPriority": 1, "targetMatches": []interface{}{map[string]interface{}{}}, "isHighPayoffTarget": true}, "threat": map[string]interface{}{"isThreat": true}}, "signal": map[string]interface{}{"bandwidthHz": 1.1, "signalToNoiseRatio": 1.1, "emitterNotations": []interface{}{map[string]interface{}{}}, "pulseWidthS": 1.1, "scanCharacteristics": map[string]interface{}{"scanType": "SCAN_TYPE_INVALID", "scanPeriodS": 1.1}}, "transponderCodes": map[string]interface{}{"mode1": 1, "mode2": 1, "mode3": 1, "mode4InterrogationResponse": "INTERROGATION_RESPONSE_INVALID", "mode5": map[string]interface{}{"mode5InterrogationResponse": "INTERROGATION_RESPONSE_INVALID", "mode5": 1, "mode5PlatformId": 1}, "modeS": map[string]interface{}{"id": "id", "address": 1}}, "dataClassification": map[string]interface{}{"default": map[string]interface{}{"level": "CLASSIFICATION_LEVELS_INVALID", "caveats": []interface{}{"caveats"}}, "fields": []interface{}{map[string]interface{}{}}}, "taskCatalog": map[string]interface{}{"taskDefinitions": []interface{}{map[string]interface{}{}}}, "media": map[string]interface{}{"media": []interface{}{map[string]interface{}{}}}, "relationships": map[string]interface{}{"relationships": []interface{}{map[string]interface{}{}}}, "visualDetails": map[string]interface{}{"rangeRings": map[string]interface{}{"minDistanceM": 1.1, "maxDistanceM": 1.1, "ringCount": 1}}, "dimensions": map[string]interface{}{"lengthM": 1.1}, "routeDetails": map[string]interface{}{"destinationName": "destinationName", "estimatedArrivalTime": "2024-01-15T09:30:00Z"}, "schedules": map[string]interface{}{"schedules": []interface{}{map[string]interface{}{}}}, "health": map[string]interface{}{"connectionStatus": "CONNECTION_STATUS_INVALID", "healthStatus": "HEALTH_STATUS_INVALID", "components": []interface{}{map[string]interface{}{}}, "updateTime": "2024-01-15T09:30:00Z", "activeAlerts": []interface{}{map[string]interface{}{}}}, "groupDetails": map[string]interface{}{"echelon": map[string]interface{}{"armyEchelon": "ARMY_ECHELON_INVALID"}}, "supplies": map[string]interface{}{"fuel": []interface{}{map[string]interface{}{}}}, "symbology": map[string]interface{}{"milStd2525C": map[string]interface{}{"sidc": "sidc"}}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	_, invocationErr := client.Entities.RemoveEntityOverride(
		context.TODO(),
		"entityId",
		"mil_view.disposition",
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestEntitiesLongPollEntityEventsWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Post(gowiremock.URLPathTemplate("/api/v1/entities/events")).WithBodyPattern(gowiremock.MatchesJsonSchema(`{
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "required": ["sessionToken"],
                    "properties": {
                        "sessionToken": {"type": "string"}
                    },
                    "additionalProperties": true
                }`, "V202012")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"sessionToken": "sessionToken", "entityEvents": []interface{}{map[string]interface{}{"eventType": "EVENT_TYPE_INVALID", "time": "2024-01-15T09:30:00Z"}}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &Lattice.EntityEventRequest{
		SessionToken: "sessionToken",
	}
	_, invocationErr := client.Entities.LongPollEntityEvents(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestEntitiesStreamEntitiesWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Post(gowiremock.URLPathTemplate("/api/v1/entities/stream")).WithBodyPattern(gowiremock.MatchesJsonSchema(`{
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "required": [],
                    "properties": {
                        
                    },
                    "additionalProperties": true
                }`, "V202012")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &Lattice.EntityStreamRequest{}
	_, invocationErr := client.Entities.StreamEntities(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}
