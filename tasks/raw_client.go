// Code generated by Fern. DO NOT EDIT.

package tasks

import (
	context "context"
	Lattice "github.com/anduril/lattice-sdk-go/v2"
	core "github.com/anduril/lattice-sdk-go/v2/core"
	internal "github.com/anduril/lattice-sdk-go/v2/internal"
	option "github.com/anduril/lattice-sdk-go/v2/option"
	http "net/http"
)

type RawClient struct {
	baseURL string
	caller  *internal.Caller
	options *core.RequestOptions
}

func NewRawClient(options *core.RequestOptions) *RawClient {
	return &RawClient{
		options: options,
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

func (r *RawClient) CreateTask(
	ctx context.Context,
	request *Lattice.TaskCreation,
	opts ...option.RequestOption,
) (*core.Response[*Lattice.Task], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://example.developer.anduril.com",
	)
	endpointURL := baseURL + "/api/v1/tasks"
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	headers.Add("Content-Type", "application/json")
	var response *Lattice.Task
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(Lattice.ErrorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*Lattice.Task]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) GetTask(
	ctx context.Context,
	// ID of task to return
	taskID string,
	opts ...option.RequestOption,
) (*core.Response[*Lattice.Task], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://example.developer.anduril.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/api/v1/tasks/%v",
		taskID,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	var response *Lattice.Task
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(Lattice.ErrorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*Lattice.Task]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) UpdateTaskStatus(
	ctx context.Context,
	// ID of task to update status of
	taskID string,
	request *Lattice.TaskStatusUpdate,
	opts ...option.RequestOption,
) (*core.Response[*Lattice.Task], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://example.developer.anduril.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/api/v1/tasks/%v/status",
		taskID,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	headers.Add("Content-Type", "application/json")
	var response *Lattice.Task
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPut,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(Lattice.ErrorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*Lattice.Task]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) QueryTasks(
	ctx context.Context,
	request *Lattice.TaskQuery,
	opts ...option.RequestOption,
) (*core.Response[*Lattice.TaskQueryResults], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://example.developer.anduril.com",
	)
	endpointURL := baseURL + "/api/v1/tasks/query"
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	headers.Add("Content-Type", "application/json")
	var response *Lattice.TaskQueryResults
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(Lattice.ErrorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*Lattice.TaskQueryResults]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) ListenAsAgent(
	ctx context.Context,
	request *Lattice.AgentListener,
	opts ...option.RequestOption,
) (*core.Response[*Lattice.AgentRequest], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://example.developer.anduril.com",
	)
	endpointURL := baseURL + "/api/v1/agent/listen"
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	headers.Add("Content-Type", "application/json")
	var response *Lattice.AgentRequest
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(Lattice.ErrorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*Lattice.AgentRequest]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}
