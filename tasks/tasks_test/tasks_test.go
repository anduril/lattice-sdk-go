// Code generated by Fern. DO NOT EDIT.

package tasks_test

import (
	context "context"
	fmt "fmt"
	v3 "github.com/anduril/lattice-sdk-go/v3"
	client "github.com/anduril/lattice-sdk-go/v3/client"
	option "github.com/anduril/lattice-sdk-go/v3/option"
	require "github.com/stretchr/testify/require"
	gowiremock "github.com/wiremock/go-wiremock"
	wiremocktestcontainersgo "github.com/wiremock/wiremock-testcontainers-go"
	http "net/http"
	os "os"
	testing "testing"
)

// TestMain sets up shared test fixtures for all tests in this package// Global test fixtures
var (
	WireMockContainer *wiremocktestcontainersgo.WireMockContainer
	WireMockBaseURL   string
	WireMockClient    *gowiremock.Client
)

// TestMain sets up shared test fixtures for all tests in this package
func TestMain(m *testing.M) {
	// Setup shared WireMock container
	ctx := context.Background()
	container, err := wiremocktestcontainersgo.RunContainerAndStopOnCleanup(
		ctx,
		&testing.T{},
		wiremocktestcontainersgo.WithImage("docker.io/wiremock/wiremock:3.9.1"),
	)
	if err != nil {
		fmt.Printf("Failed to start WireMock container: %v\n", err)
		os.Exit(1)
	}

	// Store global references
	WireMockContainer = container

	// Try to get the base URL using the standard method first
	baseURL, err := container.Endpoint(ctx, "")
	if err == nil {
		// Standard method worked (running outside DinD)
		// This uses the mapped port (e.g., localhost:59553)
		WireMockBaseURL = "http://" + baseURL
		WireMockClient = container.Client
	} else {
		// Standard method failed, use internal IP fallback (DinD environment)
		fmt.Printf("Standard endpoint resolution failed, using internal IP fallback: %v\n", err)

		inspect, err := container.Inspect(ctx)
		if err != nil {
			fmt.Printf("Failed to inspect WireMock container: %v\n", err)
			os.Exit(1)
		}

		// Find the IP address from the container's networks
		var containerIP string
		for _, network := range inspect.NetworkSettings.Networks {
			if network.IPAddress != "" {
				containerIP = network.IPAddress
				break
			}
		}

		if containerIP == "" {
			fmt.Printf("Failed to get WireMock container IP address\n")
			os.Exit(1)
		}

		// In DinD, use the internal port directly (8080 for WireMock HTTP)
		// Don't use the mapped port since it doesn't exist in this environment
		WireMockBaseURL = fmt.Sprintf("http://%s:8080", containerIP)

		// The container.Client was created with a bad URL, so we need a new one
		WireMockClient = gowiremock.NewClient(WireMockBaseURL)
	}

	fmt.Printf("WireMock available at: %s\n", WireMockBaseURL)

	// Run all tests
	code := m.Run()

	// Cleanup
	if WireMockContainer != nil {
		WireMockContainer.Terminate(ctx)
	}

	// Exit with the same code as the tests
	os.Exit(code)
}

func TestTasksCreateTaskWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Post(gowiremock.URLPathTemplate("/api/v1/tasks")).WithBodyPattern(gowiremock.MatchesJsonSchema(`{
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "required": [],
                    "properties": {
                        
                    },
                    "additionalProperties": true
                }`, "V202012")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"version": map[string]interface{}{"taskId": "taskId", "definitionVersion": 1, "statusVersion": 1}, "displayName": "displayName", "specification": map[string]interface{}{"@type": "@type"}, "createdBy": map[string]interface{}{"system": map[string]interface{}{"serviceName": "serviceName", "entityId": "entityId", "managesOwnScheduling": true}, "user": map[string]interface{}{"userId": "userId"}, "team": map[string]interface{}{"entityId": "entityId", "members": []interface{}{map[string]interface{}{}}}}, "lastUpdatedBy": map[string]interface{}{"system": map[string]interface{}{"serviceName": "serviceName", "entityId": "entityId", "managesOwnScheduling": true}, "user": map[string]interface{}{"userId": "userId"}, "team": map[string]interface{}{"entityId": "entityId", "members": []interface{}{map[string]interface{}{}}}}, "lastUpdateTime": "2024-01-15T09:30:00Z", "status": map[string]interface{}{"status": "STATUS_INVALID", "taskError": map[string]interface{}{"code": "ERROR_CODE_INVALID", "message": "message"}, "progress": map[string]interface{}{"@type": "@type"}, "result": map[string]interface{}{"@type": "@type"}, "startTime": "2024-01-15T09:30:00Z", "estimate": map[string]interface{}{"@type": "@type"}, "allocation": map[string]interface{}{"activeAgents": []interface{}{map[string]interface{}{}}}}, "scheduledTime": "2024-01-15T09:30:00Z", "relations": map[string]interface{}{"parentTaskId": "parentTaskId"}, "description": "description", "isExecutedElsewhere": true, "createTime": "2024-01-15T09:30:00Z", "replication": map[string]interface{}{"staleTime": "2024-01-15T09:30:00Z"}, "initialEntities": []interface{}{map[string]interface{}{"snapshot": true}}, "owner": map[string]interface{}{"entityId": "entityId"}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &Lattice.TaskCreation{}
	_, invocationErr := client.Tasks.CreateTask(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestTasksGetTaskWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Get(gowiremock.URLPathTemplate("/api/v1/tasks/{taskId}")).WithPathParam(
		"taskId",
		gowiremock.Matching("taskId"),
	).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"version": map[string]interface{}{"taskId": "taskId", "definitionVersion": 1, "statusVersion": 1}, "displayName": "displayName", "specification": map[string]interface{}{"@type": "@type"}, "createdBy": map[string]interface{}{"system": map[string]interface{}{"serviceName": "serviceName", "entityId": "entityId", "managesOwnScheduling": true}, "user": map[string]interface{}{"userId": "userId"}, "team": map[string]interface{}{"entityId": "entityId", "members": []interface{}{map[string]interface{}{}}}}, "lastUpdatedBy": map[string]interface{}{"system": map[string]interface{}{"serviceName": "serviceName", "entityId": "entityId", "managesOwnScheduling": true}, "user": map[string]interface{}{"userId": "userId"}, "team": map[string]interface{}{"entityId": "entityId", "members": []interface{}{map[string]interface{}{}}}}, "lastUpdateTime": "2024-01-15T09:30:00Z", "status": map[string]interface{}{"status": "STATUS_INVALID", "taskError": map[string]interface{}{"code": "ERROR_CODE_INVALID", "message": "message"}, "progress": map[string]interface{}{"@type": "@type"}, "result": map[string]interface{}{"@type": "@type"}, "startTime": "2024-01-15T09:30:00Z", "estimate": map[string]interface{}{"@type": "@type"}, "allocation": map[string]interface{}{"activeAgents": []interface{}{map[string]interface{}{}}}}, "scheduledTime": "2024-01-15T09:30:00Z", "relations": map[string]interface{}{"parentTaskId": "parentTaskId"}, "description": "description", "isExecutedElsewhere": true, "createTime": "2024-01-15T09:30:00Z", "replication": map[string]interface{}{"staleTime": "2024-01-15T09:30:00Z"}, "initialEntities": []interface{}{map[string]interface{}{"snapshot": true}}, "owner": map[string]interface{}{"entityId": "entityId"}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	_, invocationErr := client.Tasks.GetTask(
		context.TODO(),
		"taskId",
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestTasksUpdateTaskStatusWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Put(gowiremock.URLPathTemplate("/api/v1/tasks/{taskId}/status")).WithPathParam(
		"taskId",
		gowiremock.Matching("taskId"),
	).WithBodyPattern(gowiremock.MatchesJsonSchema(`{
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "required": [],
                    "properties": {
                        
                    },
                    "additionalProperties": true
                }`, "V202012")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"version": map[string]interface{}{"taskId": "taskId", "definitionVersion": 1, "statusVersion": 1}, "displayName": "displayName", "specification": map[string]interface{}{"@type": "@type"}, "createdBy": map[string]interface{}{"system": map[string]interface{}{"serviceName": "serviceName", "entityId": "entityId", "managesOwnScheduling": true}, "user": map[string]interface{}{"userId": "userId"}, "team": map[string]interface{}{"entityId": "entityId", "members": []interface{}{map[string]interface{}{}}}}, "lastUpdatedBy": map[string]interface{}{"system": map[string]interface{}{"serviceName": "serviceName", "entityId": "entityId", "managesOwnScheduling": true}, "user": map[string]interface{}{"userId": "userId"}, "team": map[string]interface{}{"entityId": "entityId", "members": []interface{}{map[string]interface{}{}}}}, "lastUpdateTime": "2024-01-15T09:30:00Z", "status": map[string]interface{}{"status": "STATUS_INVALID", "taskError": map[string]interface{}{"code": "ERROR_CODE_INVALID", "message": "message"}, "progress": map[string]interface{}{"@type": "@type"}, "result": map[string]interface{}{"@type": "@type"}, "startTime": "2024-01-15T09:30:00Z", "estimate": map[string]interface{}{"@type": "@type"}, "allocation": map[string]interface{}{"activeAgents": []interface{}{map[string]interface{}{}}}}, "scheduledTime": "2024-01-15T09:30:00Z", "relations": map[string]interface{}{"parentTaskId": "parentTaskId"}, "description": "description", "isExecutedElsewhere": true, "createTime": "2024-01-15T09:30:00Z", "replication": map[string]interface{}{"staleTime": "2024-01-15T09:30:00Z"}, "initialEntities": []interface{}{map[string]interface{}{"snapshot": true}}, "owner": map[string]interface{}{"entityId": "entityId"}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &Lattice.TaskStatusUpdate{}
	_, invocationErr := client.Tasks.UpdateTaskStatus(
		context.TODO(),
		"taskId",
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestTasksQueryTasksWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Post(gowiremock.URLPathTemplate("/api/v1/tasks/query")).WithBodyPattern(gowiremock.MatchesJsonSchema(`{
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "required": [],
                    "properties": {
                        
                    },
                    "additionalProperties": true
                }`, "V202012")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"tasks": []interface{}{map[string]interface{}{"displayName": "displayName", "lastUpdateTime": "2024-01-15T09:30:00Z", "scheduledTime": "2024-01-15T09:30:00Z", "description": "description", "isExecutedElsewhere": true, "createTime": "2024-01-15T09:30:00Z", "initialEntities": []interface{}{map[string]interface{}{}}}}, "nextPageToken": "nextPageToken"},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &Lattice.TaskQuery{}
	_, invocationErr := client.Tasks.QueryTasks(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestTasksListenAsAgentWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Post(gowiremock.URLPathTemplate("/api/v1/agent/listen")).WithBodyPattern(gowiremock.MatchesJsonSchema(`{
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "required": [],
                    "properties": {
                        
                    },
                    "additionalProperties": true
                }`, "V202012")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"executeRequest": map[string]interface{}{"task": map[string]interface{}{"displayName": "displayName", "lastUpdateTime": "2024-01-15T09:30:00Z", "scheduledTime": "2024-01-15T09:30:00Z", "description": "description", "isExecutedElsewhere": true, "createTime": "2024-01-15T09:30:00Z", "initialEntities": []interface{}{map[string]interface{}{}}}}, "cancelRequest": map[string]interface{}{"taskId": "taskId"}, "completeRequest": map[string]interface{}{"taskId": "taskId"}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &Lattice.AgentListener{}
	_, invocationErr := client.Tasks.ListenAsAgent(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}
