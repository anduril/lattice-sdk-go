// Code generated by Fern. DO NOT EDIT.

package objects

import (
	bytes "bytes"
	context "context"
	Lattice "github.com/anduril/lattice-sdk-go/v4"
	core "github.com/anduril/lattice-sdk-go/v4/core"
	internal "github.com/anduril/lattice-sdk-go/v4/internal"
	option "github.com/anduril/lattice-sdk-go/v4/option"
	io "io"
	http "net/http"
)

type RawClient struct {
	baseURL string
	caller  *internal.Caller
	options *core.RequestOptions
}

func NewRawClient(options *core.RequestOptions) *RawClient {
	return &RawClient{
		options: options,
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

func (r *RawClient) GetObject(
	ctx context.Context,
	// The path of the object to fetch.
	objectPath string,
	request *Lattice.GetObjectRequest,
	opts ...option.RequestOption,
) (*core.Response[io.Reader], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://example.developer.anduril.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/api/v1/objects/%v",
		objectPath,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	if request.AcceptEncoding != nil {
		headers.Add("Accept-Encoding", string(*request.AcceptEncoding))
	}
	if request.Priority != nil {
		headers.Add("Priority", *request.Priority)
	}

	response := bytes.NewBuffer(nil)
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        response,
			ErrorDecoder:    internal.NewErrorDecoder(Lattice.ErrorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[io.Reader]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) UploadObject(
	ctx context.Context,
	// Path of the Object that is to be uploaded.
	objectPath string,
	request io.Reader,
	opts ...option.RequestOption,
) (*core.Response[*Lattice.PathMetadata], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://example.developer.anduril.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/api/v1/objects/%v",
		objectPath,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	var response *Lattice.PathMetadata
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(Lattice.ErrorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*Lattice.PathMetadata]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) DeleteObject(
	ctx context.Context,
	// The path of the object to delete.
	objectPath string,
	opts ...option.RequestOption,
) (*core.Response[any], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://example.developer.anduril.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/api/v1/objects/%v",
		objectPath,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			ErrorDecoder:    internal.NewErrorDecoder(Lattice.ErrorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[any]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       nil,
	}, nil
}

func (r *RawClient) GetObjectMetadata(
	ctx context.Context,
	// The path of the object to query.
	objectPath string,
	opts ...option.RequestOption,
) (*core.Response[any], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://example.developer.anduril.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/api/v1/objects/%v",
		objectPath,
	)
	headers := internal.MergeHeaders(
		r.options.ToHeader(),
		options.ToHeader(),
	)
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodHead,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			ErrorDecoder:    internal.NewErrorDecoder(Lattice.ErrorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[any]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       nil,
	}, nil
}
