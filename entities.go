// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/anduril/lattice-sdk-go/internal"
	time "time"
)

type EntityEventRequest struct {
	// Long-poll session identifier. Leave empty to start a new polling session.
	SessionToken string `json:"sessionToken" url:"-"`
	// Maximum size of response batch. Defaults to 100. Must be between 1 and 2000 (inclusive).
	BatchSize *int `json:"batchSize,omitempty" url:"-"`
}

type EntityOverride struct {
	// The entity containing the overridden fields. The service will extract the overridable fields from
	// the object and ignore all other fields.
	Entity *Entity `json:"entity,omitempty" url:"-"`
	// Additional information about the source of the override.
	Provenance *Provenance `json:"provenance,omitempty" url:"-"`
}

// Event representing some type of entity change.
type EntityEvent struct {
	EventType *EntityEventEventType `json:"eventType,omitempty" url:"eventType,omitempty"`
	Time      *time.Time            `json:"time,omitempty" url:"time,omitempty"`
	Entity    *Entity               `json:"entity,omitempty" url:"entity,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityEvent) GetEventType() *EntityEventEventType {
	if e == nil {
		return nil
	}
	return e.EventType
}

func (e *EntityEvent) GetTime() *time.Time {
	if e == nil {
		return nil
	}
	return e.Time
}

func (e *EntityEvent) GetEntity() *Entity {
	if e == nil {
		return nil
	}
	return e.Entity
}

func (e *EntityEvent) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityEvent) UnmarshalJSON(data []byte) error {
	type embed EntityEvent
	var unmarshaler = struct {
		embed
		Time *internal.DateTime `json:"time,omitempty"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EntityEvent(unmarshaler.embed)
	e.Time = unmarshaler.Time.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityEvent) MarshalJSON() ([]byte, error) {
	type embed EntityEvent
	var marshaler = struct {
		embed
		Time *internal.DateTime `json:"time,omitempty"`
	}{
		embed: embed(*e),
		Time:  internal.NewOptionalDateTime(e.Time),
	}
	return json.Marshal(marshaler)
}

func (e *EntityEvent) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityEventEventType string

const (
	EntityEventEventTypeEventTypeInvalid            EntityEventEventType = "EVENT_TYPE_INVALID"
	EntityEventEventTypeEventTypeCreated            EntityEventEventType = "EVENT_TYPE_CREATED"
	EntityEventEventTypeEventTypeUpdate             EntityEventEventType = "EVENT_TYPE_UPDATE"
	EntityEventEventTypeEventTypeDeleted            EntityEventEventType = "EVENT_TYPE_DELETED"
	EntityEventEventTypeEventTypePreexisting        EntityEventEventType = "EVENT_TYPE_PREEXISTING"
	EntityEventEventTypeEventTypePostExpiryOverride EntityEventEventType = "EVENT_TYPE_POST_EXPIRY_OVERRIDE"
)

func NewEntityEventEventTypeFromString(s string) (EntityEventEventType, error) {
	switch s {
	case "EVENT_TYPE_INVALID":
		return EntityEventEventTypeEventTypeInvalid, nil
	case "EVENT_TYPE_CREATED":
		return EntityEventEventTypeEventTypeCreated, nil
	case "EVENT_TYPE_UPDATE":
		return EntityEventEventTypeEventTypeUpdate, nil
	case "EVENT_TYPE_DELETED":
		return EntityEventEventTypeEventTypeDeleted, nil
	case "EVENT_TYPE_PREEXISTING":
		return EntityEventEventTypeEventTypePreexisting, nil
	case "EVENT_TYPE_POST_EXPIRY_OVERRIDE":
		return EntityEventEventTypeEventTypePostExpiryOverride, nil
	}
	var t EntityEventEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EntityEventEventType) Ptr() *EntityEventEventType {
	return &e
}

type EntityEventResponse struct {
	// Long-poll session identifier. Use this token to resume polling on subsequent requests.
	SessionToken *string        `json:"sessionToken,omitempty" url:"sessionToken,omitempty"`
	EntityEvents []*EntityEvent `json:"entityEvents,omitempty" url:"entityEvents,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityEventResponse) GetSessionToken() *string {
	if e == nil {
		return nil
	}
	return e.SessionToken
}

func (e *EntityEventResponse) GetEntityEvents() []*EntityEvent {
	if e == nil {
		return nil
	}
	return e.EntityEvents
}

func (e *EntityEventResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityEventResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityEventResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityEventResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityEventResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}
